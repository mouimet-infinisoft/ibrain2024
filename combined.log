{"error":{},"level":"error","message":"Async task failed: 1","timestamp":"2024-11-03T23:18:06.494Z"}
{"error":{},"level":"error","message":"Async task failed: 2","timestamp":"2024-11-04T02:27:36.103Z"}
{"error":{},"level":"error","message":"Async task failed: 3","timestamp":"2024-11-04T02:36:02.235Z"}
{"error":{},"level":"error","message":"Async task failed: 4","timestamp":"2024-11-04T02:38:39.713Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 1","timestamp":"2024-11-04T03:22:21.176Z"}
{"error":{},"level":"error","message":"Task failed: 1","timestamp":"2024-11-04T03:22:21.191Z"}
{"level":"error","message":"Failed to create task: Failed to insert task in Supabase: Could not find the 'userId' column of 'tasks' in the schema cache","timestamp":"2024-11-04T03:22:21.203Z"}
{"level":"error","message":"Failed job 1  on queue task-queue","timestamp":"2024-11-04T03:22:21.200Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 2","timestamp":"2024-11-04T03:25:47.002Z"}
{"level":"error","message":"Failed to create task: Failed to insert task in Supabase: Could not find the 'userId' column of 'tasks' in the schema cache","timestamp":"2024-11-04T03:25:47.021Z"}
{"error":{},"level":"error","message":"Task failed: 2","timestamp":"2024-11-04T03:25:47.042Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 3","timestamp":"2024-11-04T03:27:18.650Z"}
{"level":"error","message":"Failed to create task: Failed to insert task in Supabase: Could not find the 'userId' column of 'tasks' in the schema cache","timestamp":"2024-11-04T03:27:18.674Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 3","timestamp":"2024-11-04T03:27:18.696Z"}
{"level":"info","message":"Task completed: 3","timestamp":"2024-11-04T03:27:18.718Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 4","timestamp":"2024-11-04T03:28:24.383Z"}
{"level":"info","message":"Task created in Supabase with ID: 1","timestamp":"2024-11-04T03:28:24.437Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 4","timestamp":"2024-11-04T03:28:24.448Z"}
{"level":"info","message":"Task completed: 4","timestamp":"2024-11-04T03:28:24.468Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 5","timestamp":"2024-11-04T03:33:18.615Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 5","timestamp":"2024-11-04T03:33:18.652Z"}
{"level":"info","message":"Task created in Supabase with ID: 2","timestamp":"2024-11-04T03:33:18.660Z"}
{"level":"info","message":"Task completed: 5","timestamp":"2024-11-04T03:33:18.670Z"}
{"level":"info","message":"Completed job 5 sendMessage on queue task-queue","timestamp":"2024-11-04T03:33:18.674Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 6","timestamp":"2024-11-04T03:35:39.847Z"}
{"error":{},"level":"error","message":"Task failed: 6","timestamp":"2024-11-04T03:35:39.852Z"}
{"level":"error","message":"Failed job 6 sendMessage on queue task-queue","timestamp":"2024-11-04T03:35:39.860Z"}
{"level":"info","message":"Task created in Supabase with ID: 3","timestamp":"2024-11-04T03:35:39.877Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 7","timestamp":"2024-11-04T03:38:45.446Z"}
{"error":{},"level":"error","message":"Task failed: 7","timestamp":"2024-11-04T03:38:45.448Z"}
{"level":"error","message":"Failed job 7 sendMessage on queue task-queue","timestamp":"2024-11-04T03:38:45.452Z"}
{"level":"info","message":"Task created in Supabase with ID: 4","timestamp":"2024-11-04T03:38:45.479Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 8","timestamp":"2024-11-04T03:40:54.228Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 8","timestamp":"2024-11-04T03:40:54.255Z"}
{"level":"info","message":"Task created in Supabase with ID: 5","timestamp":"2024-11-04T03:40:54.272Z"}
{"level":"info","message":"Task completed: 8","timestamp":"2024-11-04T03:40:54.280Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 9","timestamp":"2024-11-04T05:34:56.453Z"}
{"error":{},"level":"error","message":"Task failed: 9","timestamp":"2024-11-04T05:34:56.461Z"}
{"level":"error","message":"Failed job 9 sendMessage on queue task-queue","timestamp":"2024-11-04T05:34:56.473Z"}
{"level":"info","message":"Task created in Supabase with ID: 6","timestamp":"2024-11-04T05:34:56.475Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 10","timestamp":"2024-11-04T05:37:01.800Z"}
{"level":"info","message":"Task created in Supabase with ID: 7","timestamp":"2024-11-04T05:37:01.831Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 10","timestamp":"2024-11-04T05:37:01.843Z"}
{"level":"info","message":"Task completed: 10","timestamp":"2024-11-04T05:37:01.852Z"}
{"level":"info","message":"Completed job 10 sendMessage on queue task-queue","timestamp":"2024-11-04T05:37:01.855Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 11","timestamp":"2024-11-04T05:37:06.865Z"}
{"level":"info","message":"Task created in Supabase with ID: 8","timestamp":"2024-11-04T05:37:06.874Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 11","timestamp":"2024-11-04T05:37:06.879Z"}
{"level":"info","message":"Task completed: 11","timestamp":"2024-11-04T05:37:06.890Z"}
{"level":"info","message":"Completed job 11 sendMessage on queue task-queue","timestamp":"2024-11-04T05:37:06.892Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 12","timestamp":"2024-11-04T05:37:17.353Z"}
{"error":{},"level":"error","message":"Task failed: 12","timestamp":"2024-11-04T05:37:17.355Z"}
{"level":"error","message":"Failed job 12 sendMessage on queue task-queue","timestamp":"2024-11-04T05:37:17.359Z"}
{"level":"info","message":"Task created in Supabase with ID: 9","timestamp":"2024-11-04T05:37:17.365Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 13","timestamp":"2024-11-04T05:37:17.541Z"}
{"error":{},"level":"error","message":"Task failed: 13","timestamp":"2024-11-04T05:37:17.542Z"}
{"level":"error","message":"Failed job 13 sendMessage on queue task-queue","timestamp":"2024-11-04T05:37:17.546Z"}
{"level":"info","message":"Task created in Supabase with ID: 10","timestamp":"2024-11-04T05:37:17.559Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 14","timestamp":"2024-11-04T05:37:17.688Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 14","timestamp":"2024-11-04T05:37:17.698Z"}
{"level":"info","message":"Task completed: 14","timestamp":"2024-11-04T05:37:17.706Z"}
{"level":"info","message":"Task created in Supabase with ID: 11","timestamp":"2024-11-04T05:37:17.709Z"}
{"level":"info","message":"Completed job 14 sendMessage on queue task-queue","timestamp":"2024-11-04T05:37:17.712Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 15","timestamp":"2024-11-04T06:04:31.342Z"}
{"error":{},"level":"error","message":"Task failed: 15","timestamp":"2024-11-04T06:04:31.344Z"}
{"level":"error","message":"Failed job 15 sendMessage on queue task-queue","timestamp":"2024-11-04T06:04:31.346Z"}
{"level":"info","message":"Task created in Supabase with ID: 12","timestamp":"2024-11-04T06:04:31.373Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 16","timestamp":"2024-11-04T06:04:48.833Z"}
{"error":{},"level":"error","message":"Task failed: 16","timestamp":"2024-11-04T06:04:48.834Z"}
{"level":"error","message":"Failed job 16 sendMessage on queue task-queue","timestamp":"2024-11-04T06:04:48.837Z"}
{"level":"info","message":"Task created in Supabase with ID: 13","timestamp":"2024-11-04T06:04:48.847Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 17","timestamp":"2024-11-04T06:04:49.976Z"}
{"error":{},"level":"error","message":"Task failed: 17","timestamp":"2024-11-04T06:04:49.977Z"}
{"level":"error","message":"Failed job 17 sendMessage on queue task-queue","timestamp":"2024-11-04T06:04:49.979Z"}
{"level":"info","message":"Task created in Supabase with ID: 14","timestamp":"2024-11-04T06:04:49.987Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 18","timestamp":"2024-11-04T06:21:18.735Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 18","timestamp":"2024-11-04T06:21:18.765Z"}
{"level":"info","message":"Task created in Supabase with ID: 15","timestamp":"2024-11-04T06:21:18.775Z"}
{"level":"info","message":"Task completed: 18","timestamp":"2024-11-04T06:21:18.793Z"}
{"level":"info","message":"Completed job 18 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:18.796Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 19","timestamp":"2024-11-04T06:21:26.210Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 19","timestamp":"2024-11-04T06:21:26.214Z"}
{"level":"info","message":"Task completed: 19","timestamp":"2024-11-04T06:21:26.214Z"}
{"level":"info","message":"Completed job 19 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:26.217Z"}
{"level":"info","message":"Task created in Supabase with ID: 16","timestamp":"2024-11-04T06:21:26.220Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 20","timestamp":"2024-11-04T06:21:27.629Z"}
{"level":"info","message":"Task created in Supabase with ID: 17","timestamp":"2024-11-04T06:21:27.644Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 20","timestamp":"2024-11-04T06:21:27.652Z"}
{"level":"info","message":"Task completed: 20","timestamp":"2024-11-04T06:21:27.660Z"}
{"level":"info","message":"Completed job 20 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:27.663Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 21","timestamp":"2024-11-04T06:21:30.243Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 21","timestamp":"2024-11-04T06:21:30.245Z"}
{"level":"info","message":"Task completed: 21","timestamp":"2024-11-04T06:21:30.245Z"}
{"level":"info","message":"Completed job 21 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:30.247Z"}
{"level":"info","message":"Task created in Supabase with ID: 18","timestamp":"2024-11-04T06:21:30.250Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 22","timestamp":"2024-11-04T06:21:32.775Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 22","timestamp":"2024-11-04T06:21:32.781Z"}
{"level":"info","message":"Task completed: 22","timestamp":"2024-11-04T06:21:32.782Z"}
{"level":"info","message":"Task created in Supabase with ID: 19","timestamp":"2024-11-04T06:21:32.789Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 23","timestamp":"2024-11-04T06:21:32.923Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 23","timestamp":"2024-11-04T06:21:32.940Z"}
{"level":"info","message":"Task completed: 23","timestamp":"2024-11-04T06:21:32.950Z"}
{"level":"info","message":"Task created in Supabase with ID: 20","timestamp":"2024-11-04T06:21:32.954Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 24","timestamp":"2024-11-04T06:21:33.039Z"}
{"error":{},"level":"error","message":"Task failed: 24","timestamp":"2024-11-04T06:21:33.040Z"}
{"level":"error","message":"Failed job 24 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:33.045Z"}
{"level":"info","message":"Task created in Supabase with ID: 21","timestamp":"2024-11-04T06:21:33.058Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 25","timestamp":"2024-11-04T06:21:33.193Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 25","timestamp":"2024-11-04T06:21:33.196Z"}
{"level":"info","message":"Task completed: 25","timestamp":"2024-11-04T06:21:33.196Z"}
{"level":"info","message":"Completed job 25 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:33.198Z"}
{"level":"info","message":"Task created in Supabase with ID: 22","timestamp":"2024-11-04T06:21:33.205Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 26","timestamp":"2024-11-04T06:21:33.303Z"}
{"level":"info","message":"Task created in Supabase with ID: 23","timestamp":"2024-11-04T06:21:33.316Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 26","timestamp":"2024-11-04T06:21:33.337Z"}
{"level":"info","message":"Task completed: 26","timestamp":"2024-11-04T06:21:33.355Z"}
{"level":"info","message":"Completed job 26 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:33.357Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 27","timestamp":"2024-11-04T06:21:33.414Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 27","timestamp":"2024-11-04T06:21:33.418Z"}
{"level":"info","message":"Task completed: 27","timestamp":"2024-11-04T06:21:33.419Z"}
{"level":"info","message":"Task created in Supabase with ID: 24","timestamp":"2024-11-04T06:21:33.427Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 28","timestamp":"2024-11-04T06:21:33.534Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 28","timestamp":"2024-11-04T06:21:33.547Z"}
{"level":"info","message":"Task completed: 28","timestamp":"2024-11-04T06:21:33.547Z"}
{"level":"info","message":"Task created in Supabase with ID: 25","timestamp":"2024-11-04T06:21:33.553Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 29","timestamp":"2024-11-04T06:21:33.637Z"}
{"error":{},"level":"error","message":"Task failed: 29","timestamp":"2024-11-04T06:21:33.639Z"}
{"level":"error","message":"Failed job 29 sendMessage on queue task-queue","timestamp":"2024-11-04T06:21:33.641Z"}
{"level":"info","message":"Task created in Supabase with ID: 26","timestamp":"2024-11-04T06:21:33.652Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 30","timestamp":"2024-11-04T06:34:03.822Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 30","timestamp":"2024-11-04T06:34:03.856Z"}
{"level":"info","message":"Task created in Supabase with ID: 27","timestamp":"2024-11-04T06:34:03.864Z"}
{"level":"info","message":"Task completed: 30","timestamp":"2024-11-04T06:34:03.872Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 31","timestamp":"2024-11-04T06:34:05.200Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 31","timestamp":"2024-11-04T06:34:05.202Z"}
{"level":"info","message":"Task completed: 31","timestamp":"2024-11-04T06:34:05.202Z"}
{"level":"info","message":"Completed job 31 sendMessage on queue task-queue","timestamp":"2024-11-04T06:34:05.204Z"}
{"level":"info","message":"Task created in Supabase with ID: 28","timestamp":"2024-11-04T06:34:05.213Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 32","timestamp":"2024-11-04T06:34:06.821Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 32","timestamp":"2024-11-04T06:34:06.822Z"}
{"level":"info","message":"Task completed: 32","timestamp":"2024-11-04T06:34:06.823Z"}
{"level":"info","message":"Completed job 32 sendMessage on queue task-queue","timestamp":"2024-11-04T06:34:06.824Z"}
{"level":"info","message":"Task created in Supabase with ID: 29","timestamp":"2024-11-04T06:34:06.834Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 33","timestamp":"2024-11-04T09:04:36.821Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 33","timestamp":"2024-11-04T09:04:36.829Z"}
{"level":"info","message":"Task completed: 33","timestamp":"2024-11-04T09:04:36.831Z"}
{"level":"info","message":"Completed job 33 sendMessage on queue task-queue","timestamp":"2024-11-04T09:04:36.843Z"}
{"level":"info","message":"Task created in Supabase with ID: 30","timestamp":"2024-11-04T09:04:36.846Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 34","timestamp":"2024-11-04T11:51:36.693Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 34","timestamp":"2024-11-04T11:51:36.699Z"}
{"level":"info","message":"Task completed: 34","timestamp":"2024-11-04T11:51:36.702Z"}
{"level":"info","message":"Completed job 34 sendMessage on queue task-queue","timestamp":"2024-11-04T11:51:36.713Z"}
{"level":"info","message":"Task created in Supabase with ID: 31","timestamp":"2024-11-04T11:51:36.732Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 35","timestamp":"2024-11-04T11:51:37.723Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 35","timestamp":"2024-11-04T11:51:37.731Z"}
{"level":"info","message":"Task completed: 35","timestamp":"2024-11-04T11:51:37.732Z"}
{"level":"info","message":"Completed job 35 sendMessage on queue task-queue","timestamp":"2024-11-04T11:51:37.736Z"}
{"level":"info","message":"Task created in Supabase with ID: 32","timestamp":"2024-11-04T11:51:37.744Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 36","timestamp":"2024-11-04T11:51:38.514Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 36","timestamp":"2024-11-04T11:51:38.517Z"}
{"level":"info","message":"Task completed: 36","timestamp":"2024-11-04T11:51:38.520Z"}
{"level":"info","message":"Completed job 36 sendMessage on queue task-queue","timestamp":"2024-11-04T11:51:38.523Z"}
{"level":"info","message":"Task created in Supabase with ID: 33","timestamp":"2024-11-04T11:51:38.538Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 37","timestamp":"2024-11-04T11:51:39.281Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 37","timestamp":"2024-11-04T11:51:39.283Z"}
{"level":"info","message":"Task completed: 37","timestamp":"2024-11-04T11:51:39.285Z"}
{"level":"info","message":"Completed job 37 sendMessage on queue task-queue","timestamp":"2024-11-04T11:51:39.287Z"}
{"level":"info","message":"Task created in Supabase with ID: 34","timestamp":"2024-11-04T11:51:39.297Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 38","timestamp":"2024-11-04T11:51:39.875Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 38","timestamp":"2024-11-04T11:51:39.877Z"}
{"level":"info","message":"Task completed: 38","timestamp":"2024-11-04T11:51:39.879Z"}
{"level":"info","message":"Completed job 38 sendMessage on queue task-queue","timestamp":"2024-11-04T11:51:39.882Z"}
{"level":"info","message":"Task created in Supabase with ID: 35","timestamp":"2024-11-04T11:51:39.897Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 39","timestamp":"2024-11-04T11:51:40.289Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 39","timestamp":"2024-11-04T11:51:40.290Z"}
{"level":"info","message":"Task completed: 39","timestamp":"2024-11-04T11:51:40.291Z"}
{"level":"info","message":"Completed job 39 sendMessage on queue task-queue","timestamp":"2024-11-04T11:51:40.293Z"}
{"level":"info","message":"Task created in Supabase with ID: 36","timestamp":"2024-11-04T11:51:40.306Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 40","timestamp":"2024-11-04T11:52:02.124Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 40","timestamp":"2024-11-04T11:52:02.127Z"}
{"level":"info","message":"Task completed: 40","timestamp":"2024-11-04T11:52:02.128Z"}
{"level":"info","message":"Task created in Supabase with ID: 37","timestamp":"2024-11-04T11:52:02.142Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 41","timestamp":"2024-11-04T11:52:02.382Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 41","timestamp":"2024-11-04T11:52:02.386Z"}
{"level":"info","message":"Task completed: 41","timestamp":"2024-11-04T11:52:02.387Z"}
{"level":"info","message":"Task created in Supabase with ID: 38","timestamp":"2024-11-04T11:52:02.393Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 42","timestamp":"2024-11-04T11:52:02.657Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 42","timestamp":"2024-11-04T11:52:02.659Z"}
{"level":"info","message":"Task completed: 42","timestamp":"2024-11-04T11:52:02.660Z"}
{"level":"info","message":"Completed job 42 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:02.662Z"}
{"level":"info","message":"Task created in Supabase with ID: 39","timestamp":"2024-11-04T11:52:02.679Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 43","timestamp":"2024-11-04T11:52:02.874Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 43","timestamp":"2024-11-04T11:52:02.876Z"}
{"level":"info","message":"Task completed: 43","timestamp":"2024-11-04T11:52:02.876Z"}
{"level":"info","message":"Completed job 43 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:02.877Z"}
{"level":"info","message":"Task created in Supabase with ID: 40","timestamp":"2024-11-04T11:52:02.890Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 44","timestamp":"2024-11-04T11:52:03.031Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 44","timestamp":"2024-11-04T11:52:03.033Z"}
{"level":"info","message":"Task completed: 44","timestamp":"2024-11-04T11:52:03.035Z"}
{"level":"info","message":"Task created in Supabase with ID: 41","timestamp":"2024-11-04T11:52:03.049Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 45","timestamp":"2024-11-04T11:52:03.201Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 45","timestamp":"2024-11-04T11:52:03.201Z"}
{"level":"info","message":"Task completed: 45","timestamp":"2024-11-04T11:52:03.202Z"}
{"level":"info","message":"Completed job 45 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:03.203Z"}
{"level":"info","message":"Task created in Supabase with ID: 42","timestamp":"2024-11-04T11:52:03.210Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 46","timestamp":"2024-11-04T11:52:03.344Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 46","timestamp":"2024-11-04T11:52:03.346Z"}
{"level":"info","message":"Task completed: 46","timestamp":"2024-11-04T11:52:03.347Z"}
{"level":"info","message":"Task created in Supabase with ID: 43","timestamp":"2024-11-04T11:52:03.361Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 47","timestamp":"2024-11-04T11:52:03.507Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 47","timestamp":"2024-11-04T11:52:03.509Z"}
{"level":"info","message":"Task completed: 47","timestamp":"2024-11-04T11:52:03.509Z"}
{"level":"info","message":"Completed job 47 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:03.512Z"}
{"level":"info","message":"Task created in Supabase with ID: 44","timestamp":"2024-11-04T11:52:03.527Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 48","timestamp":"2024-11-04T11:52:03.652Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 48","timestamp":"2024-11-04T11:52:03.653Z"}
{"level":"info","message":"Task completed: 48","timestamp":"2024-11-04T11:52:03.654Z"}
{"level":"info","message":"Completed job 48 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:03.655Z"}
{"level":"info","message":"Task created in Supabase with ID: 45","timestamp":"2024-11-04T11:52:03.668Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 49","timestamp":"2024-11-04T11:52:03.789Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 49","timestamp":"2024-11-04T11:52:03.790Z"}
{"level":"info","message":"Task completed: 49","timestamp":"2024-11-04T11:52:03.791Z"}
{"level":"info","message":"Completed job 49 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:03.792Z"}
{"level":"info","message":"Task created in Supabase with ID: 46","timestamp":"2024-11-04T11:52:03.805Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 50","timestamp":"2024-11-04T11:52:03.968Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 50","timestamp":"2024-11-04T11:52:03.969Z"}
{"level":"info","message":"Task completed: 50","timestamp":"2024-11-04T11:52:03.970Z"}
{"level":"info","message":"Completed job 50 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:03.971Z"}
{"level":"info","message":"Task created in Supabase with ID: 47","timestamp":"2024-11-04T11:52:03.982Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 51","timestamp":"2024-11-04T11:52:04.158Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 51","timestamp":"2024-11-04T11:52:04.159Z"}
{"level":"info","message":"Task completed: 51","timestamp":"2024-11-04T11:52:04.160Z"}
{"level":"info","message":"Completed job 51 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:04.161Z"}
{"level":"info","message":"Task created in Supabase with ID: 48","timestamp":"2024-11-04T11:52:04.170Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 52","timestamp":"2024-11-04T11:52:04.385Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 52","timestamp":"2024-11-04T11:52:04.386Z"}
{"level":"info","message":"Task completed: 52","timestamp":"2024-11-04T11:52:04.387Z"}
{"level":"info","message":"Task created in Supabase with ID: 49","timestamp":"2024-11-04T11:52:04.401Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 53","timestamp":"2024-11-04T11:52:04.636Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 53","timestamp":"2024-11-04T11:52:04.637Z"}
{"level":"info","message":"Task completed: 53","timestamp":"2024-11-04T11:52:04.638Z"}
{"level":"info","message":"Task created in Supabase with ID: 50","timestamp":"2024-11-04T11:52:04.648Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 54","timestamp":"2024-11-04T11:52:04.949Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 54","timestamp":"2024-11-04T11:52:04.949Z"}
{"level":"info","message":"Task completed: 54","timestamp":"2024-11-04T11:52:04.950Z"}
{"level":"info","message":"Completed job 54 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:04.951Z"}
{"level":"info","message":"Task created in Supabase with ID: 51","timestamp":"2024-11-04T11:52:04.974Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 55","timestamp":"2024-11-04T11:52:05.093Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 55","timestamp":"2024-11-04T11:52:05.096Z"}
{"level":"info","message":"Task completed: 55","timestamp":"2024-11-04T11:52:05.097Z"}
{"level":"info","message":"Completed job 55 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:05.098Z"}
{"level":"info","message":"Task created in Supabase with ID: 52","timestamp":"2024-11-04T11:52:05.104Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 56","timestamp":"2024-11-04T11:52:05.309Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 56","timestamp":"2024-11-04T11:52:05.311Z"}
{"level":"info","message":"Task completed: 56","timestamp":"2024-11-04T11:52:05.311Z"}
{"level":"info","message":"Completed job 56 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:05.313Z"}
{"level":"info","message":"Task created in Supabase with ID: 53","timestamp":"2024-11-04T11:52:05.321Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 57","timestamp":"2024-11-04T11:52:05.493Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 57","timestamp":"2024-11-04T11:52:05.495Z"}
{"level":"info","message":"Task completed: 57","timestamp":"2024-11-04T11:52:05.495Z"}
{"level":"info","message":"Completed job 57 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:05.497Z"}
{"level":"info","message":"Task created in Supabase with ID: 54","timestamp":"2024-11-04T11:52:05.507Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 58","timestamp":"2024-11-04T11:52:05.788Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 58","timestamp":"2024-11-04T11:52:05.789Z"}
{"level":"info","message":"Task completed: 58","timestamp":"2024-11-04T11:52:05.790Z"}
{"level":"info","message":"Completed job 58 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:05.791Z"}
{"level":"info","message":"Task created in Supabase with ID: 55","timestamp":"2024-11-04T11:52:05.811Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 59","timestamp":"2024-11-04T11:52:05.976Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 59","timestamp":"2024-11-04T11:52:05.978Z"}
{"level":"info","message":"Task completed: 59","timestamp":"2024-11-04T11:52:05.978Z"}
{"level":"info","message":"Completed job 59 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:05.983Z"}
{"level":"info","message":"Task created in Supabase with ID: 56","timestamp":"2024-11-04T11:52:05.995Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 60","timestamp":"2024-11-04T11:52:06.089Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 60","timestamp":"2024-11-04T11:52:06.090Z"}
{"level":"info","message":"Task completed: 60","timestamp":"2024-11-04T11:52:06.090Z"}
{"level":"info","message":"Task created in Supabase with ID: 57","timestamp":"2024-11-04T11:52:06.102Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 61","timestamp":"2024-11-04T11:52:06.324Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 61","timestamp":"2024-11-04T11:52:06.325Z"}
{"level":"info","message":"Task completed: 61","timestamp":"2024-11-04T11:52:06.326Z"}
{"level":"info","message":"Task created in Supabase with ID: 58","timestamp":"2024-11-04T11:52:06.339Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 62","timestamp":"2024-11-04T11:52:06.450Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 62","timestamp":"2024-11-04T11:52:06.451Z"}
{"level":"info","message":"Task completed: 62","timestamp":"2024-11-04T11:52:06.451Z"}
{"level":"info","message":"Completed job 62 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:06.452Z"}
{"level":"info","message":"Task created in Supabase with ID: 59","timestamp":"2024-11-04T11:52:06.471Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 63","timestamp":"2024-11-04T11:52:06.601Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 63","timestamp":"2024-11-04T11:52:06.602Z"}
{"level":"info","message":"Task completed: 63","timestamp":"2024-11-04T11:52:06.603Z"}
{"level":"info","message":"Completed job 63 sendMessage on queue task-queue","timestamp":"2024-11-04T11:52:06.604Z"}
{"level":"info","message":"Task created in Supabase with ID: 60","timestamp":"2024-11-04T11:52:06.617Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 64","timestamp":"2024-11-04T14:14:04.227Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 64","timestamp":"2024-11-04T14:14:04.235Z"}
{"level":"info","message":"Task created in Supabase with ID: 61","timestamp":"2024-11-04T14:14:04.268Z"}
{"level":"info","message":"Task completed: 64","timestamp":"2024-11-04T14:14:26.956Z"}
{"level":"info","message":"Completed job 64 sendMessage on queue task-queue","timestamp":"2024-11-04T14:14:26.959Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 65","timestamp":"2024-11-04T14:16:04.149Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 65","timestamp":"2024-11-04T14:16:04.154Z"}
{"error":{},"level":"error","message":"Task failed: 65","timestamp":"2024-11-04T14:16:04.200Z"}
{"level":"error","message":"Failed job 65 sendMessage on queue task-queue","timestamp":"2024-11-04T14:16:04.208Z"}
{"level":"info","message":"Task created in Supabase with ID: 62","timestamp":"2024-11-04T14:16:04.217Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 66","timestamp":"2024-11-04T14:21:21.937Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 66","timestamp":"2024-11-04T14:21:21.948Z"}
{"level":"info","message":"Task completed: 66","timestamp":"2024-11-04T14:21:21.952Z"}
{"level":"info","message":"Task created in Supabase with ID: 63","timestamp":"2024-11-04T14:21:21.987Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 67","timestamp":"2024-11-04T14:22:08.179Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 67","timestamp":"2024-11-04T14:22:08.185Z"}
{"level":"info","message":"Task created in Supabase with ID: 64","timestamp":"2024-11-04T14:22:08.194Z"}
{"level":"info","message":"Task completed: 67","timestamp":"2024-11-04T14:22:22.454Z"}
{"level":"info","message":"Completed job 67 sendMessage on queue task-queue with result undefined","timestamp":"2024-11-04T14:22:22.457Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 68","timestamp":"2024-11-04T14:31:28.955Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 68","timestamp":"2024-11-04T14:31:28.962Z"}
{"error":{},"level":"error","message":"Task failed: 68","timestamp":"2024-11-04T14:31:29.047Z"}
{"level":"info","message":"Task created in Supabase with ID: 65","timestamp":"2024-11-04T14:31:29.055Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 69","timestamp":"2024-11-04T14:41:46.602Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 69","timestamp":"2024-11-04T14:41:46.607Z"}
{"level":"info","message":"Task completed: 69","timestamp":"2024-11-04T14:41:46.607Z"}
{"level":"info","message":"Task created in Supabase with ID: 66","timestamp":"2024-11-04T14:41:46.637Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 70","timestamp":"2024-11-04T14:51:55.671Z"}
{"level":"info","message":"Task created in Supabase with ID: 67","timestamp":"2024-11-04T14:51:55.824Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 70","timestamp":"2024-11-04T14:52:45.707Z"}
{"level":"info","message":"Task completed: 70","timestamp":"2024-11-04T14:52:50.707Z"}
{"error":{},"level":"error","message":"Task failed: 70","timestamp":"2024-11-04T14:54:51.715Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 71","timestamp":"2024-11-04T14:59:55.394Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 71","timestamp":"2024-11-04T14:59:55.402Z"}
{"level":"info","message":"Task created in Supabase with ID: 68","timestamp":"2024-11-04T14:59:55.414Z"}
{"level":"verbose","message":"Received chunk: H","timestamp":"2024-11-04T15:00:05.587Z"}
{"error":{},"level":"error","message":"Task failed: 71","timestamp":"2024-11-04T15:00:05.588Z"}
{"level":"error","message":"Failed job 71 sendMessage on queue task-queue","timestamp":"2024-11-04T15:00:05.598Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 72","timestamp":"2024-11-04T15:03:01.597Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 72","timestamp":"2024-11-04T15:03:01.608Z"}
{"level":"info","message":"Task created in Supabase with ID: 69","timestamp":"2024-11-04T15:03:01.660Z"}
{"level":"verbose","message":"Received chunk: H","timestamp":"2024-11-04T15:03:10.295Z"}
{"error":{},"level":"error","message":"Task failed: 72","timestamp":"2024-11-04T15:03:10.296Z"}
{"level":"error","message":"Failed job 72 sendMessage on queue task-queue","timestamp":"2024-11-04T15:03:10.306Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 73","timestamp":"2024-11-04T15:08:35.309Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 73","timestamp":"2024-11-04T15:08:35.325Z"}
{"level":"info","message":"Task created in Supabase with ID: 70","timestamp":"2024-11-04T15:08:35.336Z"}
{"level":"verbose","message":"Received chunk: H","timestamp":"2024-11-04T15:08:59.219Z"}
{"error":{},"level":"error","message":"Task failed: 73","timestamp":"2024-11-04T15:08:59.220Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 74","timestamp":"2024-11-04T15:12:43.467Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 74","timestamp":"2024-11-04T15:12:43.476Z"}
{"level":"info","message":"Task created in Supabase with ID: 71","timestamp":"2024-11-04T15:12:43.484Z"}
{"level":"verbose","message":"Final Answer = \"Je suis rouge\" est une phrase en français qui signifie \"I am red\" ou \"I'm red\" en anglais. \n\nC'est une déclaration simple utilisée pour indiquer que la personne qui la dit est de couleur rouge, peut-être parce qu'elle porte un vêtement rouge ou simplement parce qu'elle a quelque chose de rouge avec elle.\n\nSi vous vouliez dire cela dans une autre langue, voici quelques exemples :\n\n- Anglais : \"I am red\"\n- Espagnol : \"Soy rojo/a\" (le \"rojo\" est masculin et le \"roja\" est féminin)\n- Italien : \"Sono rosso/a\" (idem pour l'italien)\n- Allemand : \"Ich bin rot\"\n- Néerlandais : \"Ik ben rood\"\n\nSi vous vouliez dire quelque chose de différent, n'hésitez pas à me le faire savoir !","timestamp":"2024-11-04T15:14:03.768Z"}
{"level":"info","message":"Completed job 74 sendMessage on queue task-queue with result \"Je suis rouge\" est une phrase en français qui signifie \"I am red\" ou \"I'm red\" en anglais. \n\nC'est une déclaration simple utilisée pour indiquer que la personne qui la dit est de couleur rouge, peut-être parce qu'elle porte un vêtement rouge ou simplement parce qu'elle a quelque chose de rouge avec elle.\n\nSi vous vouliez dire cela dans une autre langue, voici quelques exemples :\n\n- Anglais : \"I am red\"\n- Espagnol : \"Soy rojo/a\" (le \"rojo\" est masculin et le \"roja\" est féminin)\n- Italien : \"Sono rosso/a\" (idem pour l'italien)\n- Allemand : \"Ich bin rot\"\n- Néerlandais : \"Ik ben rood\"\n\nSi vous vouliez dire quelque chose de différent, n'hésitez pas à me le faire savoir !","timestamp":"2024-11-04T15:14:03.772Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 75","timestamp":"2024-11-04T15:49:46.918Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 75","timestamp":"2024-11-04T15:49:46.928Z"}
{"level":"info","message":"Task created in Supabase with ID: 72","timestamp":"2024-11-04T15:49:46.937Z"}
{"error":{},"level":"error","message":"Task failed: 75","timestamp":"2024-11-04T15:49:59.050Z"}
{"level":"error","message":"Failed job 75 sendMessage on queue task-queue","timestamp":"2024-11-04T15:49:59.070Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 76","timestamp":"2024-11-04T15:50:52.437Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 76","timestamp":"2024-11-04T15:50:52.452Z"}
{"level":"info","message":"Task created in Supabase with ID: 73","timestamp":"2024-11-04T15:50:52.463Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:54.045Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:54.301Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:55.437Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:55.846Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:56.463Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:56.840Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:57.214Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:57.582Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:57.927Z"}
{"level":"info","message":"Job 76 sendMessage on queue task-queue is [object Object]% complete","timestamp":"2024-11-04T15:50:58.353Z"}
{"level":"verbose","message":"Final Answer = Hello! How can I assist you today?","timestamp":"2024-11-04T15:50:58.354Z"}
{"level":"info","message":"Completed job 76 sendMessage on queue task-queue with result Hello! How can I assist you today?","timestamp":"2024-11-04T15:50:58.356Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 77","timestamp":"2024-11-04T15:54:25.550Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 77","timestamp":"2024-11-04T15:54:25.562Z"}
{"level":"info","message":"Task created in Supabase with ID: 74","timestamp":"2024-11-04T15:54:25.579Z"}
{"level":"verbose","message":"Final Answer = Hello! How can I help you today? Is there anything specific you would like to talk about or any questions you have?","timestamp":"2024-11-04T15:54:37.393Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 78","timestamp":"2024-11-04T15:55:48.941Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 78","timestamp":"2024-11-04T15:55:48.951Z"}
{"level":"info","message":"Task created in Supabase with ID: 75","timestamp":"2024-11-04T15:55:48.971Z"}
{"level":"verbose","message":"Final Answer = Salut Martin","timestamp":"2024-11-04T15:55:52.513Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 79","timestamp":"2024-11-04T15:56:34.678Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 79","timestamp":"2024-11-04T15:56:34.683Z"}
{"level":"info","message":"Task created in Supabase with ID: 76","timestamp":"2024-11-04T15:56:34.691Z"}
{"error":{},"level":"error","message":"Task failed: 79","timestamp":"2024-11-04T15:56:37.367Z"}
{"level":"error","message":"Failed job 79 sendMessage on queue task-queue","timestamp":"2024-11-04T15:56:37.381Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 80","timestamp":"2024-11-04T15:57:47.280Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 80","timestamp":"2024-11-04T15:57:47.282Z"}
{"level":"info","message":"Task created in Supabase with ID: 77","timestamp":"2024-11-04T15:57:47.310Z"}
{"level":"verbose","message":"Final Answer = Un mot doux en français peut être \"merci\". C'est une expression couramment utilisée pour montrer la gratitude ou l'admiration.","timestamp":"2024-11-04T15:58:01.078Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 81","timestamp":"2024-11-04T15:58:52.335Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 81","timestamp":"2024-11-04T15:58:52.341Z"}
{"level":"info","message":"Task created in Supabase with ID: 78","timestamp":"2024-11-04T15:58:52.402Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je% complete","timestamp":"2024-11-04T15:58:58.336Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis% complete","timestamp":"2024-11-04T15:58:58.737Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis dés% complete","timestamp":"2024-11-04T15:58:59.140Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désol% complete","timestamp":"2024-11-04T15:58:59.537Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé% complete","timestamp":"2024-11-04T15:58:59.929Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé,% complete","timestamp":"2024-11-04T15:59:00.352Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais% complete","timestamp":"2024-11-04T15:59:00.722Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je% complete","timestamp":"2024-11-04T15:59:01.101Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne% complete","timestamp":"2024-11-04T15:59:01.455Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprend% complete","timestamp":"2024-11-04T15:59:01.826Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends% complete","timestamp":"2024-11-04T15:59:02.207Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas% complete","timestamp":"2024-11-04T15:59:02.573Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas compl% complete","timestamp":"2024-11-04T15:59:02.945Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complè% complete","timestamp":"2024-11-04T15:59:03.314Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement% complete","timestamp":"2024-11-04T15:59:03.667Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre% complete","timestamp":"2024-11-04T15:59:04.029Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message% complete","timestamp":"2024-11-04T15:59:04.398Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message.% complete","timestamp":"2024-11-04T15:59:04.744Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il% complete","timestamp":"2024-11-04T15:59:05.106Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble% complete","timestamp":"2024-11-04T15:59:05.580Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être% complete","timestamp":"2024-11-04T15:59:05.962Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un% complete","timestamp":"2024-11-04T15:59:06.317Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un m% complete","timestamp":"2024-11-04T15:59:06.686Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mél% complete","timestamp":"2024-11-04T15:59:07.061Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange% complete","timestamp":"2024-11-04T15:59:07.429Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de% complete","timestamp":"2024-11-04T15:59:07.832Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français% complete","timestamp":"2024-11-04T15:59:08.214Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et% complete","timestamp":"2024-11-04T15:59:08.574Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d% complete","timestamp":"2024-11-04T15:59:08.919Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une% complete","timestamp":"2024-11-04T15:59:09.312Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre% complete","timestamp":"2024-11-04T15:59:09.688Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue% complete","timestamp":"2024-11-04T15:59:10.113Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que% complete","timestamp":"2024-11-04T15:59:10.595Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je% complete","timestamp":"2024-11-04T15:59:10.950Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne% complete","timestamp":"2024-11-04T15:59:11.326Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne re% complete","timestamp":"2024-11-04T15:59:11.679Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconn% complete","timestamp":"2024-11-04T15:59:12.044Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais% complete","timestamp":"2024-11-04T15:59:12.408Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas% complete","timestamp":"2024-11-04T15:59:12.754Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas.% complete","timestamp":"2024-11-04T15:59:13.135Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pour% complete","timestamp":"2024-11-04T15:59:13.507Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourrie% complete","timestamp":"2024-11-04T15:59:13.867Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez% complete","timestamp":"2024-11-04T15:59:14.221Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous% complete","timestamp":"2024-11-04T15:59:14.583Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s% complete","timestamp":"2024-11-04T15:59:14.949Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il% complete","timestamp":"2024-11-04T15:59:15.325Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous% complete","timestamp":"2024-11-04T15:59:15.704Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous pla% complete","timestamp":"2024-11-04T15:59:16.157Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît% complete","timestamp":"2024-11-04T15:59:16.544Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reform% complete","timestamp":"2024-11-04T15:59:16.937Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler% complete","timestamp":"2024-11-04T15:59:17.309Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre% complete","timestamp":"2024-11-04T15:59:17.682Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question% complete","timestamp":"2024-11-04T15:59:18.137Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en% complete","timestamp":"2024-11-04T15:59:18.533Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français% complete","timestamp":"2024-11-04T15:59:18.941Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard% complete","timestamp":"2024-11-04T15:59:19.369Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou% complete","timestamp":"2024-11-04T15:59:19.762Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en% complete","timestamp":"2024-11-04T15:59:20.196Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais% complete","timestamp":"2024-11-04T15:59:20.599Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais?% complete","timestamp":"2024-11-04T15:59:20.962Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je% complete","timestamp":"2024-11-04T15:59:21.333Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je ser% complete","timestamp":"2024-11-04T15:59:21.704Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai% complete","timestamp":"2024-11-04T15:59:22.070Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heure% complete","timestamp":"2024-11-04T15:59:22.416Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux% complete","timestamp":"2024-11-04T15:59:22.791Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d% complete","timestamp":"2024-11-04T15:59:23.192Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'% complete","timestamp":"2024-11-04T15:59:23.636Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'ess% complete","timestamp":"2024-11-04T15:59:24.033Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer% complete","timestamp":"2024-11-04T15:59:24.444Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d% complete","timestamp":"2024-11-04T15:59:24.801Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y% complete","timestamp":"2024-11-04T15:59:25.199Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répond% complete","timestamp":"2024-11-04T15:59:25.634Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre% complete","timestamp":"2024-11-04T15:59:26.031Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du% complete","timestamp":"2024-11-04T15:59:26.508Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux% complete","timestamp":"2024-11-04T15:59:26.991Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible% complete","timestamp":"2024-11-04T15:59:27.380Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une% complete","timestamp":"2024-11-04T15:59:27.799Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois% complete","timestamp":"2024-11-04T15:59:28.214Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu% complete","timestamp":"2024-11-04T15:59:28.582Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle% complete","timestamp":"2024-11-04T15:59:28.959Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera% complete","timestamp":"2024-11-04T15:59:29.331Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus% complete","timestamp":"2024-11-04T15:59:29.706Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus cl% complete","timestamp":"2024-11-04T15:59:30.069Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus claire% complete","timestamp":"2024-11-04T15:59:30.497Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus claire.% complete","timestamp":"2024-11-04T15:59:30.884Z"}
{"level":"info","message":"Job 81 sendMessage on queue task-queue is Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus claire.% complete","timestamp":"2024-11-04T15:59:31.277Z"}
{"level":"verbose","message":"Final Answer = Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus claire.","timestamp":"2024-11-04T15:59:31.278Z"}
{"level":"info","message":"Completed job 81 sendMessage on queue task-queue with result Je suis désolé, mais je ne comprends pas complètement votre message. Il semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous s'il vous plaît reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer d'y répondre du mieux possible une fois qu'elle sera plus claire.","timestamp":"2024-11-04T15:59:31.282Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 82","timestamp":"2024-11-04T16:47:11.286Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 82","timestamp":"2024-11-04T16:47:11.295Z"}
{"level":"info","message":"Task created in Supabase with ID: 79","timestamp":"2024-11-04T16:47:11.301Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello% complete","timestamp":"2024-11-04T16:47:12.683Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello!% complete","timestamp":"2024-11-04T16:47:12.947Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How% complete","timestamp":"2024-11-04T16:47:13.207Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can% complete","timestamp":"2024-11-04T16:47:13.471Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can I% complete","timestamp":"2024-11-04T16:47:13.727Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can I assist% complete","timestamp":"2024-11-04T16:47:13.987Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can I assist you% complete","timestamp":"2024-11-04T16:47:14.268Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can I assist you today% complete","timestamp":"2024-11-04T16:47:14.539Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can I assist you today?% complete","timestamp":"2024-11-04T16:47:14.794Z"}
{"level":"info","message":"Job 82 sendMessage on queue task-queue is Hello! How can I assist you today?% complete","timestamp":"2024-11-04T16:47:15.065Z"}
{"level":"verbose","message":"Final Answer = Hello! How can I assist you today?","timestamp":"2024-11-04T16:47:15.066Z"}
{"level":"info","message":"Completed job 82 sendMessage on queue task-queue with result Hello! How can I assist you today?","timestamp":"2024-11-04T16:47:15.068Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 83","timestamp":"2024-11-04T16:50:13.082Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 83","timestamp":"2024-11-04T16:50:13.093Z"}
{"level":"info","message":"Task created in Supabase with ID: 80","timestamp":"2024-11-04T16:50:13.109Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello% complete","timestamp":"2024-11-04T16:50:14.910Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello!% complete","timestamp":"2024-11-04T16:50:15.199Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not% complete","timestamp":"2024-11-04T16:50:15.517Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much% complete","timestamp":"2024-11-04T16:50:15.791Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much,% complete","timestamp":"2024-11-04T16:50:16.048Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just% complete","timestamp":"2024-11-04T16:50:16.294Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here% complete","timestamp":"2024-11-04T16:50:16.574Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to% complete","timestamp":"2024-11-04T16:50:16.837Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help% complete","timestamp":"2024-11-04T16:50:17.125Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you% complete","timestamp":"2024-11-04T16:50:17.378Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out% complete","timestamp":"2024-11-04T16:50:17.640Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out.% complete","timestamp":"2024-11-04T16:50:17.905Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How% complete","timestamp":"2024-11-04T16:50:18.226Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can% complete","timestamp":"2024-11-04T16:50:18.528Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can I% complete","timestamp":"2024-11-04T16:50:18.829Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can I assist% complete","timestamp":"2024-11-04T16:50:19.412Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can I assist you% complete","timestamp":"2024-11-04T16:50:19.750Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can I assist you today% complete","timestamp":"2024-11-04T16:50:20.054Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can I assist you today?% complete","timestamp":"2024-11-04T16:50:20.374Z"}
{"level":"info","message":"Job 83 sendMessage on queue task-queue is Hello! Not much, just here to help you out. How can I assist you today?% complete","timestamp":"2024-11-04T16:50:20.724Z"}
{"level":"verbose","message":"Final Answer = Hello! Not much, just here to help you out. How can I assist you today?","timestamp":"2024-11-04T16:50:20.725Z"}
{"level":"info","message":"Completed job 83 sendMessage on queue task-queue with result Hello! Not much, just here to help you out. How can I assist you today?","timestamp":"2024-11-04T16:50:20.727Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 84","timestamp":"2024-11-04T16:54:58.791Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 84","timestamp":"2024-11-04T16:54:58.802Z"}
{"level":"info","message":"Task created in Supabase with ID: 81","timestamp":"2024-11-04T16:54:58.813Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 85","timestamp":"2024-11-04T16:54:59.355Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 85","timestamp":"2024-11-04T16:54:59.359Z"}
{"level":"info","message":"Task created in Supabase with ID: 82","timestamp":"2024-11-04T16:54:59.365Z"}
{"level":"verbose","message":"Final Answer = Hello! How can I assist you today?","timestamp":"2024-11-04T16:55:07.544Z"}
{"level":"info","message":"Completed job 84 sendMessage on queue task-queue with result Hello! How can I assist you today?","timestamp":"2024-11-04T16:55:07.547Z"}
{"level":"verbose","message":"Final Answer = Hello! How can I help you today?","timestamp":"2024-11-04T16:55:08.331Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 86","timestamp":"2024-11-04T16:57:14.557Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 86","timestamp":"2024-11-04T16:57:14.563Z"}
{"level":"info","message":"Task created in Supabase with ID: 83","timestamp":"2024-11-04T16:57:14.570Z"}
{"level":"verbose","message":"Final Answer = Hey there! How can I assist you today? Is there something on your mind that you'd like to talk about or learn more about? I'm here to help with any questions you may have!","timestamp":"2024-11-04T16:57:27.814Z"}
{"level":"info","message":"Completed job 86 sendMessage on queue task-queue with result Hey there! How can I assist you today? Is there something on your mind that you'd like to talk about or learn more about? I'm here to help with any questions you may have!","timestamp":"2024-11-04T16:57:27.816Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 87","timestamp":"2024-11-04T17:26:11.816Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 87","timestamp":"2024-11-04T17:26:11.828Z"}
{"level":"info","message":"Task created in Supabase with ID: 84","timestamp":"2024-11-04T17:26:11.840Z"}
{"level":"verbose","message":"Final Answer = Salut! Oui, tout roule bien chez moi ! Que puis-je faire pour toi aujourd'hui? N'hésite pas à me poser une question ou à m'aider avec quelque chose que tu as en tête.","timestamp":"2024-11-04T17:26:44.342Z"}
{"level":"info","message":"Completed job 87 sendMessage on queue task-queue with result Salut! Oui, tout roule bien chez moi ! Que puis-je faire pour toi aujourd'hui? N'hésite pas à me poser une question ou à m'aider avec quelque chose que tu as en tête.","timestamp":"2024-11-04T17:26:44.344Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 88","timestamp":"2024-11-04T17:28:17.219Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 88","timestamp":"2024-11-04T17:28:17.230Z"}
{"level":"info","message":"Task created in Supabase with ID: 85","timestamp":"2024-11-04T17:28:17.242Z"}
{"level":"verbose","message":"Final Answer = Je suis désolé, mais je ne comprends pas complètement votre question. Elle semble être un mélange de français et d'une autre langue que je ne reconnais pas. Pourriez-vous reformuler votre question en français standard ou en anglais? Je serai heureux d'essayer de vous aider une fois que je la comprendrai mieux.","timestamp":"2024-11-04T17:28:42.955Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 89","timestamp":"2024-11-04T17:29:49.367Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 89","timestamp":"2024-11-04T17:29:49.373Z"}
{"level":"info","message":"Task created in Supabase with ID: 86","timestamp":"2024-11-04T17:29:49.382Z"}
{"level":"verbose","message":"Final Answer = Hello! How can I assist you today?","timestamp":"2024-11-04T17:29:53.063Z"}
{"level":"info","message":"Completed job 89 sendMessage on queue task-queue with result Hello! How can I assist you today?","timestamp":"2024-11-04T17:29:53.065Z"}
{"level":"info","message":"Task added to BullMQ queue with ID: 90","timestamp":"2024-11-04T17:32:15.968Z"}
{"level":"info","message":"Processing sendMessage task for task ID: 90","timestamp":"2024-11-04T17:32:15.976Z"}
{"level":"info","message":"Task created in Supabase with ID: 87","timestamp":"2024-11-04T17:32:15.984Z"}
{"level":"verbose","message":"Final Answer = Hello! I'm just a computer program, so I don't have feelings, but thanks for asking. How can I assist you today?","timestamp":"2024-11-04T17:32:26.568Z"}
{"level":"info","message":"Completed job 90 sendMessage on queue task-queue with result Hello! I'm just a computer program, so I don't have feelings, but thanks for asking. How can I assist you today?","timestamp":"2024-11-04T17:32:26.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:10:31.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:10:32.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:10:32.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:10:46.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:11:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:11:28.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:20:01.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:20:16.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:20:33.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:21:46.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:21:49.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:21:50.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:21:55.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:00.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:05.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:13.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:19.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:23.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:28.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:33.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:38.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:43.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:48.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:54.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:22:58.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:04.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:08.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:13.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:19.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:23.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:28.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:34.001Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:38.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:43.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:48.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:54.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:23:58.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:24:03.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:24:09.002Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:24:13.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:24:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:25:31.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:40:35.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:40:35.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:40:46.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:41:01.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:41:18.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:41:27.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:41:31.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:41:46.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:42:01.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:42:16.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:42:31.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:42:49.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:43:01.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:43:17.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:43:49.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:44:48.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:44:49.664Z"}
{"level":"info","message":"Completed job 1 cea59509-8211-47b4-b156-5b825c7c8789 on queue tasks with result undefined","timestamp":"2024-11-05T02:44:50.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:46:47.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:31.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:31.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:32.990Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:35.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:39.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:45.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:50.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:47:55.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:00.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:05.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:10.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:15.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:21.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:25.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:31.028Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:35.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:41.023Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:45.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:50.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:48:55.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:00.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:05.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:10.969Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:16.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:27.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:30.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:35.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:40.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:45.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:50.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:49:55.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:00.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:05.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:10.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:15.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:20.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:25.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:30.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:35.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:40.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:45.445Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:50.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:50:55.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:00.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:05.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:10.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:15.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:20.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:25.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:30.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:35.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:40.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:44.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:49.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:51.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:53.018Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:54.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:55.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:51:58.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:03.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:08.233Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:13.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:18.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:23.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:28.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:33.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:38.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:43.250Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:48.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:53.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:52:58.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:03.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:08.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:13.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:18.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:23.261Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:28.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:33.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:38.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:43.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:48.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:53:53.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:55:47.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:55:47.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T02:55:52.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:00:36.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:00:37.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:01:17.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:01:19.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:01:31.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:01:38.983Z"}
{"level":"info","message":"Completed job 2 299eaf2b-214e-4005-8107-844b9091176d on queue tasks with result undefined","timestamp":"2024-11-05T03:01:40.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:02:18.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:02:46.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:02:49.091Z"}
{"level":"info","message":"Completed job 3 71e02a29-4855-4b2c-ae86-60bbfa33af87 on queue tasks with result undefined","timestamp":"2024-11-05T03:02:50.118Z"}
{"level":"info","message":"Completed job 4 e140da7a-3f20-45c4-91d5-b06e2c35f72e on queue tasks with result undefined","timestamp":"2024-11-05T03:02:52.034Z"}
{"level":"info","message":"Completed job 5 3c2025a0-73d7-435d-8849-48f7d8ce6d22 on queue tasks with result undefined","timestamp":"2024-11-05T03:02:59.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:03:19.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:03:59.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:03.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:08.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:13.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:23.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:28.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:33.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:40.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:44.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:48.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:53.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:04:58.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:03.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:13.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:16.022Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:21.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:27.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:31.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:36.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:41.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:46.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:52.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:05:56.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:01.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:06.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:11.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:16.028Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:18.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:20.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:26.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:30.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:35.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:40.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:45.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:50.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:06:55.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:07:00.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:07:05.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:07:10.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:07:15.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:07:20.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:08:19.206Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:09:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:09:38.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:09:52.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:09:53.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:00.722Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:03.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:10.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:18.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:21.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:31.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:10:46.587Z"}
{"level":"info","message":"","timestamp":"2024-11-05T03:11:21.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:11:21.868Z"}
{"level":"info","message":"Sta","timestamp":"2024-11-05T03:11:25.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:11:25.765Z"}
{"level":"info","message":"Task Persistcy","timestamp":"2024-11-05T03:11:35.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:11:35.710Z"}
{"level":"info","message":"Task Persistcy Setup ","timestamp":"2024-11-05T03:11:43.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:11:43.866Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:11:51.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:11:51.667Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:11:59.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:11:59.102Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:00.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:00.174Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:03.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:03.855Z"}
{"level":"error","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:05.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:05.675Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:06.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:06.693Z"}
{"level":"error","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:08.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:08.373Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:08.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:08.936Z"}
{"level":"error","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:10.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:10.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:19.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:21.584Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:24.198Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:24.236Z"}
{"level":"error","message":"Task Persistcy Initialization   y","timestamp":"2024-11-05T03:12:25.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:25.691Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:27.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:27.728Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed","timestamp":"2024-11-05T03:12:28.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:28.937Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:30.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:30.545Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error: ","timestamp":"2024-11-05T03:12:31.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:31.613Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:36.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:36.370Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:901:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:12:37.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:37.882Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully","timestamp":"2024-11-05T03:12:38.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:38.495Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:901:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:12:39.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:39.566Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T03:12:43.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:43.366Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:901:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:12:44.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:12:44.587Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T03:13:15.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:15.921Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:901:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:13:17.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:17.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:21.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:22.265Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T03:13:23.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:23.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:23.650Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:13:24.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:24.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:36.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:40.894Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:13:44.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:44.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:46.851Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T03:13:51.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:51.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:52.615Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:13:52.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:52.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:53.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:57.996Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:13:58.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:58.918Z"}
{"level":"info","message":"Completed job 6 94a3c6e3-e523-4b5f-85a6-b1a449d0f822 on queue tasks with result undefined","timestamp":"2024-11-05T03:13:59.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:13:59.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:03.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:05.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:10.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:15.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:19.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:24.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:30.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:35.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:40.005Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:44.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:49.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:55.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:14:59.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:04.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:09.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:14.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:19.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:24.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:29.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:34.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:40.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:44.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:49.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:54.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:15:59.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:04.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:09.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:14.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:19.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:24.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:29.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:34.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:39.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:45.001Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:49.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:54.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:16:59.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:04.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:09.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:14.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:19.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:24.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:29.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:35.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:39.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:45.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:50.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:54.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:17:59.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:04.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:09.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:14.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:19.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:24.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:29.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:34.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:39.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:44.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:49.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:55.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:18:59.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:04.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:09.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:14.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:19.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:24.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:30.023Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:34.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:39.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:44.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:49.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:19:54.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:00.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:04.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:09.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:14.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:19.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:24.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:30.028Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:35.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:39.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:44.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:49.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:54.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:20:59.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:05.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:09.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:14.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:19.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:24.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:29.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:34.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:39.995Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:45.026Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:49.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:54.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:21:59.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:04.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:10.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:14.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:19.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:24.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:29.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:34.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:39.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:45.024Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:49.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:54.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:22:59.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:04.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:09.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:14.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:20.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:25.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:29.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:34.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:39.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:44.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:49.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:54.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:23:59.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:04.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:09.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:14.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:19.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:24.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:29.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:34.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:39.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:45.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:49.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:54.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:24:59.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:04.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:09.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:14.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:19.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:25.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:29.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:34.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:39.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:44.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:49.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:54.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:25:59.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:04.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:09.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:14.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:19.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:24.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:29.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:34.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:39.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:44.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:49.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:54.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:26:59.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:04.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:09.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:14.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:19.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:24.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:29.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:35.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:40.013Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:44.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:49.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:54.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:27:59.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:04.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:09.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:14.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:19.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:24.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:29.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:34.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:39.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:45.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:50.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:55.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:28:59.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:04.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:09.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:14.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:19.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:24.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:29.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:34.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:39.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:44.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:49.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:54.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:29:59.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:04.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:09.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:14.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:19.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:24.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:29.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:34.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:39.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:44.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:49.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:54.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:30:59.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:04.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:09.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:14.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:16.695Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:17.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:21.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:22.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:23.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:28.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:33.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:38.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:43.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:48.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:53.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:31:58.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:03.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:08.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:18.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:23.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:28.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:33.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:38.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:43.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:48.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:53.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:32:58.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:03.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:08.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:13.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:18.234Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:23.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:28.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:33.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:38.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:43.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:48.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:53.215Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:33:58.204Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:03.204Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:08.264Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:18.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:23.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:28.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:33.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:38.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:43.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:48.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:53.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:34:58.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:03.234Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:08.247Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:13.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:18.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:23.238Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:28.193Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:33.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:38.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:43.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:48.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:53.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:35:58.244Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:03.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:08.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:13.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:18.246Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:36:22.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:22.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:23.566Z"}
{"level":"info","message":"Completed job 7 7fe5b0f9-952e-4601-9876-5242ac95df8f on queue tasks with result undefined","timestamp":"2024-11-05T03:36:27.782Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:36:28.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:28.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:28.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:30.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:31.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:36.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:41.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:46.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:51.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:36:56.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:01.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:06.882Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:37:10.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:10.737Z"}
{"level":"info","message":"Completed job 8 d60c09d7-b4e0-4134-80ab-68c66700ec0c on queue tasks with result undefined","timestamp":"2024-11-05T03:37:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:11.971Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:37:12.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:12.293Z"}
{"level":"info","message":"Completed job 9 6667f1a0-f0ca-4161-8efb-8fa5cef3cf73 on queue tasks with result undefined","timestamp":"2024-11-05T03:37:12.443Z"}
{"level":"info","message":"Completed job 10 cba08224-5887-45d7-9585-b2ac9bfe3b2f on queue tasks with result undefined","timestamp":"2024-11-05T03:37:13.359Z"}
{"level":"info","message":"Completed job 11 d4f7e7f1-8349-47c1-81ec-60b389044cfc on queue tasks with result undefined","timestamp":"2024-11-05T03:37:13.674Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T03:37:13.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:13.702Z"}
{"level":"info","message":"Completed job 12 0ac04b70-e522-47c9-a69a-b3f3aa23c3d0 on queue tasks with result undefined","timestamp":"2024-11-05T03:37:13.850Z"}
{"level":"info","message":"Completed job 13 d589b3f9-05f4-47da-ae19-4f321d1db4fe on queue tasks with result undefined","timestamp":"2024-11-05T03:37:14.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:16.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:21.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:26.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:31.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:36.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:41.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:46.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:51.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:37:56.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:01.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:06.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:16.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:21.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:26.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:31.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:36.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:41.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:46.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:51.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:38:56.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:02.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:06.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:16.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:21.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:26.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:31.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:36.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:41.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:46.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:51.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:39:56.984Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:01.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:06.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:11.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:16.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:21.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:27.006Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:31.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:36.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:42.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:47.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:51.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:40:56.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:01.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:06.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:11.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:16.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:21.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:26.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:32.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:37.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:41.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:47.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:51.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:41:57.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:02.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:07.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:12.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:17.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:22.012Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:26.990Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:32.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:37.007Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:42.023Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:47.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:42:52.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:43:19.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:44:19.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:06.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:12.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:17.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:22.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:27.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:32.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:37.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:42.206Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:47.055Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:52.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:45:57.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:02.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:07.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:11.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:17.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:22.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:26.994Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:31.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:37.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:42.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:47.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:52.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:46:57.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:02.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:07.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:17.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:22.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:27.043Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:47:32.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:48:19.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:49:19.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:50:19.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:50:41.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:50:46.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:50:51.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:50:56.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:02.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:07.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:17.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:22.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:27.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:32.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:37.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:42.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:47.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:52.028Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:51:56.992Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:52:19.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:53:19.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:54:19.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:55:19.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:56:19.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:57:19.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:58:19.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T03:59:19.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:00:19.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:01:19.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:17.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:22.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:27.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:32.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:37.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:42.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:47.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:52.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:02:57.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:03:02.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:03:07.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:03:12.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:03:17.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:04:19.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:16.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:21.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:26.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:31.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:35.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:36.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:42.008Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:47.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:48.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:49.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:54.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:05:59.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:01.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:06.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:07.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:12.716Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:17.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:22.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:25.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:27.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:32.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:37.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:43.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:47.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:52.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:06:57.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:02.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:07.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:12.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:17.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:22.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:27.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:32.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:37.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:42.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:47.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:52.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:07:57.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:02.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:07.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:12.730Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:17.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:22.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:27.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:32.782Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:37.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:42.693Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:47.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:52.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:08:57.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:02.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:07.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:12.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:17.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:22.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:27.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:32.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:37.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:42.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:48.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:52.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:09:57.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:02.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:07.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:12.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:17.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:22.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:27.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:32.739Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:37.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:42.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:47.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:52.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:10:57.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:02.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:07.749Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:12.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:17.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:22.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:27.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:32.744Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:37.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:42.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:47.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:52.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:11:57.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:02.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:07.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:12.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:17.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:22.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:27.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:32.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:37.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:42.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:47.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:52.696Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:12:57.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:02.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:07.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:12.730Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:17.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:22.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:27.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:32.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:37.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:42.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:47.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:52.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:13:57.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:02.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:07.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:12.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:17.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:22.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:27.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:32.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:37.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:42.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:47.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:52.693Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:14:57.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:02.682Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:07.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:12.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:17.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:22.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:27.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:32.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:37.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:43.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:47.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:52.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:15:57.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:02.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:08.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:12.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:17.922Z"}
{"level":"info","message":"Completed job 14 32c43dea-e8e0-4840-8065-3e0fb2818184 on queue tasks with result undefined","timestamp":"2024-11-05T04:16:18.116Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T04:16:18.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:18.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:22.695Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:27.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:32.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:37.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:42.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:47.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:52.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:16:57.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:02.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:07.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:12.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:17.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:22.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:27.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:32.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:37.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:42.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:47.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:52.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:17:57.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:02.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:07.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:12.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:17.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:22.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:27.711Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:32.744Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:37.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:42.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:47.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:52.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:18:57.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:02.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:07.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:12.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:17.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:22.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:27.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:32.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:37.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:42.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:45.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:47.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:52.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:19:57.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:02.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:07.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:12.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:17.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:23.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:27.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:32.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:37.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:42.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:47.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:52.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:20:57.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:02.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:07.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:12.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:17.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:22.738Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:27.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:40.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:42.217Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T04:21:42.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:42.528Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T04:21:43.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:43.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:44.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:47.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:52.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:21:57.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:02.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:07.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:12.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:17.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:22.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:27.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:32.693Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:37.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:40.185Z"}
{"level":"error","message":"Task Persistcy Initialization  Failed. Error:  `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context","stack":"Error: `cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context\n    at getExpectedRequestStore (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js:40:11)\n    at cookies (webpack-internal:///(rsc)/./node_modules/next/dist/server/request/cookies.js:66:84)\n    at createClient (webpack-internal:///(rsc)/./utils/supabase/server.ts:10:84)\n    at eval (webpack-internal:///(rsc)/./app/layout.tsx:31:160)\n    at (rsc)/./app/layout.tsx (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/app/protected/chat/[conversationId]/page.js:912:1)\n    at Function.__webpack_require__ (/home/nitr0gen/ibrain2024/ibrain2024/.next/server/webpack-runtime.js:33:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getLayoutOrPageModule (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/lib/app-dir-module.js:33:15)\n    at async collectAppPageSegments (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/build/segment-config/app/app-segments.js:50:45)\n    at async Object.loadStaticPaths (/home/nitr0gen/ibrain2024/ibrain2024/node_modules/next/dist/server/dev/static-paths-worker.js:33:26)","timestamp":"2024-11-05T04:22:40.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:40.942Z"}
{"level":"info","message":"Completed job 15 0714060c-926f-4c9a-b57d-29d18ece8df8 on queue tasks with result undefined","timestamp":"2024-11-05T04:22:41.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:44.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:47.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:52.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:55.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:22:57.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:02.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:07.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:12.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:17.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:22.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:27.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:32.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:37.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:42.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:47.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:52.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:23:57.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:02.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:07.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:12.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:17.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:22.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:27.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:32.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:37.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:42.695Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:47.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:52.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:24:57.682Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:02.723Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:07.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:12.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:17.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:22.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:27.738Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:32.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:37.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:42.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:47.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:52.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:25:57.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:02.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:07.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:12.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:23.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:24.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:27.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:32.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:37.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:42.736Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:47.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:52.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:26:57.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:02.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:08.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:12.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:17.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:23.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:28.192Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:32.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:37.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:42.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:47.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:52.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:27:57.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:02.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:07.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:12.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:17.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:22.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:27.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:28:32.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:10.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:11.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:13.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:17.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:22.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:27.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:32.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:37.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:42.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:47.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:52.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:29:57.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:02.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:07.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:12.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:22.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:23.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:27.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:32.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:37.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:42.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:47.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:51.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:53.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:54.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:30:57.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:02.747Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:07.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:10.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:13.749Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:14.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:18.434Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T04:31:18.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:20.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:22.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:27.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:32.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:36.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:37.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:49.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:50.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:53.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:55.881Z"}
{"level":"info","message":"Completed job 16 f7f9a7e8-280f-4cc4-8b3f-202a1463c0bf on queue tasks with result undefined","timestamp":"2024-11-05T04:31:56.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:31:57.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:02.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:07.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:12.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:17.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:22.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:27.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:32.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:37.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:42.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:48.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:52.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:32:57.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:02.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:07.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:12.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:17.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:22.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:27.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:32.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:37.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:42.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:47.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:52.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:33:57.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:02.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:07.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:12.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:18.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:22.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:27.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:32.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:37.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:42.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:47.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:52.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:34:57.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:02.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:07.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:12.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:17.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:22.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:27.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:32.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:37.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:42.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:47.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:52.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:35:57.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:02.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:07.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:13.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:17.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:22.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:27.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:32.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:37.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:42.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:47.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:52.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:36:57.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:02.726Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:07.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:12.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:17.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:22.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:27.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:32.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:37.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:37:46.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:01.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:02.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:07.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:12.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:19.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:20.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:21.978Z"}
{"level":"info","message":"Completed job 17 2c65f157-6e2b-4620-a8b2-cdd8aa129251 on queue tasks with result undefined","timestamp":"2024-11-05T04:38:23.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:23.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:27.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:29.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:34.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:39.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:44.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:49.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:54.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:38:59.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:04.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:09.203Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:14.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:20.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:24.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:29.281Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:34.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:39.268Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:44.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:49.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:54.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:39:59.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:04.198Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:09.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:14.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:19.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:24.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:29.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:34.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:39.238Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:44.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:49.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:54.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:40:59.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:04.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:09.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:14.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:19.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:24.221Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:29.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:34.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:39.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:44.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:49.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:54.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:41:59.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:42:04.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:42:08.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:42:09.693Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:23.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:24.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:29.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:31.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:38.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:39.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:44.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:46.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:49.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:54.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:43:59.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:04.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:09.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:14.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:19.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:24.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:29.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:34.213Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:39.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:44.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:51.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:52.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:53.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:44:54.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:00.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:01.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:04.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:08.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:10.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:13.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:14.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:19.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:24.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:28.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:29.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:31.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:34.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:39.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:43.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:45.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:45:46.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:46:55.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:46:57.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:01.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:02.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:04.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:09.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:14.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:16.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:19.250Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:24.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:29.242Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:34.246Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:39.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:43.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:44.992Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:49.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:58.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:47:59.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:03.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:04.716Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:08.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:10.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:13.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:14.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:18.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:19.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:24.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:31.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:33.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:53.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:55.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:48:59.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:03.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:05.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:08.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:09.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:14.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:19.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:24.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:29.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:34.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:39.204Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:44.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:49.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:54.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:49:59.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:00.853Z"}
{"level":"info","message":"Completed job 18 9f0adc1c-f4ed-4e5b-9472-1e8b0ccdfc93 on queue tasks with result undefined","timestamp":"2024-11-05T04:50:01.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:04.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:09.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:14.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:19.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:24.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:29.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:34.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:39.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:44.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:49.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:54.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:50:59.268Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:04.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:09.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:14.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:19.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:24.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:29.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:34.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:39.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:44.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:49.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:51:55.173Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T04:51:56.033Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T04:51:58.075Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T04:51:58.239Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:03.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:04.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:09.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:15.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:18.654Z"}
{"jobId":"19","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T04:52:19.723Z"}
{"level":"info","message":"Completed job 19 b8b8a2ab-d287-4c9d-b2b0-696b472b6d8e on queue tasks with result undefined","timestamp":"2024-11-05T04:52:19.734Z"}
{"jobId":"19","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T04:52:19.726Z"}
{"jobId":"19","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T04:52:19.730Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T04:52:19.741Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T04:52:19.742Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T04:52:19.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:20.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:24.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:30.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:34.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:40.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:44.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:54.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:52:59.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:05.024Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:09.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:14.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:19.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:24.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:29.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:34.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:39.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:44.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:49.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:54.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:53:59.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:54:04.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:54:09.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:54:19.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:55:19.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:56:19.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:04.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:09.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:15.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:19.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:24.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:29.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:35.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:39.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:44.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:49.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:54.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:57:59.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:58:04.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:58:09.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:58:19.217Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T04:59:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:00:19.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:00:46.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:01:19.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:02:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:03:19.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:04:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:04:39.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:04:45.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:04:49.242Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:04:54.209Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:00.187Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:04.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:09.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:15.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:19.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:24.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:29.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:34.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:39.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:44.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:50.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:54.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:05:59.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:04.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:09.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:14.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:20.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:26.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:29.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:34.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:40.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:45.013Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:49.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:55.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:06:59.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:05.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:09.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:15.038Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:19.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:25.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:30.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:07:34.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:08:19.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:09:19.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:10:19.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:10:42.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:10:44.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:10:50.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:10:55.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:10:59.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:04.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:09.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:14.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:19.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:24.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:29.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:34.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:39.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:44.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:49.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:54.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:11:59.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:12:04.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:12:09.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:12:14.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:12:19.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:12:25.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:13:01.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:13:35.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:14:01.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:15:07.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:15:16.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:15:31.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:16:01.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:16:16.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:16:46.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:17:11.076Z"}
{"jobId":"20","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T05:17:12.173Z"}
{"level":"info","message":"Completed job 20 d9fcc10e-f48d-4330-a6ea-dc39613dc951 on queue tasks with result undefined","timestamp":"2024-11-05T05:17:12.193Z"}
{"jobId":"20","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T05:17:12.180Z"}
{"jobId":"20","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T05:17:12.184Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:17:12.198Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:17:12.200Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:17:12.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:18:43.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:18:55.886Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:18:56.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:19:01.560Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:19:01.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:19:16.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:19:40.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:19:58.353Z"}
{"attemptsMade":0,"attemptsStarted":1,"data":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:19:58.348Z","error":null,"id":"065befbf-00a5-4fec-a01c-fe37d6eaf9ff","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"one tweo trhe im here fro foree"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:19:58.348Z","user_id":"some-user-id"},"delay":0,"id":"21","level":"verbose","message":"Worker tasks processing job:","name":"065befbf-00a5-4fec-a01c-fe37d6eaf9ff","opts":{"attempts":0},"priority":0,"processedOn":1730783998369,"progress":0,"queue":{"_events":{},"_eventsCount":2,"abortDelayController":null,"asyncFifoQueue":{"ignoreErrors":false,"nextPromise":{},"pending":{},"queue":{"head":null,"length":0,"tail":{"next":null,"value":{"attemptsMade":0,"attemptsStarted":1,"data":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:19:58.348Z","error":null,"id":"065befbf-00a5-4fec-a01c-fe37d6eaf9ff","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"one tweo trhe im here fro foree"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:19:58.348Z","user_id":"some-user-id"},"delay":0,"id":"21","name":"065befbf-00a5-4fec-a01c-fe37d6eaf9ff","opts":{"attempts":0},"priority":0,"processedOn":1730783998369,"progress":0,"queueQualifiedName":"bull:tasks","returnvalue":null,"stacktrace":[],"timestamp":1730783998364,"token":"3cb87e42-ec1b-401a-a5c2-de0412b1322b:11"}}}},"blockUntil":0,"blockingConnection":{"_client":{"_autoPipelines":{},"_events":{},"_eventsCount":3,"_maxListeners":13,"_runningAutoPipelines":{},"addedBuiltinSet":{},"commandQueue":{"_capacityMask":3,"_head":3,"_list":[null,null,null,null],"_tail":3},"condition":{"auth":null,"select":0,"subscriber":false},"connectionEpoch":3,"connector":{"connecting":true,"disconnectTimeout":2000,"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":"bull:dGFza3M=","db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"isCluster":false,"manuallyClosing":false,"offlineQueue":{"_capacityMask":3,"_head":0,"_list":[null,null,null,null],"_tail":0},"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":"bull:dGFza3M=","db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"prevCommandQueue":{"_capacityMask":3,"_head":3,"_list":[null,null,null,null],"_tail":3},"prevCondition":null,"reconnectTimeout":null,"retryAttempts":0,"scriptsSet":{"addDelayedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a delayed job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - computes timestamp.\n    - adds to delayed zset.\n    - Emits a global event 'delayed' if the job is delayed.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'delayed'\n      KEYS[5] 'completed'\n      KEYS[6] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (use custom instead of one generated automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n          x [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal delayedKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal eventsKey = KEYS[6]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\nlocal score, delayedTimestamp = getDelayedScore(delayedKey, timestamp, tonumber(delay))\nrcall(\"ZADD\", delayedKey, score, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n      \"jobId\", jobId, \"delay\", delayedTimestamp)\n-- mark that a delayed job is available\nlocal markerKey = KEYS[1]\naddDelayMarkerIfNeeded(markerKey, delayedKey)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":6,"readOnly":false,"sha":"28d826f4b47e91d4e296526a4f9dd0e6e87f4030"},"addJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job scheduler, i.e. a job factory that creates jobs based on a given schedule (repeat options).\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] jobs scheduler id\n      ARGV[4] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal jobSchedulerId = ARGV[3]\nlocal prefixKey = ARGV[4]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, jobSchedulerId)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. jobSchedulerId, \"name\", opts['name'],\n    unpack(optionalValues))\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, jobSchedulerId)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. jobSchedulerId .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. jobSchedulerId .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\nreturn storeRepeatableJob(repeatKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"a5a24f643c0294143ec2a981e63344699d31b6db"},"addLog:5.23.0":{"keyPrefix":"","lua":"--[[\n  Add job log\n  Input:\n    KEYS[1] job id key\n    KEYS[2] job logs key\n    ARGV[1] id\n    ARGV[2] log\n    ARGV[3] keepLogs\n  Output:\n    -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n  local logCount = rcall(\"RPUSH\", KEYS[2], ARGV[2])\n  if ARGV[3] ~= '' then\n    local keepLogs = tonumber(ARGV[3])\n    rcall(\"LTRIM\", KEYS[2], -keepLogs, -1)\n    return math.min(keepLogs, logCount)\n  end\n  return logCount\nelse\n  return -1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"eecb06ad6c96fa5da4fa8bca0ea7a1bf1bf62f18"},"addParentJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a parent job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - adds the job to the waiting-children zset\n    Input:\n      KEYS[1] 'meta'\n      KEYS[2] 'id'\n      KEYS[3] 'completed'\n      KEYS[4] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[1]\nlocal idKey = KEYS[2]\nlocal completedKey = KEYS[3]\nlocal eventsKey = KEYS[4]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal waitChildrenKey = args[6]\nrcall(\"ZADD\", waitChildrenKey, timestamp, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n      \"waiting-children\", \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":4,"readOnly":false,"sha":"8b4682aa777886ad4a5c60c3f528309f3721d472"},"addPrioritizedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a priotitized job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'prioritized'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] 'pc' priority counter\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]] \nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal priorityKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal activeKey = KEYS[6]\nlocal eventsKey = KEYS[7]\nlocal priorityCounterKey = KEYS[8]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\n-- Add the job to the prioritized set\nlocal isPausedOrMaxed = isQueuePausedOrMaxed(metaKey, activeKey)\naddJobWithPriority( KEYS[1], priorityKey, priority, jobId, priorityCounterKey, isPausedOrMaxed)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"9941c303fd1cd31a262324a90c1cd7236c5022d5"},"addRepeatableJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      ARGV[4] custom key\n      ARGV[5] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal legacyCustomKey = ARGV[3]\nlocal customKey = ARGV[4]\nlocal prefixKey = ARGV[5]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, customKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. customKey, \"name\", opts['name'],\n    unpack(optionalValues))\n  return customKey\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, customKey)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. customKey .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. customKey .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\n-- Keep backwards compatibility with old repeatable jobs (<= 3.0.0)\nif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n  return storeRepeatableJob(repeatKey, legacyCustomKey, nextMillis, ARGV[2])\nend\nreturn storeRepeatableJob(repeatKey, customKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"c01242e2652ac7c1e5f276b7d6c849375b22d1a7"},"addStandardJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - if delayed:\n      - computes timestamp.\n      - adds to delayed zset.\n      - Emits a global event 'delayed' if the job is delayed.\n    - if not delayed\n      - Adds the jobId to the wait/paused list in one of three ways:\n         - LIFO\n         - FIFO\n         - prioritized.\n      - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'wait',\n      KEYS[2] 'paused'\n      KEYS[3] 'meta'\n      KEYS[4] 'id'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] marker key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal eventsKey = KEYS[7]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", KEYS[4])\nlocal metaKey = KEYS[3]\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, KEYS[5], eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[1], KEYS[2])\n-- LIFO or FIFO\nlocal pushCmd = opts['lifo'] and 'RPUSH' or 'LPUSH'\naddJobInTargetList(target, KEYS[8], pushCmd, isPausedOrMaxed, jobId)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"a7b39766da8f5ced70f465297396dd83e550ceed"},"changeDelay:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job delay when it is in delayed set.\n  Input:\n    KEYS[1] delayed key\n    KEYS[2] meta key\n    KEYS[3] marker key\n    KEYS[4] events stream\n    ARGV[1] delay\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] job key\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in delayed set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", ARGV[4]) == 1 then\n  local jobId = ARGV[3]\n  local delay = tonumber(ARGV[1])\n  local score, delayedTimestamp = getDelayedScore(KEYS[1], ARGV[2], delay)\n  local numRemovedElements = rcall(\"ZREM\", KEYS[1], jobId)\n  if numRemovedElements < 1 then\n    return -3\n  end\n  rcall(\"HSET\", ARGV[4], \"delay\", delay)\n  rcall(\"ZADD\", KEYS[1], score, jobId)\n  local maxEvents = getOrSetMaxEvents(KEYS[2])\n  rcall(\"XADD\", KEYS[4], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n    \"jobId\", jobId, \"delay\", delayedTimestamp)\n  -- mark that a delayed job is available\n  addDelayMarkerIfNeeded(KEYS[3], KEYS[1])\n  return 0\nelse\n  return -1\nend","numberOfKeys":4,"readOnly":false,"sha":"d7704f63de52505e835193d552148741ae9770b8"},"changePriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job priority\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'active'\n    KEYS[6] 'pc' priority counter\n    KEYS[7] 'marker'\n    ARGV[1] priority value\n    ARGV[2] prefix key\n    ARGV[3] job id\n    ARGV[4] lifo\n    Output:\n       0  - OK\n      -1  - Missing job\n]]\nlocal jobId = ARGV[3]\nlocal jobKey = ARGV[2] .. jobId\nlocal priority = tonumber(ARGV[1])\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\nlocal function reAddJobWithNewPriority( prioritizedKey, markerKey, targetKey,\n    priorityCounter, lifo, priority, jobId, isPausedOrMaxed)\n    if priority == 0 then\n        local pushCmd = lifo and 'RPUSH' or 'LPUSH'\n        addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n    else\n        if lifo then\n            pushBackJobWithPriority(prioritizedKey, priority, jobId)\n        else\n            addJobWithPriority(markerKey, prioritizedKey, priority, jobId,\n                priorityCounter, isPausedOrMaxed)\n        end\n    end\nend\nif rcall(\"EXISTS\", jobKey) == 1 then\n    local metaKey = KEYS[3]\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[5], KEYS[1], KEYS[2])\n    local prioritizedKey = KEYS[4]\n    local priorityCounterKey = KEYS[6]\n    local markerKey = KEYS[7]\n    -- Re-add with the new priority\n    if rcall(\"ZREM\", prioritizedKey, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    elseif rcall(\"LREM\", target, -1, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    end\n    rcall(\"HSET\", jobKey, \"priority\", priority)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":7,"readOnly":false,"sha":"0712f368ed58c17e481d319f364e46cbf665b95b"},"cleanJobsInSet:5.23.0":{"keyPrefix":"","lua":"--[[\n  Remove jobs from the specific set.\n  Input:\n    KEYS[1]  set key,\n    KEYS[2]  events stream key\n    KEYS[3]  job schedulers key\n    ARGV[1]  jobKey prefix\n    ARGV[2]  timestamp\n    ARGV[3]  limit the number of jobs to be removed. 0 is unlimited\n    ARGV[4]  set name, can be any of 'wait', 'active', 'paused', 'delayed', 'completed', or 'failed'\n]]\nlocal rcall = redis.call\nlocal rangeStart = 0\nlocal rangeEnd = -1\nlocal limit = tonumber(ARGV[3])\n-- If we're only deleting _n_ items, avoid retrieving all items\n-- for faster performance\n--\n-- Start from the tail of the list, since that's where oldest elements\n-- are generally added for FIFO lists\nif limit > 0 then\n  rangeStart = -1 - limit + 1\n  rangeEnd = -1\nend\n-- Includes\n--[[\n  Function to clean job list.\n  Returns jobIds and deleted count number.\n]]\n-- Includes\n--[[\n  Function to get the latest saved timestamp.\n]]\nlocal function getTimestamp(jobKey, attributes)\n  if #attributes == 1 then\n    return rcall(\"HGET\", jobKey, attributes[1])\n  end\n  local jobTs\n  for _, ts in ipairs(rcall(\"HMGET\", jobKey, unpack(attributes))) do\n    if (ts) then\n      jobTs = ts\n      break\n    end\n  end\n  return jobTs\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function cleanList(listKey, jobKeyPrefix, rangeStart, rangeEnd,\n  timestamp, isWaiting)\n  local jobs = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  local deleted = {}\n  local deletedCount = 0\n  local jobTS\n  local deletionMarker = ''\n  local jobIdsLen = #jobs\n  for i, job in ipairs(jobs) do\n    if limit > 0 and deletedCount >= limit then\n      break\n    end\n    local jobKey = jobKeyPrefix .. job\n    if (isWaiting or rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n      -- Find the right timestamp of the job to compare to maxTimestamp:\n      -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n      -- * processedOn represents when the job was last attempted, but it doesn't get populated until\n      --   the job is first tried\n      -- * timestamp is the original job submission time\n      -- Fetch all three of these (in that order) and use the first one that is set so that we'll leave jobs\n      -- that have been active within the grace period:\n      jobTS = getTimestamp(jobKey, {\"finishedOn\", \"processedOn\", \"timestamp\"})\n      if (not jobTS or jobTS <= timestamp) then\n        -- replace the entry with a deletion marker; the actual deletion will\n        -- occur at the end of the script\n        rcall(\"LSET\", listKey, rangeEnd - jobIdsLen + i, deletionMarker)\n        removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]])\n        deletedCount = deletedCount + 1\n        table.insert(deleted, job)\n      end\n    end\n  end\n  rcall(\"LREM\", listKey, 0, deletionMarker)\n  return {deleted, deletedCount}\nend\n--[[\n  Function to clean job set.\n  Returns jobIds and deleted count number.\n]] \n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  We use ZRANGEBYSCORE to make the case where we're deleting a limited number\n  of items in a sorted set only run a single iteration. If we simply used\n  ZRANGE, we may take a long time traversing through jobs that are within the\n  grace period.\n]]\nlocal function getJobsInZset(zsetKey, rangeEnd, limit)\n  if limit > 0 then\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd, \"LIMIT\", 0, limit)\n  else\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd)\n  end\nend\nlocal function isJobSchedulerJob(jobId, jobSchedulersKey)\n    if jobSchedulersKey then\n        local jobSchedulerId = jobId:match(\"repeat:(.*):%d+\")\n        if jobSchedulerId then\n            return rcall(\"ZSCORE\", jobSchedulersKey, jobSchedulerId)\n        end\n    end\n    return false\nend\nlocal function cleanSet(\n    setKey,\n    jobKeyPrefix,\n    rangeEnd,\n    timestamp,\n    limit,\n    attributes,\n    isFinished,\n    jobSchedulersKey)\n    local jobs = getJobsInZset(setKey, rangeEnd, limit)\n    local deleted = {}\n    local deletedCount = 0\n    local jobTS\n    for i, job in ipairs(jobs) do\n        if limit > 0 and deletedCount >= limit then\n            break\n        end\n        -- Extract a Job Scheduler Id from jobId (\"repeat:job-scheduler-id:millis\") \n        -- and check if it is in the scheduled jobs\n        if not isJobSchedulerJob(job, jobSchedulersKey) then\n            local jobKey = jobKeyPrefix .. job\n            if isFinished then\n                removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                deletedCount = deletedCount + 1\n                table.insert(deleted, job)\n            else\n                -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n                jobTS = getTimestamp(jobKey, attributes)\n                if (not jobTS or jobTS <= timestamp) then\n                    removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                    deletedCount = deletedCount + 1\n                    table.insert(deleted, job)\n                end\n            end\n        end\n    end\n    if (#deleted > 0) then\n        for from, to in batches(#deleted, 7000) do\n            rcall(\"ZREM\", setKey, unpack(deleted, from, to))\n        end\n    end\n    return {deleted, deletedCount}\nend\nlocal result\nif ARGV[4] == \"active\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], false --[[ hasFinished ]])\nelseif ARGV[4] == \"delayed\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"processedOn\", \"timestamp\"}, false  --[[ hasFinished ]], KEYS[3])\nelseif ARGV[4] == \"prioritized\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"timestamp\"}, false  --[[ hasFinished ]])\nelseif ARGV[4] == \"wait\" or ARGV[4] == \"paused\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], true --[[ hasFinished ]])\nelse\n  rangeEnd = ARGV[2]\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"finishedOn\"}, true  --[[ hasFinished ]])\nend\nrcall(\"XADD\", KEYS[2], \"*\", \"event\", \"cleaned\", \"count\", result[2])\nreturn result[1]\n","numberOfKeys":3,"readOnly":false,"sha":"1a81e85ab6be2d531f463ccc8ab17a81b858dcdb"},"drain:5.23.0":{"keyPrefix":"","lua":"--[[\n  Drains the queue, removes all jobs that are waiting\n  or delayed, but not active, completed or failed\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'delayed'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'jobschedulers' (repeat)\n    ARGV[1]  queue key prefix\n]]\nlocal rcall = redis.call\nlocal queueBaseKey = ARGV[1]\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nremoveListJobs(KEYS[1], true, queueBaseKey, 0) -- wait\nremoveListJobs(KEYS[2], true, queueBaseKey, 0) -- paused\nif KEYS[3] ~= \"\" then\n    -- We must not remove delayed jobs if they are associated to a job scheduler.\n    local scheduledJobs = {}\n    local jobSchedulers = rcall(\"ZRANGE\", KEYS[5], 0, -1, \"WITHSCORES\")\n    -- For every job scheduler, get the current delayed job id.\n    for i = 1, #jobSchedulers, 2 do\n        local jobSchedulerId = jobSchedulers[i]\n        local jobSchedulerMillis = jobSchedulers[i + 1]\n        local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. jobSchedulerMillis\n        scheduledJobs[delayedJobId] = true\n    end\n    removeZSetJobs(KEYS[3], true, queueBaseKey, 0, scheduledJobs) -- delayed\nend\nremoveZSetJobs(KEYS[4], true, queueBaseKey, 0) -- prioritized\n","numberOfKeys":5,"readOnly":false,"sha":"cde4aa2dbd6d7545a57a6dd8684ad9448e0ae387"},"extendLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Extend lock and removes the job from the stalled set.\n  Input:\n    KEYS[1] 'lock',\n    KEYS[2] 'stalled'\n    ARGV[1]  token\n    ARGV[2]  lock duration in milliseconds\n    ARGV[3]  jobid\n  Output:\n    \"1\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  --   if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2], \"XX\") then\n  if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2]) then\n    rcall(\"SREM\", KEYS[2], ARGV[3])\n    return 1\n  end\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"99b6eb3d7a4777fb2271fd6cdf3ac5a290a4aac4"},"getCounts:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1...] types\n]]\nlocal rcall = redis.call;\nlocal prefix = KEYS[1]\nlocal results = {}\nfor i = 1, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        results[#results+1] = count-1\n      else\n        results[#results+1] = 0\n      end\n    else\n      results[#results+1] = rcall(\"LLEN\", stateKey)\n    end\n  elseif ARGV[i] == \"active\" then\n    results[#results+1] = rcall(\"LLEN\", stateKey)\n  else\n    results[#results+1] = rcall(\"ZCARD\", stateKey)\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"a8034c631460c6803c87966ce881636246de2398"},"getCountsPerPriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1] wait key\n      KEYS[2] paused key\n      KEYS[3] meta key\n      KEYS[4] prioritized key\n      ARGV[1...] priorities\n]]\nlocal rcall = redis.call\nlocal results = {}\nlocal waitKey = KEYS[1]\nlocal pausedKey = KEYS[2]\nlocal prioritizedKey = KEYS[4]\n-- Includes\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePaused(queueMetaKey)\n  return rcall(\"HEXISTS\", queueMetaKey, \"paused\") == 1\nend\nfor i = 1, #ARGV do\n  local priority = tonumber(ARGV[i])\n  if priority == 0 then\n    if isQueuePaused(KEYS[3]) then\n      results[#results+1] = rcall(\"LLEN\", pausedKey)\n    else\n      results[#results+1] = rcall(\"LLEN\", waitKey)\n    end\n  else\n    results[#results+1] = rcall(\"ZCOUNT\", prioritizedKey,\n      priority * 0x100000000, (priority + 1)  * 0x100000000 - 1)\n  end\nend\nreturn results\n","numberOfKeys":4,"readOnly":false,"sha":"0d3cc488e178c7c757e27ee35b04e6486f7b392a"},"getRanges:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get job ids per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1]    start\n      ARGV[2]    end\n      ARGV[3]    asc\n      ARGV[4...] types\n]]\nlocal rcall = redis.call\nlocal prefix = KEYS[1]\nlocal rangeStart = tonumber(ARGV[1])\nlocal rangeEnd = tonumber(ARGV[2])\nlocal asc = ARGV[3]\nlocal results = {}\nlocal function getRangeInList(listKey, asc, rangeStart, rangeEnd, results)\n  if asc == \"1\" then\n    local modifiedRangeStart\n    local modifiedRangeEnd\n    if rangeStart == -1 then\n      modifiedRangeStart = 0\n    else\n      modifiedRangeStart = -(rangeStart + 1)\n    end\n    if rangeEnd == -1 then\n      modifiedRangeEnd = 0\n    else\n      modifiedRangeEnd = -(rangeEnd + 1)\n    end\n    results[#results+1] = rcall(\"LRANGE\", listKey,\n      modifiedRangeEnd,\n      modifiedRangeStart)\n  else\n    results[#results+1] = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  end\nend\nfor i = 4, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n      else\n        results[#results+1] = {}\n      end\n    else\n      getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n    end\n  elseif ARGV[i] == \"active\" then\n    getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n  else\n    if asc == \"1\" then\n      results[#results+1] = rcall(\"ZRANGE\", stateKey, rangeStart, rangeEnd)\n    else\n      results[#results+1] = rcall(\"ZREVRANGE\", stateKey, rangeStart, rangeEnd)\n    end\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"8ead3c08a7bde7653892f14e44385d448a0f291c"},"getRateLimitTtl:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get rate limit ttl\n    Input:\n      KEYS[1] 'limiter'\n      ARGV[1] maxJobs\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\nlocal rateLimiterKey = KEYS[1]\nif ARGV[1] ~= \"0\" then\n  return getRateLimitTTL(tonumber(ARGV[1]), rateLimiterKey)\nelse\n  return rcall(\"PTTL\", rateLimiterKey)\nend\n","numberOfKeys":1,"readOnly":false,"sha":"92372d939896ee53f841c7ba94305e56a871786f"},"getState:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'prioritized'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal active_items = rcall(\"LRANGE\", KEYS[4] , 0, -1)\nif checkItemInList(active_items, ARGV[1]) ~= nil then\n  return \"active\"\nend\nlocal wait_items = rcall(\"LRANGE\", KEYS[5] , 0, -1)\nif checkItemInList(wait_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nlocal paused_items = rcall(\"LRANGE\", KEYS[6] , 0, -1)\nif checkItemInList(paused_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7], ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"8857a088a8555cf7fb21513a66531eb00cf8932d"},"getStateV2:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\nif rcall(\"LPOS\", KEYS[4] , ARGV[1]) ~= false then\n  return \"active\"\nend\nif rcall(\"LPOS\", KEYS[5] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"LPOS\", KEYS[6] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7] , ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"f7064020cc18bc64f3d44da9b89581294f7a67d3"},"isFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if a job is finished (.i.e. is in the completed or failed set)\n  Input: \n    KEYS[1] completed key\n    KEYS[2] failed key\n    KEYS[3] job key\n    ARGV[1] job id\n    ARGV[2] return value?\n  Output:\n    0 - Not finished.\n    1 - Completed.\n    2 - Failed.\n   -1 - Missing job. \n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[3]) ~= 1 then\n  if ARGV[2] == \"1\" then\n    return {-1,\"Missing key for job \" .. KEYS[3] .. \". isFinished\"}\n  end  \n  return -1\nend\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local returnValue = rcall(\"HGET\", KEYS[3], \"returnvalue\")\n    return {1,returnValue}\n  end\n  return 1\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local failedReason = rcall(\"HGET\", KEYS[3], \"failedReason\")\n    return {2,failedReason}\n  end\n  return 2\nend\nif ARGV[2] == \"1\" then\n  return {0}\nend\nreturn 0\n","numberOfKeys":3,"readOnly":false,"sha":"fdea3cb84e6f9aa18dd37ab7d710874c5828eb52"},"isJobInList:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if job is in a given list.\n  Input:\n    KEYS[1]\n    ARGV[1]\n  Output:\n    1 if element found in the list.\n]]\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal items = redis.call(\"LRANGE\", KEYS[1] , 0, -1)\nreturn checkItemInList(items, ARGV[1])\n","numberOfKeys":1,"readOnly":false,"sha":"7fafc57c06446598a2e9e21a718f11559c3b74c7"},"isMaxed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if queue is maxed.\n  Input:\n    KEYS[1] meta key\n    KEYS[2] active key\n  Output:\n    1 if element found in the list.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to check if queue is maxed or not.\n]]\nlocal function isQueueMaxed(queueMetaKey, activeKey)\n  local maxConcurrency = rcall(\"HGET\", queueMetaKey, \"concurrency\")\n  if maxConcurrency then\n    local activeCount = rcall(\"LLEN\", activeKey)\n    if activeCount >= tonumber(maxConcurrency) then\n      return true\n    end\n  end\n  return false\nend\nreturn isQueueMaxed(KEYS[1], KEYS[2])\n","numberOfKeys":2,"readOnly":false,"sha":"915456b98cefd4cfc19cf99a50d73bde41a27b6c"},"moveJobFromActiveToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Function to move job from active state to wait.\n  Input:\n    KEYS[1]  active key\n    KEYS[2]  wait key\n    KEYS[3]  stalled key\n    KEYS[4]  job lock key\n    KEYS[5]  paused key\n    KEYS[6]  meta key\n    KEYS[7]  limiter key\n    KEYS[8]  prioritized key\n    KEYS[9]  marker key\n    KEYS[10] event key\n    ARGV[1] job id\n    ARGV[2] lock token\n    ARGV[3] job id key\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal jobId = ARGV[1]\nlocal token = ARGV[2]\nlocal lockKey = KEYS[4]\nlocal lockToken = rcall(\"GET\", lockKey)\nlocal pttl = rcall(\"PTTL\", KEYS[7])\nif lockToken == token then\n  local metaKey = KEYS[6]\n  local removed = rcall(\"LREM\", KEYS[1], 1, jobId)\n  if removed > 0 then\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[1], KEYS[2], KEYS[5])\n    rcall(\"SREM\", KEYS[3], jobId)\n    local priority = tonumber(rcall(\"HGET\", ARGV[3], \"priority\")) or 0\n    if priority > 0 then\n      pushBackJobWithPriority(KEYS[8], priority, jobId)\n    else\n      addJobInTargetList(target, KEYS[9], \"RPUSH\", isPausedOrMaxed, jobId)\n    end\n    rcall(\"DEL\", lockKey)\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[10], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n  end\nend\nreturn pttl\n","numberOfKeys":10,"readOnly":false,"sha":"546b74fe67e4c131992799dac9ba737c553ea95f"},"moveJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move completed, failed or delayed jobs to wait.\n  Note: Does not support jobs with priorities.\n  Input:\n    KEYS[1] base key\n    KEYS[2] events stream\n    KEYS[3] state key (failed, completed, delayed)\n    KEYS[4] 'wait'\n    KEYS[5] 'paused'\n    KEYS[6] 'meta'\n    KEYS[7] 'active'\n    KEYS[8] 'marker'\n    ARGV[1] count\n    ARGV[2] timestamp\n    ARGV[3] prev state\n  Output:\n    1  means the operation is not completed\n    0  means the operation is completed\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal timestamp = tonumber(ARGV[2])\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal metaKey = KEYS[6]\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[7], KEYS[4], KEYS[5])\nlocal jobs = rcall('ZRANGEBYSCORE', KEYS[3], 0, timestamp, 'LIMIT', 0, maxCount)\nif (#jobs > 0) then\n    if ARGV[3] == \"failed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"failedReason\")\n        end\n    elseif ARGV[3] == \"completed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"returnvalue\")\n        end\n    end\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    for i, key in ipairs(jobs) do\n        -- Emit waiting event\n        rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n              \"waiting\", \"jobId\", key, \"prev\", ARGV[3]);\n    end\n    for from, to in batches(#jobs, 7000) do\n        rcall(\"ZREM\", KEYS[3], unpack(jobs, from, to))\n        rcall(\"LPUSH\", target, unpack(jobs, from, to))\n    end\n    addBaseMarkerIfNeeded(KEYS[8], isPausedOrMaxed)\nend\nmaxCount = maxCount - #jobs\nif (maxCount <= 0) then return 1 end\nreturn 0\n","numberOfKeys":8,"readOnly":false,"sha":"655fa4396927ac2e4239ae18746a6c053c05c5d5"},"moveStalledJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move stalled jobs to wait.\n    Input:\n      KEYS[1] 'stalled' (SET)\n      KEYS[2] 'wait',   (LIST)\n      KEYS[3] 'active', (LIST)\n      KEYS[4] 'failed', (ZSET)\n      KEYS[5] 'stalled-check', (KEY)\n      KEYS[6] 'meta', (KEY)\n      KEYS[7] 'paused', (LIST)\n      KEYS[8] 'marker'\n      KEYS[9] 'event stream' (STREAM)\n      ARGV[1]  Max stalled job count\n      ARGV[2]  queue.toKey('')\n      ARGV[3]  timestamp\n      ARGV[4]  max check time\n    Events:\n      'stalled' with stalled job id.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\nlocal stalledKey = KEYS[1]\nlocal waitKey = KEYS[2]\nlocal activeKey = KEYS[3]\nlocal failedKey = KEYS[4]\nlocal stalledCheckKey = KEYS[5]\nlocal metaKey = KEYS[6]\nlocal pausedKey = KEYS[7]\nlocal markerKey = KEYS[8]\nlocal eventStreamKey = KEYS[9]\nlocal maxStalledJobCount = tonumber(ARGV[1])\nlocal queueKeyPrefix = ARGV[2]\nlocal timestamp = ARGV[3]\nlocal maxCheckTime = ARGV[4]\nif rcall(\"EXISTS\", stalledCheckKey) == 1 then return {{}, {}} end\nrcall(\"SET\", stalledCheckKey, timestamp, \"PX\", maxCheckTime)\n-- Trim events before emiting them to avoid trimming events emitted in this script\ntrimEvents(metaKey, eventStreamKey)\n-- Move all stalled jobs to wait\nlocal stalling = rcall('SMEMBERS', stalledKey)\nlocal stalled = {}\nlocal failed = {}\nif (#stalling > 0) then\n    rcall('DEL', stalledKey)\n    -- Remove from active list\n    for i, jobId in ipairs(stalling) do\n        -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n        if string.sub(jobId, 1, 2) == \"0:\" then\n            -- If the jobId is a delay marker ID we just remove it.\n            rcall(\"LREM\", activeKey, 1, jobId)\n        else\n            local jobKey = queueKeyPrefix .. jobId\n            -- Check that the lock is also missing, then we can handle this job as really stalled.\n            if (rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n                --  Remove from the active queue.\n                local removed = rcall(\"LREM\", activeKey, 1, jobId)\n                if (removed > 0) then\n                    -- If this job has been stalled too many times, such as if it crashes the worker, then fail it.\n                    local stalledCount =\n                        rcall(\"HINCRBY\", jobKey, \"stalledCounter\", 1)\n                    if (stalledCount > maxStalledJobCount) then\n                        local jobAttributes = rcall(\"HMGET\", jobKey, \"opts\", \"parent\", \"deid\")\n                        local rawOpts = jobAttributes[1]\n                        local rawParentData = jobAttributes[2]\n                        local opts = cjson.decode(rawOpts)\n                        local removeOnFailType = type(opts[\"removeOnFail\"])\n                        rcall(\"ZADD\", failedKey, timestamp, jobId)\n                        removeDeduplicationKeyIfNeeded(queueKeyPrefix, jobAttributes[3])\n                        local failedReason =\n                            \"job stalled more than allowable limit\"\n                        rcall(\"HMSET\", jobKey, \"failedReason\", failedReason,\n                              \"finishedOn\", timestamp)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"failed\", \"jobId\", jobId, 'prev', 'active',\n                              'failedReason', failedReason)\n                        if rawParentData ~= false then\n                            if opts['fpof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                moveParentFromWaitingChildrenToFailed(\n                                    parentData['queueKey'],\n                                    parentData['queueKey'] .. ':' .. parentData['id'],\n                                    parentData['id'],\n                                    jobKey,\n                                    timestamp\n                                )\n                            elseif opts['idof'] or opts['rdof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                local parentKey = parentData['queueKey'] .. ':' .. parentData['id']\n                                local dependenciesSet = parentKey .. \":dependencies\"\n                                if rcall(\"SREM\", dependenciesSet, jobKey) == 1 then\n                                    moveParentToWaitIfNeeded(parentData['queueKey'], dependenciesSet,\n                                                             parentKey, parentData['id'], timestamp)\n                                    if opts['idof'] then\n                                       local failedSet = parentKey .. \":failed\"\n                                       rcall(\"HSET\", failedSet, jobKey, failedReason)\n                                    end\n                                end\n                            end\n                        end\n                        if removeOnFailType == \"number\" then\n                            removeJobsByMaxCount(opts[\"removeOnFail\"],\n                                                  failedKey, queueKeyPrefix)\n                        elseif removeOnFailType == \"boolean\" then\n                            if opts[\"removeOnFail\"] then\n                                removeJob(jobId, false, queueKeyPrefix,\n                                  false --[[remove debounce key]])\n                                rcall(\"ZREM\", failedKey, jobId)\n                            end\n                        elseif removeOnFailType ~= \"nil\" then\n                            local maxAge = opts[\"removeOnFail\"][\"age\"]\n                            local maxCount = opts[\"removeOnFail\"][\"count\"]\n                            if maxAge ~= nil then\n                                removeJobsByMaxAge(timestamp, maxAge,\n                                                    failedKey, queueKeyPrefix)\n                            end\n                            if maxCount ~= nil and maxCount > 0 then\n                                removeJobsByMaxCount(maxCount, failedKey,\n                                                      queueKeyPrefix)\n                            end\n                        end\n                        table.insert(failed, jobId)\n                    else\n                        local target, isPausedOrMaxed =\n                            getTargetQueueList(metaKey, activeKey, waitKey, pausedKey)\n                        -- Move the job back to the wait queue, to immediately be picked up by a waiting worker.\n                        addJobInTargetList(target, markerKey, \"RPUSH\", isPausedOrMaxed, jobId)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"waiting\", \"jobId\", jobId, 'prev', 'active')\n                        -- Emit the stalled event\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"stalled\", \"jobId\", jobId)\n                        table.insert(stalled, jobId)\n                    end\n                end\n            end\n        end\n    end\nend\n-- Mark potentially stalled jobs\nlocal active = rcall('LRANGE', activeKey, 0, -1)\nif (#active > 0) then\n    for from, to in batches(#active, 7000) do\n        rcall('SADD', stalledKey, unpack(active, from, to))\n    end\nend\nreturn {failed, stalled}","numberOfKeys":9,"readOnly":false,"sha":"b06d5ab6576efcc0e07c6fa2f57923659b3e4a08"},"moveToActive:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move next job to be processed to active, lock it and fetch its data. The job\n  may be delayed, in that case we need to move it to the delayed set instead.\n  This operation guarantees that the worker owns the job during the lock\n  expiration time. The worker is responsible of keeping the lock fresh\n  so that no other worker picks this job again.\n  Input:\n    KEYS[1] wait key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] stream events key\n    KEYS[5] stalled key\n    -- Rate limiting\n    KEYS[6] rate limiter key\n    KEYS[7] delayed key\n    -- Delayed jobs\n    KEYS[8] paused key\n    KEYS[9] meta key\n    KEYS[10] pc priority counter\n    -- Marker\n    KEYS[11] marker key\n    -- Arguments\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] opts\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal rcall = redis.call\nlocal waitKey = KEYS[1]\nlocal activeKey = KEYS[2]\nlocal eventStreamKey = KEYS[4]\nlocal rateLimiterKey = KEYS[6]\nlocal delayedKey = KEYS[7]\nlocal opts = cmsgpack.unpack(ARGV[3])\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[9], activeKey, waitKey, KEYS[8])\n-- Check if there are delayed jobs that we can move to wait.\nlocal markerKey = KEYS[11]\npromoteDelayedJobs(delayedKey, markerKey, target, KEYS[3], eventStreamKey, ARGV[1],\n                   ARGV[2], KEYS[10], isPausedOrMaxed)\nlocal maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\nlocal expireTime = getRateLimitTTL(maxJobs, rateLimiterKey)\n-- Check if we are rate limited first.\nif expireTime > 0 then return {0, 0, expireTime, 0} end\n-- paused or maxed queue\nif isPausedOrMaxed then return {0, 0, 0, 0} end\n-- no job ID, try non-blocking move from wait to active\nlocal jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\n-- Markers in waitlist DEPRECATED in v5: Will be completely removed in v6.\nif jobId and string.sub(jobId, 1, 2) == \"0:\" then\n    rcall(\"LREM\", activeKey, 1, jobId)\n    jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\nend\nif jobId then\n    return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                   maxJobs, opts)\nelse\n    jobId = moveJobFromPriorityToActive(KEYS[3], activeKey, KEYS[10])\n    if jobId then\n        return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                       maxJobs, opts)\n    end\nend\n-- Return the timestamp for the next delayed job if any.\nlocal nextTimestamp = getNextDelayedTimestamp(delayedKey)\nif nextTimestamp ~= nil then return {0, 0, 0, nextTimestamp} end\nreturn {0, 0, 0, 0}\n","numberOfKeys":11,"readOnly":false,"sha":"accb36ea979fc4cd20f4a56e3c4ad6df0ec0b14a"},"moveToDelayed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to delayed set.\n  Input:\n    KEYS[1] marker key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] delayed key\n    KEYS[5] job key\n    KEYS[6] events stream\n    KEYS[7] meta key\n    KEYS[8] stalled key\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] queue token\n    ARGV[5] delay value\n    ARGV[6] skip attempt\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in active set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal jobKey = KEYS[5]\nlocal metaKey = KEYS[7]\nlocal token = ARGV[4] \nif rcall(\"EXISTS\", jobKey) == 1 then\n    local errorCode = removeLock(jobKey, KEYS[8], token, ARGV[3])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local delayedKey = KEYS[4]\n    local jobId = ARGV[3]\n    local delay = tonumber(ARGV[5])\n    local score, delayedTimestamp = getDelayedScore(delayedKey, ARGV[2], delay)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if numRemovedElements < 1 then return -3 end\n    if ARGV[6] == \"0\" then\n        rcall(\"HINCRBY\", jobKey, \"atm\", 1)\n    end\n    rcall(\"HSET\", jobKey, \"delay\", ARGV[5])\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    rcall(\"ZADD\", delayedKey, score, jobId)\n    rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n          \"jobId\", jobId, \"delay\", delayedTimestamp)\n    -- Check if we need to push a marker job to wake up sleeping workers.\n    local markerKey = KEYS[1]\n    addDelayMarkerIfNeeded(markerKey, delayedKey)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"b54cf2d23990cd8eb373f262044967845d31c6a9"},"moveToFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move job from active to a finished status (completed o failed)\n  A job can only be moved to completed if it was active.\n  The job must be locked before it can be moved to a finished status,\n  and the lock must be released in this script.\n    Input:\n      KEYS[1] wait key\n      KEYS[2] active key\n      KEYS[3] prioritized key\n      KEYS[4] event stream key\n      KEYS[5] stalled key\n      -- Rate limiting\n      KEYS[6] rate limiter key\n      KEYS[7] delayed key\n      KEYS[8] paused key\n      KEYS[9] meta key\n      KEYS[10] pc priority counter\n      KEYS[11] completed/failed key\n      KEYS[12] jobId key\n      KEYS[13] metrics key\n      KEYS[14] marker key\n      ARGV[1]  jobId\n      ARGV[2]  timestamp\n      ARGV[3]  msg property returnvalue / failedReason\n      ARGV[4]  return value / failed reason\n      ARGV[5]  target (completed/failed)\n      ARGV[6]  fetch next?\n      ARGV[7]  keys prefix\n      ARGV[8]  opts\n      opts - token - lock token\n      opts - keepJobs\n      opts - lockDuration - lock duration in milliseconds\n      opts - attempts max attempts\n      opts - maxMetricsSize\n      opts - fpof - fail parent on fail\n      opts - idof - ignore dependency on fail\n      opts - rdof - remove dependency on fail\n    Output:\n      0 OK\n      -1 Missing key.\n      -2 Missing lock.\n      -3 Job not in active set\n      -4 Job has pending dependencies\n      -6 Lock is not owned by this client\n    Events:\n      'completed/failed'\n]]\nlocal rcall = redis.call\n--- Includes\n--[[\n  Functions to collect metrics based on a current and previous count of jobs.\n  Granualarity is fixed at 1 minute.\n]] \n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\nlocal function collectMetrics(metaKey, dataPointsList, maxDataPoints,\n                                 timestamp)\n    -- Increment current count\n    local count = rcall(\"HINCRBY\", metaKey, \"count\", 1) - 1\n    -- Compute how many data points we need to add to the list, N.\n    local prevTS = rcall(\"HGET\", metaKey, \"prevTS\")\n    if not prevTS then\n        -- If prevTS is nil, set it to the current timestamp\n        rcall(\"HSET\", metaKey, \"prevTS\", timestamp, \"prevCount\", 0)\n        return\n    end\n    local N = math.min(math.floor(timestamp / 60000) - math.floor(prevTS / 60000), tonumber(maxDataPoints))\n    if N > 0 then\n        local delta = count - rcall(\"HGET\", metaKey, \"prevCount\")\n        -- If N > 1, add N-1 zeros to the list\n        if N > 1 then\n            local points = {}\n            points[1] = delta\n            for i = 2, N do\n                points[i] = 0\n            end\n            for from, to in batches(#points, 7000) do\n                rcall(\"LPUSH\", dataPointsList, unpack(points, from, to))\n            end\n        else\n            -- LPUSH delta to the list\n            rcall(\"LPUSH\", dataPointsList, delta)\n        end\n        -- LTRIM to keep list to its max size\n        rcall(\"LTRIM\", dataPointsList, 0, maxDataPoints - 1)\n        -- update prev count with current count\n        rcall(\"HSET\", metaKey, \"prevCount\", count, \"prevTS\", timestamp)\n    end\nend\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal jobIdKey = KEYS[12]\nif rcall(\"EXISTS\", jobIdKey) == 1 then -- // Make sure job exists\n    local opts = cmsgpack.unpack(ARGV[8])\n    local token = opts['token']\n    local errorCode = removeLock(jobIdKey, KEYS[5], token, ARGV[1])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local attempts = opts['attempts']\n    local maxMetricsSize = opts['maxMetricsSize']\n    local maxCount = opts['keepJobs']['count']\n    local maxAge = opts['keepJobs']['age']\n    if rcall(\"SCARD\", jobIdKey .. \":dependencies\") ~= 0 then -- // Make sure it does not have pending dependencies\n        return -4\n    end\n    local jobAttributes = rcall(\"HMGET\", jobIdKey, \"parentKey\", \"parent\", \"deid\")\n    local parentKey = jobAttributes[1] or \"\"\n    local parentId = \"\"\n    local parentQueueKey = \"\"\n    if jobAttributes[2] ~= false then\n        local jsonDecodedParent = cjson.decode(jobAttributes[2])\n        parentId = jsonDecodedParent['id']\n        parentQueueKey = jsonDecodedParent['queueKey']\n    end\n    local jobId = ARGV[1]\n    local timestamp = ARGV[2]\n    -- Remove from active list (if not active we shall return error)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if (numRemovedElements < 1) then return -3 end\n    local eventStreamKey = KEYS[4]\n    local metaKey = KEYS[9]\n    -- Trim events before emiting them to avoid trimming events emitted in this script\n    trimEvents(metaKey, eventStreamKey)\n    local prefix = ARGV[7]\n    removeDeduplicationKeyIfNeeded(prefix, jobAttributes[3])\n    -- If job has a parent we need to\n    -- 1) remove this job id from parents dependencies\n    -- 2) move the job Id to parent \"processed\" set\n    -- 3) push the results into parent \"results\" list\n    -- 4) if parent's dependencies is empty, then move parent to \"wait/paused\". Note it may be a different queue!.\n    if parentId == \"\" and parentKey ~= \"\" then\n        parentId = getJobIdFromKey(parentKey)\n        parentQueueKey = getJobKeyPrefix(parentKey, \":\" .. parentId)\n    end\n    if parentId ~= \"\" then\n        if ARGV[5] == \"completed\" then\n            local dependenciesSet = parentKey .. \":dependencies\"\n            if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                updateParentDepsIfNeeded(parentKey, parentQueueKey,\n                                         dependenciesSet, parentId, jobIdKey,\n                                         ARGV[4], timestamp)\n            end\n        else\n            if opts['fpof'] then\n                moveParentFromWaitingChildrenToFailed(parentQueueKey, parentKey,\n                                                      parentId, jobIdKey,\n                                                      timestamp)\n            elseif opts['idof'] or opts['rdof'] then\n                local dependenciesSet = parentKey .. \":dependencies\"\n                if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                    moveParentToWaitIfNeeded(parentQueueKey, dependenciesSet,\n                                             parentKey, parentId, timestamp)\n                    if opts['idof'] then\n                        local failedSet = parentKey .. \":failed\"\n                        rcall(\"HSET\", failedSet, jobIdKey, ARGV[4])\n                    end\n                end\n            end\n        end\n    end\n    local attemptsMade = rcall(\"HINCRBY\", jobIdKey, \"atm\", 1)\n    -- Remove job?\n    if maxCount ~= 0 then\n        local targetSet = KEYS[11]\n        -- Add to complete/failed set\n        rcall(\"ZADD\", targetSet, timestamp, jobId)\n        rcall(\"HMSET\", jobIdKey, ARGV[3], ARGV[4], \"finishedOn\", timestamp)\n        -- \"returnvalue\" / \"failedReason\" and \"finishedOn\"\n        -- Remove old jobs?\n        if maxAge ~= nil then\n            removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix)\n        end\n        if maxCount ~= nil and maxCount > 0 then\n            removeJobsByMaxCount(maxCount, targetSet, prefix)\n        end\n    else\n        removeJobKeys(jobIdKey)\n        if parentKey ~= \"\" then\n            -- TODO: when a child is removed when finished, result or failure in parent\n            -- must not be deleted, those value references should be deleted when the parent\n            -- is deleted\n            removeParentDependencyKey(jobIdKey, false, parentKey, jobAttributes[3])\n        end\n    end\n    rcall(\"XADD\", eventStreamKey, \"*\", \"event\", ARGV[5], \"jobId\", jobId, ARGV[3],\n          ARGV[4])\n    if ARGV[5] == \"failed\" then\n        if tonumber(attemptsMade) >= tonumber(attempts) then\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"retries-exhausted\", \"jobId\",\n                  jobId, \"attemptsMade\", attemptsMade)\n        end\n    end\n    -- Collect metrics\n    if maxMetricsSize ~= \"\" then\n        collectMetrics(KEYS[13], KEYS[13] .. ':data', maxMetricsSize, timestamp)\n    end\n    -- Try to get next job to avoid an extra roundtrip if the queue is not closing,\n    -- and not rate limited.\n    if (ARGV[6] == \"1\") then\n        local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[2], KEYS[1], KEYS[8])\n        -- Check if there are delayed jobs that can be promoted\n        promoteDelayedJobs(KEYS[7], KEYS[14], target, KEYS[3], eventStreamKey, prefix,\n                           timestamp, KEYS[10], isPausedOrMaxed)\n        local maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\n        -- Check if we are rate limited first.\n        local expireTime = getRateLimitTTL(maxJobs, KEYS[6])\n        if expireTime > 0 then return {0, 0, expireTime, 0} end\n        -- paused or maxed queue\n        if isPausedOrMaxed then return {0, 0, 0, 0} end\n        jobId = rcall(\"RPOPLPUSH\", KEYS[1], KEYS[2])\n        if jobId then\n            -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n            if string.sub(jobId, 1, 2) == \"0:\" then\n                rcall(\"LREM\", KEYS[2], 1, jobId)\n                -- If jobId is special ID 0:delay (delay greater than 0), then there is no job to process\n                -- but if ID is 0:0, then there is at least 1 prioritized job to process\n                if jobId == \"0:0\" then\n                    jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2],\n                                                        KEYS[10])\n                    return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                                   timestamp, maxJobs,\n                                                   opts)\n                end\n            else\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        else\n            jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2], KEYS[10])\n            if jobId then\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        end\n        -- Return the timestamp for the next delayed job if any.\n        local nextTimestamp = getNextDelayedTimestamp(KEYS[7])\n        if nextTimestamp ~= nil then\n            -- The result is guaranteed to be positive, since the\n            -- ZRANGEBYSCORE command would have return a job otherwise.\n            return {0, 0, 0, nextTimestamp}\n        end\n    end\n    local waitLen = rcall(\"LLEN\", KEYS[1])\n    if waitLen == 0 then\n        local activeLen = rcall(\"LLEN\", KEYS[2])\n        if activeLen == 0 then\n            local prioritizedLen = rcall(\"ZCARD\", KEYS[3])\n            if prioritizedLen == 0 then\n                rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"drained\")\n            end\n        end\n    end\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":14,"readOnly":false,"sha":"12006f44a676d9abd1b94956e52c26b0a23f2d53"},"moveToWaitingChildren:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to waiting children set.\n  Input:\n    KEYS[1] lock key\n    KEYS[2] active key\n    KEYS[3] waitChildrenKey key\n    KEYS[4] job key\n    KEYS[5] stalled key\n    ARGV[1] token\n    ARGV[2] child key\n    ARGV[3] timestamp\n    ARGV[4] the id of the job\n  Output:\n    0 - OK\n    1 - There are not pending dependencies.\n   -1 - Missing job.\n   -2 - Missing lock\n   -3 - Job not in active set\n]]\nlocal rcall = redis.call\nlocal stalledKey = KEYS[5]\n--- Includes\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal function moveToWaitingChildren (activeKey, waitingChildrenKey, jobId,\n    timestamp)\n  local score = tonumber(timestamp)\n  local numRemovedElements = rcall(\"LREM\", activeKey, -1, jobId)\n  if(numRemovedElements < 1) then\n    return -3\n  end\n  rcall(\"ZADD\", waitingChildrenKey, score, jobId)\n  return 0\nend\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  if ARGV[2] ~= \"\" then\n    if rcall(\"SISMEMBER\", KEYS[4] .. \":dependencies\", ARGV[2]) ~= 0 then\n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  else\n    if rcall(\"SCARD\", KEYS[4] .. \":dependencies\") ~= 0 then \n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  end\nend\nreturn -1\n","numberOfKeys":5,"readOnly":false,"sha":"6973c26e3288f458fe6c1018d2e75b11159dc264"},"obliterate:5.23.0":{"keyPrefix":"","lua":"--[[\n  Completely obliterates a queue and all of its contents\n  This command completely destroys a queue including all of its jobs, current or past \n  leaving no trace of its existence. Since this script needs to iterate to find all the job\n  keys, consider that this call may be slow for very large queues.\n  The queue needs to be \"paused\" or it will return an error\n  If the queue has currently active jobs then the script by default will return error,\n  however this behaviour can be overrided using the 'force' option.\n  Input:\n    KEYS[1] meta\n    KEYS[2] base\n    ARGV[1] count\n    ARGV[2] force\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal baseKey = KEYS[2]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nlocal function removeLockKeys(keys)\n  for i, key in ipairs(keys) do\n    rcall(\"DEL\", baseKey .. key .. ':lock')\n  end\nend\n-- 1) Check if paused, if not return with error.\nif rcall(\"HEXISTS\", KEYS[1], \"paused\") ~= 1 then\n  return -1 -- Error, NotPaused\nend\n-- 2) Check if there are active jobs, if there are and not \"force\" return error.\nlocal activeKey = baseKey .. 'active'\nlocal activeJobs = getListItems(activeKey, maxCount)\nif (#activeJobs > 0) then\n  if(ARGV[2] == \"\") then \n    return -2 -- Error, ExistActiveJobs\n  end\nend\nremoveLockKeys(activeJobs)\nmaxCount = removeJobs(activeJobs, true, baseKey, maxCount)\nrcall(\"LTRIM\", activeKey, #activeJobs, -1)\nif(maxCount <= 0) then\n  return 1\nend\nlocal delayedKey = baseKey .. 'delayed'\nmaxCount = removeZSetJobs(delayedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal repeatKey = baseKey .. 'repeat'\nlocal repeatJobsIds = getZSetItems(repeatKey, maxCount)\nfor i, key in ipairs(repeatJobsIds) do\n  local jobKey = repeatKey .. \":\" .. key\n  rcall(\"DEL\", jobKey)\nend\nif(#repeatJobsIds > 0) then\n  for from, to in batches(#repeatJobsIds, 7000) do\n    rcall(\"ZREM\", repeatKey, unpack(repeatJobsIds, from, to))\n  end\nend\nmaxCount = maxCount - #repeatJobsIds\nif(maxCount <= 0) then\n  return 1\nend\nlocal completedKey = baseKey .. 'completed'\nmaxCount = removeZSetJobs(completedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal waitKey = baseKey .. 'paused'\nmaxCount = removeListJobs(waitKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal prioritizedKey = baseKey .. 'prioritized'\nmaxCount = removeZSetJobs(prioritizedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal failedKey = baseKey .. 'failed'\nmaxCount = removeZSetJobs(failedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nif(maxCount > 0) then\n  rcall(\"DEL\",\n    baseKey .. 'events',\n    baseKey .. 'delay', \n    baseKey .. 'stalled-check',\n    baseKey .. 'stalled',\n    baseKey .. 'id',\n    baseKey .. 'pc',\n    baseKey .. 'meta',\n    baseKey .. 'metrics:completed',\n    baseKey .. 'metrics:completed:data',\n    baseKey .. 'metrics:failed',\n    baseKey .. 'metrics:failed:data')\n  return 0\nelse\n  return 1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"373cd929817041e9886b8934d98dcad319bd1fa3"},"paginate:5.23.0":{"keyPrefix":"","lua":"--[[\n    Paginate a set or hash\n    Input:\n      KEYS[1] key pointing to the set or hash to be paginated.\n      ARGV[1]  page start offset\n      ARGV[2]  page end offset (-1 for all the elements)\n      ARGV[3]  cursor\n      ARGV[4]  offset\n      ARGV[5]  max iterations\n      ARGV[6]  fetch jobs?\n    Output:\n      [cursor, offset, items, numItems]\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to achieve pagination for a set or hash.\n  This function simulates pagination in the most efficient way possible\n  for a set using sscan or hscan.\n  The main limitation is that sets are not order preserving, so the\n  pagination is not stable. This means that if the set is modified\n  between pages, the same element may appear in different pages.\n]] -- Maximum number of elements to be returned by sscan per iteration.\nlocal maxCount = 100\n-- Finds the cursor, and returns the first elements available for the requested page.\nlocal function findPage(key, command, pageStart, pageSize, cursor, offset,\n                        maxIterations, fetchJobs)\n    local items = {}\n    local jobs = {}\n    local iterations = 0\n    repeat\n        -- Iterate over the set using sscan/hscan.\n        local result = rcall(command, key, cursor, \"COUNT\", maxCount)\n        cursor = result[1]\n        local members = result[2]\n        local step = 1\n        if command == \"HSCAN\" then\n            step = 2\n        end\n        if #members == 0 then\n            -- If the result is empty, we can return the result.\n            return cursor, offset, items, jobs\n        end\n        local chunkStart = offset\n        local chunkEnd = offset + #members / step\n        local pageEnd = pageStart + pageSize\n        if chunkEnd < pageStart then\n            -- If the chunk is before the page, we can skip it.\n            offset = chunkEnd\n        elseif chunkStart > pageEnd then\n            -- If the chunk is after the page, we can return the result.\n            return cursor, offset, items, jobs\n        else\n            -- If the chunk is overlapping the page, we need to add the elements to the result.\n            for i = 1, #members, step do\n                if offset >= pageEnd then\n                    return cursor, offset, items, jobs\n                end\n                if offset >= pageStart then\n                    local index = #items + 1\n                    if fetchJobs ~= nil then\n                        jobs[#jobs+1] = rcall(\"HGETALL\", members[i])\n                    end\n                    if step == 2 then\n                        items[index] = {members[i], members[i + 1]}\n                    else\n                        items[index] = members[i]\n                    end\n                end\n                offset = offset + 1\n            end\n        end\n        iterations = iterations + 1\n    until cursor == \"0\" or iterations >= maxIterations\n    return cursor, offset, items, jobs\nend\nlocal key = KEYS[1]\nlocal scanCommand = \"SSCAN\"\nlocal countCommand = \"SCARD\"\nlocal type = rcall(\"TYPE\", key)[\"ok\"]\nif type == \"none\" then\n    return {0, 0, {}, 0}\nelseif type == \"hash\" then\n    scanCommand = \"HSCAN\"\n    countCommand = \"HLEN\"\nelseif type ~= \"set\" then\n    return\n        redis.error_reply(\"Pagination is only supported for sets and hashes.\")\nend\nlocal numItems = rcall(countCommand, key)\nlocal startOffset = tonumber(ARGV[1])\nlocal endOffset = tonumber(ARGV[2])\nif endOffset == -1 then \n  endOffset = numItems\nend\nlocal pageSize = (endOffset - startOffset) + 1\nlocal cursor, offset, items, jobs = findPage(key, scanCommand, startOffset,\n                                       pageSize, ARGV[3], tonumber(ARGV[4]),\n                                       tonumber(ARGV[5]), ARGV[6])\nreturn {cursor, offset, items, numItems, jobs}\n","numberOfKeys":1,"readOnly":false,"sha":"24e0a4e97b78f73b314c257b4fff96ebfc207f27"},"pause:5.23.0":{"keyPrefix":"","lua":"--[[\n  Pauses or resumes a queue globably.\n  Input:\n    KEYS[1] 'wait' or 'paused''\n    KEYS[2] 'paused' or 'wait'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] events stream key\n    KEYS[6] 'delayed'\n    KEYS|7] 'marker'\n    ARGV[1] 'paused' or 'resumed'\n  Event:\n    publish paused or resumed event.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\nlocal markerKey = KEYS[7]\nlocal hasJobs = rcall(\"EXISTS\", KEYS[1]) == 1\n--TODO: check this logic to be reused when changing a delay\nif hasJobs then rcall(\"RENAME\", KEYS[1], KEYS[2]) end\nif ARGV[1] == \"paused\" then\n    rcall(\"HSET\", KEYS[3], \"paused\", 1)\n    rcall(\"DEL\", markerKey)\nelse\n    rcall(\"HDEL\", KEYS[3], \"paused\")\n    if hasJobs or rcall(\"ZCARD\", KEYS[4]) > 0 then\n        -- Add marker if there are waiting or priority jobs\n        rcall(\"ZADD\", markerKey, 0, \"0\")\n    else\n        addDelayMarkerIfNeeded(markerKey, KEYS[6])\n    end\nend\nrcall(\"XADD\", KEYS[5], \"*\", \"event\", ARGV[1]);\n","numberOfKeys":7,"readOnly":false,"sha":"b5e8cf4d8b11d432fad7d3f9a78f55ce7f9e5e58"},"promote:5.23.0":{"keyPrefix":"","lua":"--[[\n  Promotes a job that is currently \"delayed\" to the \"waiting\" state\n    Input:\n      KEYS[1] 'delayed'\n      KEYS[2] 'wait'\n      KEYS[3] 'paused'\n      KEYS[4] 'meta'\n      KEYS[5] 'prioritized'\n      KEYS[6] 'active'\n      KEYS[7] 'pc' priority counter\n      KEYS[8] 'event stream'\n      KEYS[9] 'marker'\n      ARGV[1]  queue.toKey('')\n      ARGV[2]  jobId\n    Output:\n       0 - OK\n      -3 - Job not in delayed zset.\n    Events:\n      'waiting'\n]]\nlocal rcall = redis.call\nlocal jobId = ARGV[2]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"ZREM\", KEYS[1], jobId) == 1 then\n    local jobKey = ARGV[1] .. jobId\n    local priority = tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n    local metaKey = KEYS[4]\n    local markerKey = KEYS[9]\n    -- Remove delayed \"marker\" from the wait list if there is any.\n    -- Since we are adding a job we do not need the marker anymore.\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[2], KEYS[3])\n    local marker = rcall(\"LINDEX\", target, 0)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then rcall(\"LPOP\", target) end\n    if priority == 0 then\n        -- LIFO or FIFO\n        addJobInTargetList(target, markerKey, \"LPUSH\", isPausedOrMaxed, jobId)\n    else\n        addJobWithPriority(markerKey, KEYS[5], priority, jobId, KEYS[7], isPausedOrMaxed)\n    end\n    -- Emit waiting event (wait..ing@token)\n    rcall(\"XADD\", KEYS[8], \"*\", \"event\", \"waiting\", \"jobId\", jobId, \"prev\",\n          \"delayed\");\n    rcall(\"HSET\", jobKey, \"delay\", 0)\n    return 0\nelse\n    return -3\nend\n","numberOfKeys":9,"readOnly":false,"sha":"3b1d1df758d39e3939530d7943c8f8b10be81ef5"},"releaseLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Release lock\n    Input:\n      KEYS[1] 'lock',\n      ARGV[1]  token\n      ARGV[2]  lock duration in milliseconds\n    Output:\n      \"OK\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  return rcall(\"DEL\", KEYS[1])\nelse\n  return 0\nend\n","numberOfKeys":1,"readOnly":false,"sha":"aa94dc35fb8a4d637c5faaa49796b6094475e299"},"removeChildDependency:5.23.0":{"keyPrefix":"","lua":"--[[\n  Break parent-child dependency by removing\n  child reference from parent\n  Input:\n    KEYS[1] 'key' prefix,\n    ARGV[1] job key\n    ARGV[2] parent key\n    Output:\n       0  - OK\n       1  - There is not relationship.\n      -1  - Missing job key\n      -5  - Missing parent key\n]]\nlocal rcall = redis.call\nlocal jobKey = ARGV[1]\nlocal parentKey = ARGV[2]\n-- Includes\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nif rcall(\"EXISTS\", jobKey) ~= 1 then return -1 end\nif rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\nif removeParentDependencyKey(jobKey, false, parentKey, KEYS[1], nil) then\n  rcall(\"HDEL\", jobKey, \"parentKey\", \"parent\")\n  return 0\nelse\n  return 1\nend","numberOfKeys":1,"readOnly":false,"sha":"91d0d0ceb4fdecae5b011a6acad7dae6df8b917a"},"removeJob:5.23.0":{"keyPrefix":"","lua":"--[[\n    Remove a job from all the queues it may be in as well as all its data.\n    In order to be able to remove a job, it cannot be active.\n    Input:\n      KEYS[1] queue prefix\n      KEYS[2] meta key\n      ARGV[1] jobId\n      ARGV[2] remove children\n    Events:\n      'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to recursively check if there are no locks\n  on the jobs to be removed.\n  returns:\n    boolean\n]]\nlocal function isLocked( prefix, jobId, removeChildren)\n  local jobKey = prefix .. jobId;\n  -- Check if this job is locked\n  local lockKey = jobKey .. ':lock'\n  local lock = rcall(\"GET\", lockKey)\n  if not lock then\n    if removeChildren == \"1\" then\n      local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n      if (#dependencies > 0) then\n        for i, childJobKey in ipairs(dependencies) do\n          -- We need to get the jobId for this job.\n          local childJobId = getJobIdFromKey(childJobKey)\n          local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n          local result = isLocked( childJobPrefix, childJobId, removeChildren )\n          if result then\n            return true\n          end\n        end\n      end\n    end\n    return false\n  end\n  return true\nend\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove from any state.\n  returns:\n    prev state\n]]\nlocal function removeJobFromAnyState( prefix, jobId)\n  -- We start with the ZSCORE checks, since they have O(1) complexity\n  if rcall(\"ZSCORE\", prefix .. \"completed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"completed\", jobId)\n    return \"completed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"waiting-children\", jobId) then\n    rcall(\"ZREM\", prefix .. \"waiting-children\", jobId)\n    return \"waiting-children\"\n  elseif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"delayed\", jobId)\n    return \"delayed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"failed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"failed\", jobId)\n    return \"failed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"prioritized\", jobId) then\n    rcall(\"ZREM\", prefix .. \"prioritized\", jobId)\n    return \"prioritized\"\n  -- We remove only 1 element from the list, since we assume they are not added multiple times\n  elseif rcall(\"LREM\", prefix .. \"wait\", 1, jobId) == 1 then\n    return \"wait\"\n  elseif rcall(\"LREM\", prefix .. \"paused\", 1, jobId) == 1 then\n    return \"paused\"\n  elseif rcall(\"LREM\", prefix .. \"active\", 1, jobId) == 1 then\n    return \"active\"\n  end\n  return \"unknown\"\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(prefix, jobId, parentKey, removeChildren)\n    local jobKey = prefix .. jobId;\n    removeParentDependencyKey(jobKey, false, parentKey, nil)\n    if removeChildren == \"1\" then\n        -- Check if this job has children\n        -- If so, we are going to try to remove the children recursively in deep first way because\n        -- if some job is locked we must exit with and error.\n        -- local countProcessed = rcall(\"HLEN\", jobKey .. \":processed\")\n        local processed = rcall(\"HGETALL\", jobKey .. \":processed\")\n        if (#processed > 0) then\n            for i = 1, #processed, 2 do\n                local childJobId = getJobIdFromKey(processed[i])\n                local childJobPrefix = getJobKeyPrefix(processed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n        if (#dependencies > 0) then\n            for i, childJobKey in ipairs(dependencies) do\n                -- We need to get the jobId for this job.\n                local childJobId = getJobIdFromKey(childJobKey)\n                local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local failed = rcall(\"HGETALL\", jobKey .. \":failed\")\n        if (#failed > 0) then\n            for i = 1, #failed, 2 do\n                local childJobId = getJobIdFromKey(failed[i])\n                local childJobPrefix = getJobKeyPrefix(failed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n    end\n    local prev = removeJobFromAnyState(prefix, jobId)\n    removeDeduplicationKey(prefix, jobKey)\n    if removeJobKeys(jobKey) > 0 then\n        local maxEvents = getOrSetMaxEvents(KEYS[2])\n        rcall(\"XADD\", prefix .. \"events\", \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"removed\", \"jobId\", jobId, \"prev\",\n            prev)\n    end\nend\nlocal prefix = KEYS[1]\nlocal jobId = ARGV[1]\nlocal shouldRemoveChildren = ARGV[2]\nlocal jobKey = prefix .. jobId\n-- Check if the job belongs to a job scheduler and it is in delayed state.\nif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) and rcall(\"HGET\", jobKey, \"rjk\") then\n    return -8 -- Return error code as the job is part of a job scheduler and is in delayed state.\nend\nif not isLocked(prefix, jobId, shouldRemoveChildren) then\n    removeJob(prefix, jobId, nil, shouldRemoveChildren)\n    return 1\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"6ab3da66c7019f2baed32b1b6ded3d70871a9882"},"removeJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] job schedulers key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] job scheduler id\n    ARGV[2] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal jobSchedulerId = ARGV[1]\nlocal prefix = ARGV[2]\nlocal millis = rcall(\"ZSCORE\", KEYS[1], jobSchedulerId)\nif millis then\n  -- Delete next programmed job.\n  local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], delayedJobId) == 1) then\n    removeJobKeys(prefix .. delayedJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", delayedJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], jobSchedulerId) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. jobSchedulerId)\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"97fea98805553999aa91f7168443955f40975f20"},"removeRepeatable:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] repeat jobs key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] old repeat job id\n    ARGV[2] options concat\n    ARGV[3] repeat job key\n    ARGV[4] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\nlocal millis = rcall(\"ZSCORE\", KEYS[1], ARGV[2])\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n-- legacy removal TODO: remove in next breaking change\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = ARGV[1] .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\");\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[2]) == 1) then\n  return 0\nend\n-- new removal\nmillis = rcall(\"ZSCORE\", KEYS[1], ARGV[3])\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = \"repeat:\" .. ARGV[3] .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[3]) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. ARGV[3])\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"8b7754dbe8ee0938a634f0bfd43cfa41084e2074"},"reprocessJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Attempts to reprocess a job\n  Input:\n    KEYS[1] job key\n    KEYS[2] events stream\n    KEYS[3] job state\n    KEYS[4] wait key\n    KEYS[5] meta\n    KEYS[6] paused key\n    KEYS[7] active key\n    KEYS[8] marker key\n    ARGV[1] job.id\n    ARGV[2] (job.opts.lifo ? 'R' : 'L') + 'PUSH'\n    ARGV[3] propVal - failedReason/returnvalue\n    ARGV[4] prev state - failed/completed\n  Output:\n     1 means the operation was a success\n    -1 means the job does not exist\n    -3 means the job was not found in the expected set.\n]]\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  local jobId = ARGV[1]\n  if (rcall(\"ZREM\", KEYS[3], jobId) == 1) then\n    rcall(\"HDEL\", KEYS[1], \"finishedOn\", \"processedOn\", ARGV[3])\n    local target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[7], KEYS[4], KEYS[6])\n    addJobInTargetList(target, KEYS[8], ARGV[2], isPausedOrMaxed, jobId)\n    local maxEvents = getOrSetMaxEvents(KEYS[5])\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId, \"prev\", ARGV[4]);\n    return 1\n  else\n    return -3\n  end\nelse\n  return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"8dda09f0ada31675974dc60c7d149ee15b0743b9"},"retryJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Retries a failed job by moving it back to the wait queue.\n    Input:\n      KEYS[1]  'active',\n      KEYS[2]  'wait'\n      KEYS[3]  'paused'\n      KEYS[4]  job key\n      KEYS[5]  'meta'\n      KEYS[6]  events stream\n      KEYS[7]  delayed key\n      KEYS[8]  prioritized key\n      KEYS[9]  'pc' priority counter\n      KEYS[10] 'marker'\n      KEYS[11] 'stalled'\n      ARGV[1]  key prefix\n      ARGV[2]  timestamp\n      ARGV[3]  pushCmd\n      ARGV[4]  jobId\n      ARGV[5]  token\n    Events:\n      'waiting'\n    Output:\n     0  - OK\n     -1 - Missing key\n     -2 - Missing lock\n     -3 - Job not in active set\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[1], KEYS[2], KEYS[3])\nlocal markerKey = KEYS[10]\n-- Check if there are delayed jobs that we can move to wait.\n-- test example: when there are delayed jobs between retries\npromoteDelayedJobs(KEYS[7], markerKey, target, KEYS[8], KEYS[6], ARGV[1], ARGV[2], KEYS[9], isPausedOrMaxed)\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  local errorCode = removeLock(KEYS[4], KEYS[11], ARGV[5], ARGV[4]) \n  if errorCode < 0 then\n    return errorCode\n  end\n  local numRemovedElements = rcall(\"LREM\", KEYS[1], -1, ARGV[4])\n  if (numRemovedElements < 1) then return -3 end\n  local priority = tonumber(rcall(\"HGET\", KEYS[4], \"priority\")) or 0\n  --need to re-evaluate after removing job from active\n  isPausedOrMaxed = isQueuePausedOrMaxed(KEYS[5], KEYS[1])\n  -- Standard or priority add\n  if priority == 0 then\n    addJobInTargetList(target, markerKey, ARGV[3], isPausedOrMaxed, ARGV[4])\n  else\n    addJobWithPriority(markerKey, KEYS[8], priority, ARGV[4], KEYS[9], isPausedOrMaxed)\n  end\n  rcall(\"HINCRBY\", KEYS[4], \"atm\", 1)\n  local maxEvents = getOrSetMaxEvents(KEYS[5])\n  -- Emit waiting event\n  rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n    \"jobId\", ARGV[4], \"prev\", \"failed\")\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":11,"readOnly":false,"sha":"6076d6fc973ce8afee9cb60d78b0c0b6bd5eae4c"},"saveStacktrace:5.23.0":{"keyPrefix":"","lua":"--[[\n  Save stacktrace and failedReason.\n  Input:\n    KEYS[1] job key\n    ARGV[1]  stacktrace\n    ARGV[2]  failedReason\n  Output:\n     0 - OK\n    -1 - Missing key\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  rcall(\"HMSET\", KEYS[1], \"stacktrace\", ARGV[1], \"failedReason\", ARGV[2])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"ab2818154a3f405adad5e01b769e79c50fb9e615"},"updateData:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job data\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] data\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\",KEYS[1]) == 1 then -- // Make sure job exists\n  rcall(\"HSET\", KEYS[1], \"data\", ARGV[1])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"12a42ffd90c486a7f398fbb17cdcdd484f4abaea"},"updateJobOption:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update a job option\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] field\n    ARGV[2] value\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local opts = rcall(\"HGET\", KEYS[1], \"opts\")\n    local jsonOpts = cjson.decode(opts)\n    jsonOpts[ARGV[1]] = ARGV[2]\n    rcall(\"HSET\", KEYS[1], \"opts\", cjson.encode(jsonOpts))\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"03691d12e8d0415d9c65afda83999f77432e7d1a"},"updateProgress:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job progress\n  Input:\n    KEYS[1] Job id key\n    KEYS[2] event stream key\n    KEYS[3] meta key\n    ARGV[1] id\n    ARGV[2] progress\n  Output:\n     0 - OK\n    -1 - Missing job.\n  Event:\n    progress(jobId, progress)\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local maxEvents = getOrSetMaxEvents(KEYS[3])\n    rcall(\"HSET\", KEYS[1], \"progress\", ARGV[2])\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"progress\",\n          \"jobId\", ARGV[1], \"data\", ARGV[2]);\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":3,"readOnly":false,"sha":"ddd7da9c6be4b31a479136c66425bef0bc2a047f"},"updateRepeatableJobMillis:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      ARGV[1] next milliseconds\n      ARGV[2] custom key\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal nextMillis = ARGV[1]\nlocal customKey = ARGV[2]\nlocal legacyCustomKey = ARGV[3]\nif rcall(\"ZSCORE\", repeatKey, customKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n    return customKey\nelseif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, legacyCustomKey)\n    return legacyCustomKey\nend\nreturn ''\n","numberOfKeys":1,"readOnly":false,"sha":"18e65990db4c93586838c27a5975ee2d3a63ce00"}},"status":"ready","stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"_events":{},"_eventsCount":2,"blocking":true,"capabilities":{"canBlockFor1Ms":true,"canDoubleTimeout":true},"initializing":{},"opts":{"connectionName":"bull:dGFza3M=","host":"192.168.10.2","maxRetriesPerRequest":null,"port":6379},"shared":false,"skipVersionCheck":false,"status":"ready","version":"7.4.1"},"closed":false,"connection":{"_client":{"_autoPipelines":{},"_events":{},"_eventsCount":3,"_maxListeners":13,"_runningAutoPipelines":{},"addedBuiltinSet":{},"commandQueue":{"_capacityMask":3,"_head":1,"_list":[null,null,null,null],"_tail":1},"condition":{"auth":null,"select":0,"subscriber":false},"connectionEpoch":1,"connector":{"connecting":true,"disconnectTimeout":2000,"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":null,"db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"isCluster":false,"manuallyClosing":false,"offlineQueue":{"_capacityMask":3,"_head":0,"_list":[null,null,null,null],"_tail":0},"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":null,"db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"reconnectTimeout":null,"retryAttempts":0,"scriptsSet":{"addDelayedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a delayed job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - computes timestamp.\n    - adds to delayed zset.\n    - Emits a global event 'delayed' if the job is delayed.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'delayed'\n      KEYS[5] 'completed'\n      KEYS[6] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (use custom instead of one generated automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n          x [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal delayedKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal eventsKey = KEYS[6]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\nlocal score, delayedTimestamp = getDelayedScore(delayedKey, timestamp, tonumber(delay))\nrcall(\"ZADD\", delayedKey, score, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n      \"jobId\", jobId, \"delay\", delayedTimestamp)\n-- mark that a delayed job is available\nlocal markerKey = KEYS[1]\naddDelayMarkerIfNeeded(markerKey, delayedKey)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":6,"readOnly":false,"sha":"28d826f4b47e91d4e296526a4f9dd0e6e87f4030"},"addJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job scheduler, i.e. a job factory that creates jobs based on a given schedule (repeat options).\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] jobs scheduler id\n      ARGV[4] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal jobSchedulerId = ARGV[3]\nlocal prefixKey = ARGV[4]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, jobSchedulerId)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. jobSchedulerId, \"name\", opts['name'],\n    unpack(optionalValues))\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, jobSchedulerId)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. jobSchedulerId .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. jobSchedulerId .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\nreturn storeRepeatableJob(repeatKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"a5a24f643c0294143ec2a981e63344699d31b6db"},"addLog:5.23.0":{"keyPrefix":"","lua":"--[[\n  Add job log\n  Input:\n    KEYS[1] job id key\n    KEYS[2] job logs key\n    ARGV[1] id\n    ARGV[2] log\n    ARGV[3] keepLogs\n  Output:\n    -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n  local logCount = rcall(\"RPUSH\", KEYS[2], ARGV[2])\n  if ARGV[3] ~= '' then\n    local keepLogs = tonumber(ARGV[3])\n    rcall(\"LTRIM\", KEYS[2], -keepLogs, -1)\n    return math.min(keepLogs, logCount)\n  end\n  return logCount\nelse\n  return -1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"eecb06ad6c96fa5da4fa8bca0ea7a1bf1bf62f18"},"addParentJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a parent job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - adds the job to the waiting-children zset\n    Input:\n      KEYS[1] 'meta'\n      KEYS[2] 'id'\n      KEYS[3] 'completed'\n      KEYS[4] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[1]\nlocal idKey = KEYS[2]\nlocal completedKey = KEYS[3]\nlocal eventsKey = KEYS[4]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal waitChildrenKey = args[6]\nrcall(\"ZADD\", waitChildrenKey, timestamp, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n      \"waiting-children\", \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":4,"readOnly":false,"sha":"8b4682aa777886ad4a5c60c3f528309f3721d472"},"addPrioritizedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a priotitized job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'prioritized'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] 'pc' priority counter\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]] \nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal priorityKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal activeKey = KEYS[6]\nlocal eventsKey = KEYS[7]\nlocal priorityCounterKey = KEYS[8]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\n-- Add the job to the prioritized set\nlocal isPausedOrMaxed = isQueuePausedOrMaxed(metaKey, activeKey)\naddJobWithPriority( KEYS[1], priorityKey, priority, jobId, priorityCounterKey, isPausedOrMaxed)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"9941c303fd1cd31a262324a90c1cd7236c5022d5"},"addRepeatableJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      ARGV[4] custom key\n      ARGV[5] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal legacyCustomKey = ARGV[3]\nlocal customKey = ARGV[4]\nlocal prefixKey = ARGV[5]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, customKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. customKey, \"name\", opts['name'],\n    unpack(optionalValues))\n  return customKey\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, customKey)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. customKey .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. customKey .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\n-- Keep backwards compatibility with old repeatable jobs (<= 3.0.0)\nif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n  return storeRepeatableJob(repeatKey, legacyCustomKey, nextMillis, ARGV[2])\nend\nreturn storeRepeatableJob(repeatKey, customKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"c01242e2652ac7c1e5f276b7d6c849375b22d1a7"},"addStandardJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - if delayed:\n      - computes timestamp.\n      - adds to delayed zset.\n      - Emits a global event 'delayed' if the job is delayed.\n    - if not delayed\n      - Adds the jobId to the wait/paused list in one of three ways:\n         - LIFO\n         - FIFO\n         - prioritized.\n      - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'wait',\n      KEYS[2] 'paused'\n      KEYS[3] 'meta'\n      KEYS[4] 'id'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] marker key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal eventsKey = KEYS[7]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", KEYS[4])\nlocal metaKey = KEYS[3]\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, KEYS[5], eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[1], KEYS[2])\n-- LIFO or FIFO\nlocal pushCmd = opts['lifo'] and 'RPUSH' or 'LPUSH'\naddJobInTargetList(target, KEYS[8], pushCmd, isPausedOrMaxed, jobId)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"a7b39766da8f5ced70f465297396dd83e550ceed"},"changeDelay:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job delay when it is in delayed set.\n  Input:\n    KEYS[1] delayed key\n    KEYS[2] meta key\n    KEYS[3] marker key\n    KEYS[4] events stream\n    ARGV[1] delay\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] job key\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in delayed set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", ARGV[4]) == 1 then\n  local jobId = ARGV[3]\n  local delay = tonumber(ARGV[1])\n  local score, delayedTimestamp = getDelayedScore(KEYS[1], ARGV[2], delay)\n  local numRemovedElements = rcall(\"ZREM\", KEYS[1], jobId)\n  if numRemovedElements < 1 then\n    return -3\n  end\n  rcall(\"HSET\", ARGV[4], \"delay\", delay)\n  rcall(\"ZADD\", KEYS[1], score, jobId)\n  local maxEvents = getOrSetMaxEvents(KEYS[2])\n  rcall(\"XADD\", KEYS[4], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n    \"jobId\", jobId, \"delay\", delayedTimestamp)\n  -- mark that a delayed job is available\n  addDelayMarkerIfNeeded(KEYS[3], KEYS[1])\n  return 0\nelse\n  return -1\nend","numberOfKeys":4,"readOnly":false,"sha":"d7704f63de52505e835193d552148741ae9770b8"},"changePriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job priority\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'active'\n    KEYS[6] 'pc' priority counter\n    KEYS[7] 'marker'\n    ARGV[1] priority value\n    ARGV[2] prefix key\n    ARGV[3] job id\n    ARGV[4] lifo\n    Output:\n       0  - OK\n      -1  - Missing job\n]]\nlocal jobId = ARGV[3]\nlocal jobKey = ARGV[2] .. jobId\nlocal priority = tonumber(ARGV[1])\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\nlocal function reAddJobWithNewPriority( prioritizedKey, markerKey, targetKey,\n    priorityCounter, lifo, priority, jobId, isPausedOrMaxed)\n    if priority == 0 then\n        local pushCmd = lifo and 'RPUSH' or 'LPUSH'\n        addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n    else\n        if lifo then\n            pushBackJobWithPriority(prioritizedKey, priority, jobId)\n        else\n            addJobWithPriority(markerKey, prioritizedKey, priority, jobId,\n                priorityCounter, isPausedOrMaxed)\n        end\n    end\nend\nif rcall(\"EXISTS\", jobKey) == 1 then\n    local metaKey = KEYS[3]\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[5], KEYS[1], KEYS[2])\n    local prioritizedKey = KEYS[4]\n    local priorityCounterKey = KEYS[6]\n    local markerKey = KEYS[7]\n    -- Re-add with the new priority\n    if rcall(\"ZREM\", prioritizedKey, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    elseif rcall(\"LREM\", target, -1, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    end\n    rcall(\"HSET\", jobKey, \"priority\", priority)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":7,"readOnly":false,"sha":"0712f368ed58c17e481d319f364e46cbf665b95b"},"cleanJobsInSet:5.23.0":{"keyPrefix":"","lua":"--[[\n  Remove jobs from the specific set.\n  Input:\n    KEYS[1]  set key,\n    KEYS[2]  events stream key\n    KEYS[3]  job schedulers key\n    ARGV[1]  jobKey prefix\n    ARGV[2]  timestamp\n    ARGV[3]  limit the number of jobs to be removed. 0 is unlimited\n    ARGV[4]  set name, can be any of 'wait', 'active', 'paused', 'delayed', 'completed', or 'failed'\n]]\nlocal rcall = redis.call\nlocal rangeStart = 0\nlocal rangeEnd = -1\nlocal limit = tonumber(ARGV[3])\n-- If we're only deleting _n_ items, avoid retrieving all items\n-- for faster performance\n--\n-- Start from the tail of the list, since that's where oldest elements\n-- are generally added for FIFO lists\nif limit > 0 then\n  rangeStart = -1 - limit + 1\n  rangeEnd = -1\nend\n-- Includes\n--[[\n  Function to clean job list.\n  Returns jobIds and deleted count number.\n]]\n-- Includes\n--[[\n  Function to get the latest saved timestamp.\n]]\nlocal function getTimestamp(jobKey, attributes)\n  if #attributes == 1 then\n    return rcall(\"HGET\", jobKey, attributes[1])\n  end\n  local jobTs\n  for _, ts in ipairs(rcall(\"HMGET\", jobKey, unpack(attributes))) do\n    if (ts) then\n      jobTs = ts\n      break\n    end\n  end\n  return jobTs\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function cleanList(listKey, jobKeyPrefix, rangeStart, rangeEnd,\n  timestamp, isWaiting)\n  local jobs = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  local deleted = {}\n  local deletedCount = 0\n  local jobTS\n  local deletionMarker = ''\n  local jobIdsLen = #jobs\n  for i, job in ipairs(jobs) do\n    if limit > 0 and deletedCount >= limit then\n      break\n    end\n    local jobKey = jobKeyPrefix .. job\n    if (isWaiting or rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n      -- Find the right timestamp of the job to compare to maxTimestamp:\n      -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n      -- * processedOn represents when the job was last attempted, but it doesn't get populated until\n      --   the job is first tried\n      -- * timestamp is the original job submission time\n      -- Fetch all three of these (in that order) and use the first one that is set so that we'll leave jobs\n      -- that have been active within the grace period:\n      jobTS = getTimestamp(jobKey, {\"finishedOn\", \"processedOn\", \"timestamp\"})\n      if (not jobTS or jobTS <= timestamp) then\n        -- replace the entry with a deletion marker; the actual deletion will\n        -- occur at the end of the script\n        rcall(\"LSET\", listKey, rangeEnd - jobIdsLen + i, deletionMarker)\n        removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]])\n        deletedCount = deletedCount + 1\n        table.insert(deleted, job)\n      end\n    end\n  end\n  rcall(\"LREM\", listKey, 0, deletionMarker)\n  return {deleted, deletedCount}\nend\n--[[\n  Function to clean job set.\n  Returns jobIds and deleted count number.\n]] \n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  We use ZRANGEBYSCORE to make the case where we're deleting a limited number\n  of items in a sorted set only run a single iteration. If we simply used\n  ZRANGE, we may take a long time traversing through jobs that are within the\n  grace period.\n]]\nlocal function getJobsInZset(zsetKey, rangeEnd, limit)\n  if limit > 0 then\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd, \"LIMIT\", 0, limit)\n  else\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd)\n  end\nend\nlocal function isJobSchedulerJob(jobId, jobSchedulersKey)\n    if jobSchedulersKey then\n        local jobSchedulerId = jobId:match(\"repeat:(.*):%d+\")\n        if jobSchedulerId then\n            return rcall(\"ZSCORE\", jobSchedulersKey, jobSchedulerId)\n        end\n    end\n    return false\nend\nlocal function cleanSet(\n    setKey,\n    jobKeyPrefix,\n    rangeEnd,\n    timestamp,\n    limit,\n    attributes,\n    isFinished,\n    jobSchedulersKey)\n    local jobs = getJobsInZset(setKey, rangeEnd, limit)\n    local deleted = {}\n    local deletedCount = 0\n    local jobTS\n    for i, job in ipairs(jobs) do\n        if limit > 0 and deletedCount >= limit then\n            break\n        end\n        -- Extract a Job Scheduler Id from jobId (\"repeat:job-scheduler-id:millis\") \n        -- and check if it is in the scheduled jobs\n        if not isJobSchedulerJob(job, jobSchedulersKey) then\n            local jobKey = jobKeyPrefix .. job\n            if isFinished then\n                removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                deletedCount = deletedCount + 1\n                table.insert(deleted, job)\n            else\n                -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n                jobTS = getTimestamp(jobKey, attributes)\n                if (not jobTS or jobTS <= timestamp) then\n                    removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                    deletedCount = deletedCount + 1\n                    table.insert(deleted, job)\n                end\n            end\n        end\n    end\n    if (#deleted > 0) then\n        for from, to in batches(#deleted, 7000) do\n            rcall(\"ZREM\", setKey, unpack(deleted, from, to))\n        end\n    end\n    return {deleted, deletedCount}\nend\nlocal result\nif ARGV[4] == \"active\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], false --[[ hasFinished ]])\nelseif ARGV[4] == \"delayed\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"processedOn\", \"timestamp\"}, false  --[[ hasFinished ]], KEYS[3])\nelseif ARGV[4] == \"prioritized\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"timestamp\"}, false  --[[ hasFinished ]])\nelseif ARGV[4] == \"wait\" or ARGV[4] == \"paused\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], true --[[ hasFinished ]])\nelse\n  rangeEnd = ARGV[2]\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"finishedOn\"}, true  --[[ hasFinished ]])\nend\nrcall(\"XADD\", KEYS[2], \"*\", \"event\", \"cleaned\", \"count\", result[2])\nreturn result[1]\n","numberOfKeys":3,"readOnly":false,"sha":"1a81e85ab6be2d531f463ccc8ab17a81b858dcdb"},"drain:5.23.0":{"keyPrefix":"","lua":"--[[\n  Drains the queue, removes all jobs that are waiting\n  or delayed, but not active, completed or failed\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'delayed'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'jobschedulers' (repeat)\n    ARGV[1]  queue key prefix\n]]\nlocal rcall = redis.call\nlocal queueBaseKey = ARGV[1]\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nremoveListJobs(KEYS[1], true, queueBaseKey, 0) -- wait\nremoveListJobs(KEYS[2], true, queueBaseKey, 0) -- paused\nif KEYS[3] ~= \"\" then\n    -- We must not remove delayed jobs if they are associated to a job scheduler.\n    local scheduledJobs = {}\n    local jobSchedulers = rcall(\"ZRANGE\", KEYS[5], 0, -1, \"WITHSCORES\")\n    -- For every job scheduler, get the current delayed job id.\n    for i = 1, #jobSchedulers, 2 do\n        local jobSchedulerId = jobSchedulers[i]\n        local jobSchedulerMillis = jobSchedulers[i + 1]\n        local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. jobSchedulerMillis\n        scheduledJobs[delayedJobId] = true\n    end\n    removeZSetJobs(KEYS[3], true, queueBaseKey, 0, scheduledJobs) -- delayed\nend\nremoveZSetJobs(KEYS[4], true, queueBaseKey, 0) -- prioritized\n","numberOfKeys":5,"readOnly":false,"sha":"cde4aa2dbd6d7545a57a6dd8684ad9448e0ae387"},"extendLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Extend lock and removes the job from the stalled set.\n  Input:\n    KEYS[1] 'lock',\n    KEYS[2] 'stalled'\n    ARGV[1]  token\n    ARGV[2]  lock duration in milliseconds\n    ARGV[3]  jobid\n  Output:\n    \"1\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  --   if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2], \"XX\") then\n  if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2]) then\n    rcall(\"SREM\", KEYS[2], ARGV[3])\n    return 1\n  end\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"99b6eb3d7a4777fb2271fd6cdf3ac5a290a4aac4"},"getCounts:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1...] types\n]]\nlocal rcall = redis.call;\nlocal prefix = KEYS[1]\nlocal results = {}\nfor i = 1, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        results[#results+1] = count-1\n      else\n        results[#results+1] = 0\n      end\n    else\n      results[#results+1] = rcall(\"LLEN\", stateKey)\n    end\n  elseif ARGV[i] == \"active\" then\n    results[#results+1] = rcall(\"LLEN\", stateKey)\n  else\n    results[#results+1] = rcall(\"ZCARD\", stateKey)\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"a8034c631460c6803c87966ce881636246de2398"},"getCountsPerPriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1] wait key\n      KEYS[2] paused key\n      KEYS[3] meta key\n      KEYS[4] prioritized key\n      ARGV[1...] priorities\n]]\nlocal rcall = redis.call\nlocal results = {}\nlocal waitKey = KEYS[1]\nlocal pausedKey = KEYS[2]\nlocal prioritizedKey = KEYS[4]\n-- Includes\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePaused(queueMetaKey)\n  return rcall(\"HEXISTS\", queueMetaKey, \"paused\") == 1\nend\nfor i = 1, #ARGV do\n  local priority = tonumber(ARGV[i])\n  if priority == 0 then\n    if isQueuePaused(KEYS[3]) then\n      results[#results+1] = rcall(\"LLEN\", pausedKey)\n    else\n      results[#results+1] = rcall(\"LLEN\", waitKey)\n    end\n  else\n    results[#results+1] = rcall(\"ZCOUNT\", prioritizedKey,\n      priority * 0x100000000, (priority + 1)  * 0x100000000 - 1)\n  end\nend\nreturn results\n","numberOfKeys":4,"readOnly":false,"sha":"0d3cc488e178c7c757e27ee35b04e6486f7b392a"},"getRanges:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get job ids per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1]    start\n      ARGV[2]    end\n      ARGV[3]    asc\n      ARGV[4...] types\n]]\nlocal rcall = redis.call\nlocal prefix = KEYS[1]\nlocal rangeStart = tonumber(ARGV[1])\nlocal rangeEnd = tonumber(ARGV[2])\nlocal asc = ARGV[3]\nlocal results = {}\nlocal function getRangeInList(listKey, asc, rangeStart, rangeEnd, results)\n  if asc == \"1\" then\n    local modifiedRangeStart\n    local modifiedRangeEnd\n    if rangeStart == -1 then\n      modifiedRangeStart = 0\n    else\n      modifiedRangeStart = -(rangeStart + 1)\n    end\n    if rangeEnd == -1 then\n      modifiedRangeEnd = 0\n    else\n      modifiedRangeEnd = -(rangeEnd + 1)\n    end\n    results[#results+1] = rcall(\"LRANGE\", listKey,\n      modifiedRangeEnd,\n      modifiedRangeStart)\n  else\n    results[#results+1] = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  end\nend\nfor i = 4, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n      else\n        results[#results+1] = {}\n      end\n    else\n      getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n    end\n  elseif ARGV[i] == \"active\" then\n    getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n  else\n    if asc == \"1\" then\n      results[#results+1] = rcall(\"ZRANGE\", stateKey, rangeStart, rangeEnd)\n    else\n      results[#results+1] = rcall(\"ZREVRANGE\", stateKey, rangeStart, rangeEnd)\n    end\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"8ead3c08a7bde7653892f14e44385d448a0f291c"},"getRateLimitTtl:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get rate limit ttl\n    Input:\n      KEYS[1] 'limiter'\n      ARGV[1] maxJobs\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\nlocal rateLimiterKey = KEYS[1]\nif ARGV[1] ~= \"0\" then\n  return getRateLimitTTL(tonumber(ARGV[1]), rateLimiterKey)\nelse\n  return rcall(\"PTTL\", rateLimiterKey)\nend\n","numberOfKeys":1,"readOnly":false,"sha":"92372d939896ee53f841c7ba94305e56a871786f"},"getState:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'prioritized'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal active_items = rcall(\"LRANGE\", KEYS[4] , 0, -1)\nif checkItemInList(active_items, ARGV[1]) ~= nil then\n  return \"active\"\nend\nlocal wait_items = rcall(\"LRANGE\", KEYS[5] , 0, -1)\nif checkItemInList(wait_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nlocal paused_items = rcall(\"LRANGE\", KEYS[6] , 0, -1)\nif checkItemInList(paused_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7], ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"8857a088a8555cf7fb21513a66531eb00cf8932d"},"getStateV2:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\nif rcall(\"LPOS\", KEYS[4] , ARGV[1]) ~= false then\n  return \"active\"\nend\nif rcall(\"LPOS\", KEYS[5] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"LPOS\", KEYS[6] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7] , ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"f7064020cc18bc64f3d44da9b89581294f7a67d3"},"isFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if a job is finished (.i.e. is in the completed or failed set)\n  Input: \n    KEYS[1] completed key\n    KEYS[2] failed key\n    KEYS[3] job key\n    ARGV[1] job id\n    ARGV[2] return value?\n  Output:\n    0 - Not finished.\n    1 - Completed.\n    2 - Failed.\n   -1 - Missing job. \n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[3]) ~= 1 then\n  if ARGV[2] == \"1\" then\n    return {-1,\"Missing key for job \" .. KEYS[3] .. \". isFinished\"}\n  end  \n  return -1\nend\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local returnValue = rcall(\"HGET\", KEYS[3], \"returnvalue\")\n    return {1,returnValue}\n  end\n  return 1\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local failedReason = rcall(\"HGET\", KEYS[3], \"failedReason\")\n    return {2,failedReason}\n  end\n  return 2\nend\nif ARGV[2] == \"1\" then\n  return {0}\nend\nreturn 0\n","numberOfKeys":3,"readOnly":false,"sha":"fdea3cb84e6f9aa18dd37ab7d710874c5828eb52"},"isJobInList:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if job is in a given list.\n  Input:\n    KEYS[1]\n    ARGV[1]\n  Output:\n    1 if element found in the list.\n]]\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal items = redis.call(\"LRANGE\", KEYS[1] , 0, -1)\nreturn checkItemInList(items, ARGV[1])\n","numberOfKeys":1,"readOnly":false,"sha":"7fafc57c06446598a2e9e21a718f11559c3b74c7"},"isMaxed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if queue is maxed.\n  Input:\n    KEYS[1] meta key\n    KEYS[2] active key\n  Output:\n    1 if element found in the list.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to check if queue is maxed or not.\n]]\nlocal function isQueueMaxed(queueMetaKey, activeKey)\n  local maxConcurrency = rcall(\"HGET\", queueMetaKey, \"concurrency\")\n  if maxConcurrency then\n    local activeCount = rcall(\"LLEN\", activeKey)\n    if activeCount >= tonumber(maxConcurrency) then\n      return true\n    end\n  end\n  return false\nend\nreturn isQueueMaxed(KEYS[1], KEYS[2])\n","numberOfKeys":2,"readOnly":false,"sha":"915456b98cefd4cfc19cf99a50d73bde41a27b6c"},"moveJobFromActiveToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Function to move job from active state to wait.\n  Input:\n    KEYS[1]  active key\n    KEYS[2]  wait key\n    KEYS[3]  stalled key\n    KEYS[4]  job lock key\n    KEYS[5]  paused key\n    KEYS[6]  meta key\n    KEYS[7]  limiter key\n    KEYS[8]  prioritized key\n    KEYS[9]  marker key\n    KEYS[10] event key\n    ARGV[1] job id\n    ARGV[2] lock token\n    ARGV[3] job id key\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal jobId = ARGV[1]\nlocal token = ARGV[2]\nlocal lockKey = KEYS[4]\nlocal lockToken = rcall(\"GET\", lockKey)\nlocal pttl = rcall(\"PTTL\", KEYS[7])\nif lockToken == token then\n  local metaKey = KEYS[6]\n  local removed = rcall(\"LREM\", KEYS[1], 1, jobId)\n  if removed > 0 then\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[1], KEYS[2], KEYS[5])\n    rcall(\"SREM\", KEYS[3], jobId)\n    local priority = tonumber(rcall(\"HGET\", ARGV[3], \"priority\")) or 0\n    if priority > 0 then\n      pushBackJobWithPriority(KEYS[8], priority, jobId)\n    else\n      addJobInTargetList(target, KEYS[9], \"RPUSH\", isPausedOrMaxed, jobId)\n    end\n    rcall(\"DEL\", lockKey)\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[10], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n  end\nend\nreturn pttl\n","numberOfKeys":10,"readOnly":false,"sha":"546b74fe67e4c131992799dac9ba737c553ea95f"},"moveJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move completed, failed or delayed jobs to wait.\n  Note: Does not support jobs with priorities.\n  Input:\n    KEYS[1] base key\n    KEYS[2] events stream\n    KEYS[3] state key (failed, completed, delayed)\n    KEYS[4] 'wait'\n    KEYS[5] 'paused'\n    KEYS[6] 'meta'\n    KEYS[7] 'active'\n    KEYS[8] 'marker'\n    ARGV[1] count\n    ARGV[2] timestamp\n    ARGV[3] prev state\n  Output:\n    1  means the operation is not completed\n    0  means the operation is completed\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal timestamp = tonumber(ARGV[2])\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal metaKey = KEYS[6]\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[7], KEYS[4], KEYS[5])\nlocal jobs = rcall('ZRANGEBYSCORE', KEYS[3], 0, timestamp, 'LIMIT', 0, maxCount)\nif (#jobs > 0) then\n    if ARGV[3] == \"failed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"failedReason\")\n        end\n    elseif ARGV[3] == \"completed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"returnvalue\")\n        end\n    end\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    for i, key in ipairs(jobs) do\n        -- Emit waiting event\n        rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n              \"waiting\", \"jobId\", key, \"prev\", ARGV[3]);\n    end\n    for from, to in batches(#jobs, 7000) do\n        rcall(\"ZREM\", KEYS[3], unpack(jobs, from, to))\n        rcall(\"LPUSH\", target, unpack(jobs, from, to))\n    end\n    addBaseMarkerIfNeeded(KEYS[8], isPausedOrMaxed)\nend\nmaxCount = maxCount - #jobs\nif (maxCount <= 0) then return 1 end\nreturn 0\n","numberOfKeys":8,"readOnly":false,"sha":"655fa4396927ac2e4239ae18746a6c053c05c5d5"},"moveStalledJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move stalled jobs to wait.\n    Input:\n      KEYS[1] 'stalled' (SET)\n      KEYS[2] 'wait',   (LIST)\n      KEYS[3] 'active', (LIST)\n      KEYS[4] 'failed', (ZSET)\n      KEYS[5] 'stalled-check', (KEY)\n      KEYS[6] 'meta', (KEY)\n      KEYS[7] 'paused', (LIST)\n      KEYS[8] 'marker'\n      KEYS[9] 'event stream' (STREAM)\n      ARGV[1]  Max stalled job count\n      ARGV[2]  queue.toKey('')\n      ARGV[3]  timestamp\n      ARGV[4]  max check time\n    Events:\n      'stalled' with stalled job id.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\nlocal stalledKey = KEYS[1]\nlocal waitKey = KEYS[2]\nlocal activeKey = KEYS[3]\nlocal failedKey = KEYS[4]\nlocal stalledCheckKey = KEYS[5]\nlocal metaKey = KEYS[6]\nlocal pausedKey = KEYS[7]\nlocal markerKey = KEYS[8]\nlocal eventStreamKey = KEYS[9]\nlocal maxStalledJobCount = tonumber(ARGV[1])\nlocal queueKeyPrefix = ARGV[2]\nlocal timestamp = ARGV[3]\nlocal maxCheckTime = ARGV[4]\nif rcall(\"EXISTS\", stalledCheckKey) == 1 then return {{}, {}} end\nrcall(\"SET\", stalledCheckKey, timestamp, \"PX\", maxCheckTime)\n-- Trim events before emiting them to avoid trimming events emitted in this script\ntrimEvents(metaKey, eventStreamKey)\n-- Move all stalled jobs to wait\nlocal stalling = rcall('SMEMBERS', stalledKey)\nlocal stalled = {}\nlocal failed = {}\nif (#stalling > 0) then\n    rcall('DEL', stalledKey)\n    -- Remove from active list\n    for i, jobId in ipairs(stalling) do\n        -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n        if string.sub(jobId, 1, 2) == \"0:\" then\n            -- If the jobId is a delay marker ID we just remove it.\n            rcall(\"LREM\", activeKey, 1, jobId)\n        else\n            local jobKey = queueKeyPrefix .. jobId\n            -- Check that the lock is also missing, then we can handle this job as really stalled.\n            if (rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n                --  Remove from the active queue.\n                local removed = rcall(\"LREM\", activeKey, 1, jobId)\n                if (removed > 0) then\n                    -- If this job has been stalled too many times, such as if it crashes the worker, then fail it.\n                    local stalledCount =\n                        rcall(\"HINCRBY\", jobKey, \"stalledCounter\", 1)\n                    if (stalledCount > maxStalledJobCount) then\n                        local jobAttributes = rcall(\"HMGET\", jobKey, \"opts\", \"parent\", \"deid\")\n                        local rawOpts = jobAttributes[1]\n                        local rawParentData = jobAttributes[2]\n                        local opts = cjson.decode(rawOpts)\n                        local removeOnFailType = type(opts[\"removeOnFail\"])\n                        rcall(\"ZADD\", failedKey, timestamp, jobId)\n                        removeDeduplicationKeyIfNeeded(queueKeyPrefix, jobAttributes[3])\n                        local failedReason =\n                            \"job stalled more than allowable limit\"\n                        rcall(\"HMSET\", jobKey, \"failedReason\", failedReason,\n                              \"finishedOn\", timestamp)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"failed\", \"jobId\", jobId, 'prev', 'active',\n                              'failedReason', failedReason)\n                        if rawParentData ~= false then\n                            if opts['fpof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                moveParentFromWaitingChildrenToFailed(\n                                    parentData['queueKey'],\n                                    parentData['queueKey'] .. ':' .. parentData['id'],\n                                    parentData['id'],\n                                    jobKey,\n                                    timestamp\n                                )\n                            elseif opts['idof'] or opts['rdof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                local parentKey = parentData['queueKey'] .. ':' .. parentData['id']\n                                local dependenciesSet = parentKey .. \":dependencies\"\n                                if rcall(\"SREM\", dependenciesSet, jobKey) == 1 then\n                                    moveParentToWaitIfNeeded(parentData['queueKey'], dependenciesSet,\n                                                             parentKey, parentData['id'], timestamp)\n                                    if opts['idof'] then\n                                       local failedSet = parentKey .. \":failed\"\n                                       rcall(\"HSET\", failedSet, jobKey, failedReason)\n                                    end\n                                end\n                            end\n                        end\n                        if removeOnFailType == \"number\" then\n                            removeJobsByMaxCount(opts[\"removeOnFail\"],\n                                                  failedKey, queueKeyPrefix)\n                        elseif removeOnFailType == \"boolean\" then\n                            if opts[\"removeOnFail\"] then\n                                removeJob(jobId, false, queueKeyPrefix,\n                                  false --[[remove debounce key]])\n                                rcall(\"ZREM\", failedKey, jobId)\n                            end\n                        elseif removeOnFailType ~= \"nil\" then\n                            local maxAge = opts[\"removeOnFail\"][\"age\"]\n                            local maxCount = opts[\"removeOnFail\"][\"count\"]\n                            if maxAge ~= nil then\n                                removeJobsByMaxAge(timestamp, maxAge,\n                                                    failedKey, queueKeyPrefix)\n                            end\n                            if maxCount ~= nil and maxCount > 0 then\n                                removeJobsByMaxCount(maxCount, failedKey,\n                                                      queueKeyPrefix)\n                            end\n                        end\n                        table.insert(failed, jobId)\n                    else\n                        local target, isPausedOrMaxed =\n                            getTargetQueueList(metaKey, activeKey, waitKey, pausedKey)\n                        -- Move the job back to the wait queue, to immediately be picked up by a waiting worker.\n                        addJobInTargetList(target, markerKey, \"RPUSH\", isPausedOrMaxed, jobId)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"waiting\", \"jobId\", jobId, 'prev', 'active')\n                        -- Emit the stalled event\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"stalled\", \"jobId\", jobId)\n                        table.insert(stalled, jobId)\n                    end\n                end\n            end\n        end\n    end\nend\n-- Mark potentially stalled jobs\nlocal active = rcall('LRANGE', activeKey, 0, -1)\nif (#active > 0) then\n    for from, to in batches(#active, 7000) do\n        rcall('SADD', stalledKey, unpack(active, from, to))\n    end\nend\nreturn {failed, stalled}","numberOfKeys":9,"readOnly":false,"sha":"b06d5ab6576efcc0e07c6fa2f57923659b3e4a08"},"moveToActive:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move next job to be processed to active, lock it and fetch its data. The job\n  may be delayed, in that case we need to move it to the delayed set instead.\n  This operation guarantees that the worker owns the job during the lock\n  expiration time. The worker is responsible of keeping the lock fresh\n  so that no other worker picks this job again.\n  Input:\n    KEYS[1] wait key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] stream events key\n    KEYS[5] stalled key\n    -- Rate limiting\n    KEYS[6] rate limiter key\n    KEYS[7] delayed key\n    -- Delayed jobs\n    KEYS[8] paused key\n    KEYS[9] meta key\n    KEYS[10] pc priority counter\n    -- Marker\n    KEYS[11] marker key\n    -- Arguments\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] opts\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal rcall = redis.call\nlocal waitKey = KEYS[1]\nlocal activeKey = KEYS[2]\nlocal eventStreamKey = KEYS[4]\nlocal rateLimiterKey = KEYS[6]\nlocal delayedKey = KEYS[7]\nlocal opts = cmsgpack.unpack(ARGV[3])\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[9], activeKey, waitKey, KEYS[8])\n-- Check if there are delayed jobs that we can move to wait.\nlocal markerKey = KEYS[11]\npromoteDelayedJobs(delayedKey, markerKey, target, KEYS[3], eventStreamKey, ARGV[1],\n                   ARGV[2], KEYS[10], isPausedOrMaxed)\nlocal maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\nlocal expireTime = getRateLimitTTL(maxJobs, rateLimiterKey)\n-- Check if we are rate limited first.\nif expireTime > 0 then return {0, 0, expireTime, 0} end\n-- paused or maxed queue\nif isPausedOrMaxed then return {0, 0, 0, 0} end\n-- no job ID, try non-blocking move from wait to active\nlocal jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\n-- Markers in waitlist DEPRECATED in v5: Will be completely removed in v6.\nif jobId and string.sub(jobId, 1, 2) == \"0:\" then\n    rcall(\"LREM\", activeKey, 1, jobId)\n    jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\nend\nif jobId then\n    return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                   maxJobs, opts)\nelse\n    jobId = moveJobFromPriorityToActive(KEYS[3], activeKey, KEYS[10])\n    if jobId then\n        return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                       maxJobs, opts)\n    end\nend\n-- Return the timestamp for the next delayed job if any.\nlocal nextTimestamp = getNextDelayedTimestamp(delayedKey)\nif nextTimestamp ~= nil then return {0, 0, 0, nextTimestamp} end\nreturn {0, 0, 0, 0}\n","numberOfKeys":11,"readOnly":false,"sha":"accb36ea979fc4cd20f4a56e3c4ad6df0ec0b14a"},"moveToDelayed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to delayed set.\n  Input:\n    KEYS[1] marker key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] delayed key\n    KEYS[5] job key\n    KEYS[6] events stream\n    KEYS[7] meta key\n    KEYS[8] stalled key\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] queue token\n    ARGV[5] delay value\n    ARGV[6] skip attempt\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in active set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal jobKey = KEYS[5]\nlocal metaKey = KEYS[7]\nlocal token = ARGV[4] \nif rcall(\"EXISTS\", jobKey) == 1 then\n    local errorCode = removeLock(jobKey, KEYS[8], token, ARGV[3])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local delayedKey = KEYS[4]\n    local jobId = ARGV[3]\n    local delay = tonumber(ARGV[5])\n    local score, delayedTimestamp = getDelayedScore(delayedKey, ARGV[2], delay)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if numRemovedElements < 1 then return -3 end\n    if ARGV[6] == \"0\" then\n        rcall(\"HINCRBY\", jobKey, \"atm\", 1)\n    end\n    rcall(\"HSET\", jobKey, \"delay\", ARGV[5])\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    rcall(\"ZADD\", delayedKey, score, jobId)\n    rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n          \"jobId\", jobId, \"delay\", delayedTimestamp)\n    -- Check if we need to push a marker job to wake up sleeping workers.\n    local markerKey = KEYS[1]\n    addDelayMarkerIfNeeded(markerKey, delayedKey)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"b54cf2d23990cd8eb373f262044967845d31c6a9"},"moveToFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move job from active to a finished status (completed o failed)\n  A job can only be moved to completed if it was active.\n  The job must be locked before it can be moved to a finished status,\n  and the lock must be released in this script.\n    Input:\n      KEYS[1] wait key\n      KEYS[2] active key\n      KEYS[3] prioritized key\n      KEYS[4] event stream key\n      KEYS[5] stalled key\n      -- Rate limiting\n      KEYS[6] rate limiter key\n      KEYS[7] delayed key\n      KEYS[8] paused key\n      KEYS[9] meta key\n      KEYS[10] pc priority counter\n      KEYS[11] completed/failed key\n      KEYS[12] jobId key\n      KEYS[13] metrics key\n      KEYS[14] marker key\n      ARGV[1]  jobId\n      ARGV[2]  timestamp\n      ARGV[3]  msg property returnvalue / failedReason\n      ARGV[4]  return value / failed reason\n      ARGV[5]  target (completed/failed)\n      ARGV[6]  fetch next?\n      ARGV[7]  keys prefix\n      ARGV[8]  opts\n      opts - token - lock token\n      opts - keepJobs\n      opts - lockDuration - lock duration in milliseconds\n      opts - attempts max attempts\n      opts - maxMetricsSize\n      opts - fpof - fail parent on fail\n      opts - idof - ignore dependency on fail\n      opts - rdof - remove dependency on fail\n    Output:\n      0 OK\n      -1 Missing key.\n      -2 Missing lock.\n      -3 Job not in active set\n      -4 Job has pending dependencies\n      -6 Lock is not owned by this client\n    Events:\n      'completed/failed'\n]]\nlocal rcall = redis.call\n--- Includes\n--[[\n  Functions to collect metrics based on a current and previous count of jobs.\n  Granualarity is fixed at 1 minute.\n]] \n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\nlocal function collectMetrics(metaKey, dataPointsList, maxDataPoints,\n                                 timestamp)\n    -- Increment current count\n    local count = rcall(\"HINCRBY\", metaKey, \"count\", 1) - 1\n    -- Compute how many data points we need to add to the list, N.\n    local prevTS = rcall(\"HGET\", metaKey, \"prevTS\")\n    if not prevTS then\n        -- If prevTS is nil, set it to the current timestamp\n        rcall(\"HSET\", metaKey, \"prevTS\", timestamp, \"prevCount\", 0)\n        return\n    end\n    local N = math.min(math.floor(timestamp / 60000) - math.floor(prevTS / 60000), tonumber(maxDataPoints))\n    if N > 0 then\n        local delta = count - rcall(\"HGET\", metaKey, \"prevCount\")\n        -- If N > 1, add N-1 zeros to the list\n        if N > 1 then\n            local points = {}\n            points[1] = delta\n            for i = 2, N do\n                points[i] = 0\n            end\n            for from, to in batches(#points, 7000) do\n                rcall(\"LPUSH\", dataPointsList, unpack(points, from, to))\n            end\n        else\n            -- LPUSH delta to the list\n            rcall(\"LPUSH\", dataPointsList, delta)\n        end\n        -- LTRIM to keep list to its max size\n        rcall(\"LTRIM\", dataPointsList, 0, maxDataPoints - 1)\n        -- update prev count with current count\n        rcall(\"HSET\", metaKey, \"prevCount\", count, \"prevTS\", timestamp)\n    end\nend\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal jobIdKey = KEYS[12]\nif rcall(\"EXISTS\", jobIdKey) == 1 then -- // Make sure job exists\n    local opts = cmsgpack.unpack(ARGV[8])\n    local token = opts['token']\n    local errorCode = removeLock(jobIdKey, KEYS[5], token, ARGV[1])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local attempts = opts['attempts']\n    local maxMetricsSize = opts['maxMetricsSize']\n    local maxCount = opts['keepJobs']['count']\n    local maxAge = opts['keepJobs']['age']\n    if rcall(\"SCARD\", jobIdKey .. \":dependencies\") ~= 0 then -- // Make sure it does not have pending dependencies\n        return -4\n    end\n    local jobAttributes = rcall(\"HMGET\", jobIdKey, \"parentKey\", \"parent\", \"deid\")\n    local parentKey = jobAttributes[1] or \"\"\n    local parentId = \"\"\n    local parentQueueKey = \"\"\n    if jobAttributes[2] ~= false then\n        local jsonDecodedParent = cjson.decode(jobAttributes[2])\n        parentId = jsonDecodedParent['id']\n        parentQueueKey = jsonDecodedParent['queueKey']\n    end\n    local jobId = ARGV[1]\n    local timestamp = ARGV[2]\n    -- Remove from active list (if not active we shall return error)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if (numRemovedElements < 1) then return -3 end\n    local eventStreamKey = KEYS[4]\n    local metaKey = KEYS[9]\n    -- Trim events before emiting them to avoid trimming events emitted in this script\n    trimEvents(metaKey, eventStreamKey)\n    local prefix = ARGV[7]\n    removeDeduplicationKeyIfNeeded(prefix, jobAttributes[3])\n    -- If job has a parent we need to\n    -- 1) remove this job id from parents dependencies\n    -- 2) move the job Id to parent \"processed\" set\n    -- 3) push the results into parent \"results\" list\n    -- 4) if parent's dependencies is empty, then move parent to \"wait/paused\". Note it may be a different queue!.\n    if parentId == \"\" and parentKey ~= \"\" then\n        parentId = getJobIdFromKey(parentKey)\n        parentQueueKey = getJobKeyPrefix(parentKey, \":\" .. parentId)\n    end\n    if parentId ~= \"\" then\n        if ARGV[5] == \"completed\" then\n            local dependenciesSet = parentKey .. \":dependencies\"\n            if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                updateParentDepsIfNeeded(parentKey, parentQueueKey,\n                                         dependenciesSet, parentId, jobIdKey,\n                                         ARGV[4], timestamp)\n            end\n        else\n            if opts['fpof'] then\n                moveParentFromWaitingChildrenToFailed(parentQueueKey, parentKey,\n                                                      parentId, jobIdKey,\n                                                      timestamp)\n            elseif opts['idof'] or opts['rdof'] then\n                local dependenciesSet = parentKey .. \":dependencies\"\n                if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                    moveParentToWaitIfNeeded(parentQueueKey, dependenciesSet,\n                                             parentKey, parentId, timestamp)\n                    if opts['idof'] then\n                        local failedSet = parentKey .. \":failed\"\n                        rcall(\"HSET\", failedSet, jobIdKey, ARGV[4])\n                    end\n                end\n            end\n        end\n    end\n    local attemptsMade = rcall(\"HINCRBY\", jobIdKey, \"atm\", 1)\n    -- Remove job?\n    if maxCount ~= 0 then\n        local targetSet = KEYS[11]\n        -- Add to complete/failed set\n        rcall(\"ZADD\", targetSet, timestamp, jobId)\n        rcall(\"HMSET\", jobIdKey, ARGV[3], ARGV[4], \"finishedOn\", timestamp)\n        -- \"returnvalue\" / \"failedReason\" and \"finishedOn\"\n        -- Remove old jobs?\n        if maxAge ~= nil then\n            removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix)\n        end\n        if maxCount ~= nil and maxCount > 0 then\n            removeJobsByMaxCount(maxCount, targetSet, prefix)\n        end\n    else\n        removeJobKeys(jobIdKey)\n        if parentKey ~= \"\" then\n            -- TODO: when a child is removed when finished, result or failure in parent\n            -- must not be deleted, those value references should be deleted when the parent\n            -- is deleted\n            removeParentDependencyKey(jobIdKey, false, parentKey, jobAttributes[3])\n        end\n    end\n    rcall(\"XADD\", eventStreamKey, \"*\", \"event\", ARGV[5], \"jobId\", jobId, ARGV[3],\n          ARGV[4])\n    if ARGV[5] == \"failed\" then\n        if tonumber(attemptsMade) >= tonumber(attempts) then\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"retries-exhausted\", \"jobId\",\n                  jobId, \"attemptsMade\", attemptsMade)\n        end\n    end\n    -- Collect metrics\n    if maxMetricsSize ~= \"\" then\n        collectMetrics(KEYS[13], KEYS[13] .. ':data', maxMetricsSize, timestamp)\n    end\n    -- Try to get next job to avoid an extra roundtrip if the queue is not closing,\n    -- and not rate limited.\n    if (ARGV[6] == \"1\") then\n        local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[2], KEYS[1], KEYS[8])\n        -- Check if there are delayed jobs that can be promoted\n        promoteDelayedJobs(KEYS[7], KEYS[14], target, KEYS[3], eventStreamKey, prefix,\n                           timestamp, KEYS[10], isPausedOrMaxed)\n        local maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\n        -- Check if we are rate limited first.\n        local expireTime = getRateLimitTTL(maxJobs, KEYS[6])\n        if expireTime > 0 then return {0, 0, expireTime, 0} end\n        -- paused or maxed queue\n        if isPausedOrMaxed then return {0, 0, 0, 0} end\n        jobId = rcall(\"RPOPLPUSH\", KEYS[1], KEYS[2])\n        if jobId then\n            -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n            if string.sub(jobId, 1, 2) == \"0:\" then\n                rcall(\"LREM\", KEYS[2], 1, jobId)\n                -- If jobId is special ID 0:delay (delay greater than 0), then there is no job to process\n                -- but if ID is 0:0, then there is at least 1 prioritized job to process\n                if jobId == \"0:0\" then\n                    jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2],\n                                                        KEYS[10])\n                    return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                                   timestamp, maxJobs,\n                                                   opts)\n                end\n            else\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        else\n            jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2], KEYS[10])\n            if jobId then\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        end\n        -- Return the timestamp for the next delayed job if any.\n        local nextTimestamp = getNextDelayedTimestamp(KEYS[7])\n        if nextTimestamp ~= nil then\n            -- The result is guaranteed to be positive, since the\n            -- ZRANGEBYSCORE command would have return a job otherwise.\n            return {0, 0, 0, nextTimestamp}\n        end\n    end\n    local waitLen = rcall(\"LLEN\", KEYS[1])\n    if waitLen == 0 then\n        local activeLen = rcall(\"LLEN\", KEYS[2])\n        if activeLen == 0 then\n            local prioritizedLen = rcall(\"ZCARD\", KEYS[3])\n            if prioritizedLen == 0 then\n                rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"drained\")\n            end\n        end\n    end\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":14,"readOnly":false,"sha":"12006f44a676d9abd1b94956e52c26b0a23f2d53"},"moveToWaitingChildren:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to waiting children set.\n  Input:\n    KEYS[1] lock key\n    KEYS[2] active key\n    KEYS[3] waitChildrenKey key\n    KEYS[4] job key\n    KEYS[5] stalled key\n    ARGV[1] token\n    ARGV[2] child key\n    ARGV[3] timestamp\n    ARGV[4] the id of the job\n  Output:\n    0 - OK\n    1 - There are not pending dependencies.\n   -1 - Missing job.\n   -2 - Missing lock\n   -3 - Job not in active set\n]]\nlocal rcall = redis.call\nlocal stalledKey = KEYS[5]\n--- Includes\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal function moveToWaitingChildren (activeKey, waitingChildrenKey, jobId,\n    timestamp)\n  local score = tonumber(timestamp)\n  local numRemovedElements = rcall(\"LREM\", activeKey, -1, jobId)\n  if(numRemovedElements < 1) then\n    return -3\n  end\n  rcall(\"ZADD\", waitingChildrenKey, score, jobId)\n  return 0\nend\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  if ARGV[2] ~= \"\" then\n    if rcall(\"SISMEMBER\", KEYS[4] .. \":dependencies\", ARGV[2]) ~= 0 then\n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  else\n    if rcall(\"SCARD\", KEYS[4] .. \":dependencies\") ~= 0 then \n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  end\nend\nreturn -1\n","numberOfKeys":5,"readOnly":false,"sha":"6973c26e3288f458fe6c1018d2e75b11159dc264"},"obliterate:5.23.0":{"keyPrefix":"","lua":"--[[\n  Completely obliterates a queue and all of its contents\n  This command completely destroys a queue including all of its jobs, current or past \n  leaving no trace of its existence. Since this script needs to iterate to find all the job\n  keys, consider that this call may be slow for very large queues.\n  The queue needs to be \"paused\" or it will return an error\n  If the queue has currently active jobs then the script by default will return error,\n  however this behaviour can be overrided using the 'force' option.\n  Input:\n    KEYS[1] meta\n    KEYS[2] base\n    ARGV[1] count\n    ARGV[2] force\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal baseKey = KEYS[2]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nlocal function removeLockKeys(keys)\n  for i, key in ipairs(keys) do\n    rcall(\"DEL\", baseKey .. key .. ':lock')\n  end\nend\n-- 1) Check if paused, if not return with error.\nif rcall(\"HEXISTS\", KEYS[1], \"paused\") ~= 1 then\n  return -1 -- Error, NotPaused\nend\n-- 2) Check if there are active jobs, if there are and not \"force\" return error.\nlocal activeKey = baseKey .. 'active'\nlocal activeJobs = getListItems(activeKey, maxCount)\nif (#activeJobs > 0) then\n  if(ARGV[2] == \"\") then \n    return -2 -- Error, ExistActiveJobs\n  end\nend\nremoveLockKeys(activeJobs)\nmaxCount = removeJobs(activeJobs, true, baseKey, maxCount)\nrcall(\"LTRIM\", activeKey, #activeJobs, -1)\nif(maxCount <= 0) then\n  return 1\nend\nlocal delayedKey = baseKey .. 'delayed'\nmaxCount = removeZSetJobs(delayedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal repeatKey = baseKey .. 'repeat'\nlocal repeatJobsIds = getZSetItems(repeatKey, maxCount)\nfor i, key in ipairs(repeatJobsIds) do\n  local jobKey = repeatKey .. \":\" .. key\n  rcall(\"DEL\", jobKey)\nend\nif(#repeatJobsIds > 0) then\n  for from, to in batches(#repeatJobsIds, 7000) do\n    rcall(\"ZREM\", repeatKey, unpack(repeatJobsIds, from, to))\n  end\nend\nmaxCount = maxCount - #repeatJobsIds\nif(maxCount <= 0) then\n  return 1\nend\nlocal completedKey = baseKey .. 'completed'\nmaxCount = removeZSetJobs(completedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal waitKey = baseKey .. 'paused'\nmaxCount = removeListJobs(waitKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal prioritizedKey = baseKey .. 'prioritized'\nmaxCount = removeZSetJobs(prioritizedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal failedKey = baseKey .. 'failed'\nmaxCount = removeZSetJobs(failedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nif(maxCount > 0) then\n  rcall(\"DEL\",\n    baseKey .. 'events',\n    baseKey .. 'delay', \n    baseKey .. 'stalled-check',\n    baseKey .. 'stalled',\n    baseKey .. 'id',\n    baseKey .. 'pc',\n    baseKey .. 'meta',\n    baseKey .. 'metrics:completed',\n    baseKey .. 'metrics:completed:data',\n    baseKey .. 'metrics:failed',\n    baseKey .. 'metrics:failed:data')\n  return 0\nelse\n  return 1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"373cd929817041e9886b8934d98dcad319bd1fa3"},"paginate:5.23.0":{"keyPrefix":"","lua":"--[[\n    Paginate a set or hash\n    Input:\n      KEYS[1] key pointing to the set or hash to be paginated.\n      ARGV[1]  page start offset\n      ARGV[2]  page end offset (-1 for all the elements)\n      ARGV[3]  cursor\n      ARGV[4]  offset\n      ARGV[5]  max iterations\n      ARGV[6]  fetch jobs?\n    Output:\n      [cursor, offset, items, numItems]\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to achieve pagination for a set or hash.\n  This function simulates pagination in the most efficient way possible\n  for a set using sscan or hscan.\n  The main limitation is that sets are not order preserving, so the\n  pagination is not stable. This means that if the set is modified\n  between pages, the same element may appear in different pages.\n]] -- Maximum number of elements to be returned by sscan per iteration.\nlocal maxCount = 100\n-- Finds the cursor, and returns the first elements available for the requested page.\nlocal function findPage(key, command, pageStart, pageSize, cursor, offset,\n                        maxIterations, fetchJobs)\n    local items = {}\n    local jobs = {}\n    local iterations = 0\n    repeat\n        -- Iterate over the set using sscan/hscan.\n        local result = rcall(command, key, cursor, \"COUNT\", maxCount)\n        cursor = result[1]\n        local members = result[2]\n        local step = 1\n        if command == \"HSCAN\" then\n            step = 2\n        end\n        if #members == 0 then\n            -- If the result is empty, we can return the result.\n            return cursor, offset, items, jobs\n        end\n        local chunkStart = offset\n        local chunkEnd = offset + #members / step\n        local pageEnd = pageStart + pageSize\n        if chunkEnd < pageStart then\n            -- If the chunk is before the page, we can skip it.\n            offset = chunkEnd\n        elseif chunkStart > pageEnd then\n            -- If the chunk is after the page, we can return the result.\n            return cursor, offset, items, jobs\n        else\n            -- If the chunk is overlapping the page, we need to add the elements to the result.\n            for i = 1, #members, step do\n                if offset >= pageEnd then\n                    return cursor, offset, items, jobs\n                end\n                if offset >= pageStart then\n                    local index = #items + 1\n                    if fetchJobs ~= nil then\n                        jobs[#jobs+1] = rcall(\"HGETALL\", members[i])\n                    end\n                    if step == 2 then\n                        items[index] = {members[i], members[i + 1]}\n                    else\n                        items[index] = members[i]\n                    end\n                end\n                offset = offset + 1\n            end\n        end\n        iterations = iterations + 1\n    until cursor == \"0\" or iterations >= maxIterations\n    return cursor, offset, items, jobs\nend\nlocal key = KEYS[1]\nlocal scanCommand = \"SSCAN\"\nlocal countCommand = \"SCARD\"\nlocal type = rcall(\"TYPE\", key)[\"ok\"]\nif type == \"none\" then\n    return {0, 0, {}, 0}\nelseif type == \"hash\" then\n    scanCommand = \"HSCAN\"\n    countCommand = \"HLEN\"\nelseif type ~= \"set\" then\n    return\n        redis.error_reply(\"Pagination is only supported for sets and hashes.\")\nend\nlocal numItems = rcall(countCommand, key)\nlocal startOffset = tonumber(ARGV[1])\nlocal endOffset = tonumber(ARGV[2])\nif endOffset == -1 then \n  endOffset = numItems\nend\nlocal pageSize = (endOffset - startOffset) + 1\nlocal cursor, offset, items, jobs = findPage(key, scanCommand, startOffset,\n                                       pageSize, ARGV[3], tonumber(ARGV[4]),\n                                       tonumber(ARGV[5]), ARGV[6])\nreturn {cursor, offset, items, numItems, jobs}\n","numberOfKeys":1,"readOnly":false,"sha":"24e0a4e97b78f73b314c257b4fff96ebfc207f27"},"pause:5.23.0":{"keyPrefix":"","lua":"--[[\n  Pauses or resumes a queue globably.\n  Input:\n    KEYS[1] 'wait' or 'paused''\n    KEYS[2] 'paused' or 'wait'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] events stream key\n    KEYS[6] 'delayed'\n    KEYS|7] 'marker'\n    ARGV[1] 'paused' or 'resumed'\n  Event:\n    publish paused or resumed event.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\nlocal markerKey = KEYS[7]\nlocal hasJobs = rcall(\"EXISTS\", KEYS[1]) == 1\n--TODO: check this logic to be reused when changing a delay\nif hasJobs then rcall(\"RENAME\", KEYS[1], KEYS[2]) end\nif ARGV[1] == \"paused\" then\n    rcall(\"HSET\", KEYS[3], \"paused\", 1)\n    rcall(\"DEL\", markerKey)\nelse\n    rcall(\"HDEL\", KEYS[3], \"paused\")\n    if hasJobs or rcall(\"ZCARD\", KEYS[4]) > 0 then\n        -- Add marker if there are waiting or priority jobs\n        rcall(\"ZADD\", markerKey, 0, \"0\")\n    else\n        addDelayMarkerIfNeeded(markerKey, KEYS[6])\n    end\nend\nrcall(\"XADD\", KEYS[5], \"*\", \"event\", ARGV[1]);\n","numberOfKeys":7,"readOnly":false,"sha":"b5e8cf4d8b11d432fad7d3f9a78f55ce7f9e5e58"},"promote:5.23.0":{"keyPrefix":"","lua":"--[[\n  Promotes a job that is currently \"delayed\" to the \"waiting\" state\n    Input:\n      KEYS[1] 'delayed'\n      KEYS[2] 'wait'\n      KEYS[3] 'paused'\n      KEYS[4] 'meta'\n      KEYS[5] 'prioritized'\n      KEYS[6] 'active'\n      KEYS[7] 'pc' priority counter\n      KEYS[8] 'event stream'\n      KEYS[9] 'marker'\n      ARGV[1]  queue.toKey('')\n      ARGV[2]  jobId\n    Output:\n       0 - OK\n      -3 - Job not in delayed zset.\n    Events:\n      'waiting'\n]]\nlocal rcall = redis.call\nlocal jobId = ARGV[2]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"ZREM\", KEYS[1], jobId) == 1 then\n    local jobKey = ARGV[1] .. jobId\n    local priority = tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n    local metaKey = KEYS[4]\n    local markerKey = KEYS[9]\n    -- Remove delayed \"marker\" from the wait list if there is any.\n    -- Since we are adding a job we do not need the marker anymore.\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[2], KEYS[3])\n    local marker = rcall(\"LINDEX\", target, 0)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then rcall(\"LPOP\", target) end\n    if priority == 0 then\n        -- LIFO or FIFO\n        addJobInTargetList(target, markerKey, \"LPUSH\", isPausedOrMaxed, jobId)\n    else\n        addJobWithPriority(markerKey, KEYS[5], priority, jobId, KEYS[7], isPausedOrMaxed)\n    end\n    -- Emit waiting event (wait..ing@token)\n    rcall(\"XADD\", KEYS[8], \"*\", \"event\", \"waiting\", \"jobId\", jobId, \"prev\",\n          \"delayed\");\n    rcall(\"HSET\", jobKey, \"delay\", 0)\n    return 0\nelse\n    return -3\nend\n","numberOfKeys":9,"readOnly":false,"sha":"3b1d1df758d39e3939530d7943c8f8b10be81ef5"},"releaseLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Release lock\n    Input:\n      KEYS[1] 'lock',\n      ARGV[1]  token\n      ARGV[2]  lock duration in milliseconds\n    Output:\n      \"OK\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  return rcall(\"DEL\", KEYS[1])\nelse\n  return 0\nend\n","numberOfKeys":1,"readOnly":false,"sha":"aa94dc35fb8a4d637c5faaa49796b6094475e299"},"removeChildDependency:5.23.0":{"keyPrefix":"","lua":"--[[\n  Break parent-child dependency by removing\n  child reference from parent\n  Input:\n    KEYS[1] 'key' prefix,\n    ARGV[1] job key\n    ARGV[2] parent key\n    Output:\n       0  - OK\n       1  - There is not relationship.\n      -1  - Missing job key\n      -5  - Missing parent key\n]]\nlocal rcall = redis.call\nlocal jobKey = ARGV[1]\nlocal parentKey = ARGV[2]\n-- Includes\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nif rcall(\"EXISTS\", jobKey) ~= 1 then return -1 end\nif rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\nif removeParentDependencyKey(jobKey, false, parentKey, KEYS[1], nil) then\n  rcall(\"HDEL\", jobKey, \"parentKey\", \"parent\")\n  return 0\nelse\n  return 1\nend","numberOfKeys":1,"readOnly":false,"sha":"91d0d0ceb4fdecae5b011a6acad7dae6df8b917a"},"removeJob:5.23.0":{"keyPrefix":"","lua":"--[[\n    Remove a job from all the queues it may be in as well as all its data.\n    In order to be able to remove a job, it cannot be active.\n    Input:\n      KEYS[1] queue prefix\n      KEYS[2] meta key\n      ARGV[1] jobId\n      ARGV[2] remove children\n    Events:\n      'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to recursively check if there are no locks\n  on the jobs to be removed.\n  returns:\n    boolean\n]]\nlocal function isLocked( prefix, jobId, removeChildren)\n  local jobKey = prefix .. jobId;\n  -- Check if this job is locked\n  local lockKey = jobKey .. ':lock'\n  local lock = rcall(\"GET\", lockKey)\n  if not lock then\n    if removeChildren == \"1\" then\n      local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n      if (#dependencies > 0) then\n        for i, childJobKey in ipairs(dependencies) do\n          -- We need to get the jobId for this job.\n          local childJobId = getJobIdFromKey(childJobKey)\n          local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n          local result = isLocked( childJobPrefix, childJobId, removeChildren )\n          if result then\n            return true\n          end\n        end\n      end\n    end\n    return false\n  end\n  return true\nend\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove from any state.\n  returns:\n    prev state\n]]\nlocal function removeJobFromAnyState( prefix, jobId)\n  -- We start with the ZSCORE checks, since they have O(1) complexity\n  if rcall(\"ZSCORE\", prefix .. \"completed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"completed\", jobId)\n    return \"completed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"waiting-children\", jobId) then\n    rcall(\"ZREM\", prefix .. \"waiting-children\", jobId)\n    return \"waiting-children\"\n  elseif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"delayed\", jobId)\n    return \"delayed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"failed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"failed\", jobId)\n    return \"failed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"prioritized\", jobId) then\n    rcall(\"ZREM\", prefix .. \"prioritized\", jobId)\n    return \"prioritized\"\n  -- We remove only 1 element from the list, since we assume they are not added multiple times\n  elseif rcall(\"LREM\", prefix .. \"wait\", 1, jobId) == 1 then\n    return \"wait\"\n  elseif rcall(\"LREM\", prefix .. \"paused\", 1, jobId) == 1 then\n    return \"paused\"\n  elseif rcall(\"LREM\", prefix .. \"active\", 1, jobId) == 1 then\n    return \"active\"\n  end\n  return \"unknown\"\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(prefix, jobId, parentKey, removeChildren)\n    local jobKey = prefix .. jobId;\n    removeParentDependencyKey(jobKey, false, parentKey, nil)\n    if removeChildren == \"1\" then\n        -- Check if this job has children\n        -- If so, we are going to try to remove the children recursively in deep first way because\n        -- if some job is locked we must exit with and error.\n        -- local countProcessed = rcall(\"HLEN\", jobKey .. \":processed\")\n        local processed = rcall(\"HGETALL\", jobKey .. \":processed\")\n        if (#processed > 0) then\n            for i = 1, #processed, 2 do\n                local childJobId = getJobIdFromKey(processed[i])\n                local childJobPrefix = getJobKeyPrefix(processed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n        if (#dependencies > 0) then\n            for i, childJobKey in ipairs(dependencies) do\n                -- We need to get the jobId for this job.\n                local childJobId = getJobIdFromKey(childJobKey)\n                local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local failed = rcall(\"HGETALL\", jobKey .. \":failed\")\n        if (#failed > 0) then\n            for i = 1, #failed, 2 do\n                local childJobId = getJobIdFromKey(failed[i])\n                local childJobPrefix = getJobKeyPrefix(failed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n    end\n    local prev = removeJobFromAnyState(prefix, jobId)\n    removeDeduplicationKey(prefix, jobKey)\n    if removeJobKeys(jobKey) > 0 then\n        local maxEvents = getOrSetMaxEvents(KEYS[2])\n        rcall(\"XADD\", prefix .. \"events\", \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"removed\", \"jobId\", jobId, \"prev\",\n            prev)\n    end\nend\nlocal prefix = KEYS[1]\nlocal jobId = ARGV[1]\nlocal shouldRemoveChildren = ARGV[2]\nlocal jobKey = prefix .. jobId\n-- Check if the job belongs to a job scheduler and it is in delayed state.\nif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) and rcall(\"HGET\", jobKey, \"rjk\") then\n    return -8 -- Return error code as the job is part of a job scheduler and is in delayed state.\nend\nif not isLocked(prefix, jobId, shouldRemoveChildren) then\n    removeJob(prefix, jobId, nil, shouldRemoveChildren)\n    return 1\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"6ab3da66c7019f2baed32b1b6ded3d70871a9882"},"removeJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] job schedulers key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] job scheduler id\n    ARGV[2] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal jobSchedulerId = ARGV[1]\nlocal prefix = ARGV[2]\nlocal millis = rcall(\"ZSCORE\", KEYS[1], jobSchedulerId)\nif millis then\n  -- Delete next programmed job.\n  local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], delayedJobId) == 1) then\n    removeJobKeys(prefix .. delayedJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", delayedJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], jobSchedulerId) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. jobSchedulerId)\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"97fea98805553999aa91f7168443955f40975f20"},"removeRepeatable:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] repeat jobs key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] old repeat job id\n    ARGV[2] options concat\n    ARGV[3] repeat job key\n    ARGV[4] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\nlocal millis = rcall(\"ZSCORE\", KEYS[1], ARGV[2])\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n-- legacy removal TODO: remove in next breaking change\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = ARGV[1] .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\");\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[2]) == 1) then\n  return 0\nend\n-- new removal\nmillis = rcall(\"ZSCORE\", KEYS[1], ARGV[3])\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = \"repeat:\" .. ARGV[3] .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[3]) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. ARGV[3])\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"8b7754dbe8ee0938a634f0bfd43cfa41084e2074"},"reprocessJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Attempts to reprocess a job\n  Input:\n    KEYS[1] job key\n    KEYS[2] events stream\n    KEYS[3] job state\n    KEYS[4] wait key\n    KEYS[5] meta\n    KEYS[6] paused key\n    KEYS[7] active key\n    KEYS[8] marker key\n    ARGV[1] job.id\n    ARGV[2] (job.opts.lifo ? 'R' : 'L') + 'PUSH'\n    ARGV[3] propVal - failedReason/returnvalue\n    ARGV[4] prev state - failed/completed\n  Output:\n     1 means the operation was a success\n    -1 means the job does not exist\n    -3 means the job was not found in the expected set.\n]]\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  local jobId = ARGV[1]\n  if (rcall(\"ZREM\", KEYS[3], jobId) == 1) then\n    rcall(\"HDEL\", KEYS[1], \"finishedOn\", \"processedOn\", ARGV[3])\n    local target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[7], KEYS[4], KEYS[6])\n    addJobInTargetList(target, KEYS[8], ARGV[2], isPausedOrMaxed, jobId)\n    local maxEvents = getOrSetMaxEvents(KEYS[5])\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId, \"prev\", ARGV[4]);\n    return 1\n  else\n    return -3\n  end\nelse\n  return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"8dda09f0ada31675974dc60c7d149ee15b0743b9"},"retryJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Retries a failed job by moving it back to the wait queue.\n    Input:\n      KEYS[1]  'active',\n      KEYS[2]  'wait'\n      KEYS[3]  'paused'\n      KEYS[4]  job key\n      KEYS[5]  'meta'\n      KEYS[6]  events stream\n      KEYS[7]  delayed key\n      KEYS[8]  prioritized key\n      KEYS[9]  'pc' priority counter\n      KEYS[10] 'marker'\n      KEYS[11] 'stalled'\n      ARGV[1]  key prefix\n      ARGV[2]  timestamp\n      ARGV[3]  pushCmd\n      ARGV[4]  jobId\n      ARGV[5]  token\n    Events:\n      'waiting'\n    Output:\n     0  - OK\n     -1 - Missing key\n     -2 - Missing lock\n     -3 - Job not in active set\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[1], KEYS[2], KEYS[3])\nlocal markerKey = KEYS[10]\n-- Check if there are delayed jobs that we can move to wait.\n-- test example: when there are delayed jobs between retries\npromoteDelayedJobs(KEYS[7], markerKey, target, KEYS[8], KEYS[6], ARGV[1], ARGV[2], KEYS[9], isPausedOrMaxed)\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  local errorCode = removeLock(KEYS[4], KEYS[11], ARGV[5], ARGV[4]) \n  if errorCode < 0 then\n    return errorCode\n  end\n  local numRemovedElements = rcall(\"LREM\", KEYS[1], -1, ARGV[4])\n  if (numRemovedElements < 1) then return -3 end\n  local priority = tonumber(rcall(\"HGET\", KEYS[4], \"priority\")) or 0\n  --need to re-evaluate after removing job from active\n  isPausedOrMaxed = isQueuePausedOrMaxed(KEYS[5], KEYS[1])\n  -- Standard or priority add\n  if priority == 0 then\n    addJobInTargetList(target, markerKey, ARGV[3], isPausedOrMaxed, ARGV[4])\n  else\n    addJobWithPriority(markerKey, KEYS[8], priority, ARGV[4], KEYS[9], isPausedOrMaxed)\n  end\n  rcall(\"HINCRBY\", KEYS[4], \"atm\", 1)\n  local maxEvents = getOrSetMaxEvents(KEYS[5])\n  -- Emit waiting event\n  rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n    \"jobId\", ARGV[4], \"prev\", \"failed\")\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":11,"readOnly":false,"sha":"6076d6fc973ce8afee9cb60d78b0c0b6bd5eae4c"},"saveStacktrace:5.23.0":{"keyPrefix":"","lua":"--[[\n  Save stacktrace and failedReason.\n  Input:\n    KEYS[1] job key\n    ARGV[1]  stacktrace\n    ARGV[2]  failedReason\n  Output:\n     0 - OK\n    -1 - Missing key\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  rcall(\"HMSET\", KEYS[1], \"stacktrace\", ARGV[1], \"failedReason\", ARGV[2])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"ab2818154a3f405adad5e01b769e79c50fb9e615"},"updateData:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job data\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] data\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\",KEYS[1]) == 1 then -- // Make sure job exists\n  rcall(\"HSET\", KEYS[1], \"data\", ARGV[1])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"12a42ffd90c486a7f398fbb17cdcdd484f4abaea"},"updateJobOption:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update a job option\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] field\n    ARGV[2] value\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local opts = rcall(\"HGET\", KEYS[1], \"opts\")\n    local jsonOpts = cjson.decode(opts)\n    jsonOpts[ARGV[1]] = ARGV[2]\n    rcall(\"HSET\", KEYS[1], \"opts\", cjson.encode(jsonOpts))\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"03691d12e8d0415d9c65afda83999f77432e7d1a"},"updateProgress:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job progress\n  Input:\n    KEYS[1] Job id key\n    KEYS[2] event stream key\n    KEYS[3] meta key\n    ARGV[1] id\n    ARGV[2] progress\n  Output:\n     0 - OK\n    -1 - Missing job.\n  Event:\n    progress(jobId, progress)\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local maxEvents = getOrSetMaxEvents(KEYS[3])\n    rcall(\"HSET\", KEYS[1], \"progress\", ARGV[2])\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"progress\",\n          \"jobId\", ARGV[1], \"data\", ARGV[2]);\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":3,"readOnly":false,"sha":"ddd7da9c6be4b31a479136c66425bef0bc2a047f"},"updateRepeatableJobMillis:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      ARGV[1] next milliseconds\n      ARGV[2] custom key\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal nextMillis = ARGV[1]\nlocal customKey = ARGV[2]\nlocal legacyCustomKey = ARGV[3]\nif rcall(\"ZSCORE\", repeatKey, customKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n    return customKey\nelseif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, legacyCustomKey)\n    return legacyCustomKey\nend\nreturn ''\n","numberOfKeys":1,"readOnly":false,"sha":"18e65990db4c93586838c27a5975ee2d3a63ce00"}},"status":"ready","stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"_events":{},"_eventsCount":2,"blocking":true,"capabilities":{"canBlockFor1Ms":true,"canDoubleTimeout":true},"initializing":{},"opts":{"host":"192.168.10.2","maxRetriesPerRequest":null,"port":6379},"shared":false,"skipVersionCheck":false,"status":"ready","version":"7.4.1"},"drained":false,"extendLocksTimer":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_idleNext":"[Circular]","_idlePrev":"[Circular]","expiry":93470,"id":-9007199254740355,"msecs":7500,"priorityQueuePosition":2},"_idlePrev":"[Circular]","_idleStart":85970,"_idleTimeout":7500,"_repeat":null},"_idlePrev":"[Circular]","_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idlePrev":"[Circular]","_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idlePrev":"[Circular]","_idleStart":90265,"_idleTimeout":7500,"_repeat":null},"_idlePrev":{"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":"[Circular]","_idleStart":90265,"_idleTimeout":7500,"_repeat":null},"_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idleStart":85970,"_idleTimeout":7500,"_repeat":null},"expiry":93470,"id":-9007199254740355,"msecs":7500,"priorityQueuePosition":2},"_idleStart":90933,"_idleTimeout":7500,"_repeat":null},"id":"3cb87e42-ec1b-401a-a5c2-de0412b1322b","keys":{"":"bull:tasks:","active":"bull:tasks:active","completed":"bull:tasks:completed","de":"bull:tasks:de","delayed":"bull:tasks:delayed","events":"bull:tasks:events","failed":"bull:tasks:failed","id":"bull:tasks:id","limiter":"bull:tasks:limiter","marker":"bull:tasks:marker","meta":"bull:tasks:meta","paused":"bull:tasks:paused","pc":"bull:tasks:pc","prioritized":"bull:tasks:prioritized","repeat":"bull:tasks:repeat","stalled":"bull:tasks:stalled","stalled-check":"bull:tasks:stalled-check","wait":"bull:tasks:wait","waiting-children":"bull:tasks:waiting-children"},"limitUntil":0,"name":"tasks","opts":{"autorun":true,"blockingConnection":true,"concurrency":1,"connection":{"host":"192.168.10.2","port":6379},"drainDelay":5,"lockDuration":30000,"lockRenewTime":15000,"maxStalledCount":1,"prefix":"bull","runRetryDelay":15000,"stalledInterval":30000},"qualifiedName":"bull:tasks","running":true,"scripts":{"moveToFinishedKeys":["bull:tasks:wait","bull:tasks:active","bull:tasks:prioritized","bull:tasks:events","bull:tasks:stalled","bull:tasks:limiter","bull:tasks:delayed","bull:tasks:paused","bull:tasks:meta","bull:tasks:pc",null,null,null,null],"queue":"[Circular]","version":"5.23.0"},"waiting":null},"queueQualifiedName":"bull:tasks","returnvalue":null,"scripts":{"moveToFinishedKeys":["bull:tasks:wait","bull:tasks:active","bull:tasks:prioritized","bull:tasks:events","bull:tasks:stalled","bull:tasks:limiter","bull:tasks:delayed","bull:tasks:paused","bull:tasks:meta","bull:tasks:pc",null,null,null,null],"queue":{"_events":{},"_eventsCount":2,"abortDelayController":null,"asyncFifoQueue":{"ignoreErrors":false,"nextPromise":{},"pending":{},"queue":{"head":null,"length":0,"tail":{"next":null,"value":{"attemptsMade":0,"attemptsStarted":1,"data":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:19:58.348Z","error":null,"id":"065befbf-00a5-4fec-a01c-fe37d6eaf9ff","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"one tweo trhe im here fro foree"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:19:58.348Z","user_id":"some-user-id"},"delay":0,"id":"21","name":"065befbf-00a5-4fec-a01c-fe37d6eaf9ff","opts":{"attempts":0},"priority":0,"processedOn":1730783998369,"progress":0,"queueQualifiedName":"bull:tasks","returnvalue":null,"stacktrace":[],"timestamp":1730783998364,"token":"3cb87e42-ec1b-401a-a5c2-de0412b1322b:11"}}}},"blockUntil":0,"blockingConnection":{"_client":{"_autoPipelines":{},"_events":{},"_eventsCount":3,"_maxListeners":13,"_runningAutoPipelines":{},"addedBuiltinSet":{},"commandQueue":{"_capacityMask":3,"_head":3,"_list":[null,null,null,null],"_tail":3},"condition":{"auth":null,"select":0,"subscriber":false},"connectionEpoch":3,"connector":{"connecting":true,"disconnectTimeout":2000,"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":"bull:dGFza3M=","db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"isCluster":false,"manuallyClosing":false,"offlineQueue":{"_capacityMask":3,"_head":0,"_list":[null,null,null,null],"_tail":0},"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":"bull:dGFza3M=","db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"prevCommandQueue":{"_capacityMask":3,"_head":3,"_list":[null,null,null,null],"_tail":3},"prevCondition":null,"reconnectTimeout":null,"retryAttempts":0,"scriptsSet":{"addDelayedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a delayed job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - computes timestamp.\n    - adds to delayed zset.\n    - Emits a global event 'delayed' if the job is delayed.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'delayed'\n      KEYS[5] 'completed'\n      KEYS[6] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (use custom instead of one generated automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n          x [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal delayedKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal eventsKey = KEYS[6]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\nlocal score, delayedTimestamp = getDelayedScore(delayedKey, timestamp, tonumber(delay))\nrcall(\"ZADD\", delayedKey, score, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n      \"jobId\", jobId, \"delay\", delayedTimestamp)\n-- mark that a delayed job is available\nlocal markerKey = KEYS[1]\naddDelayMarkerIfNeeded(markerKey, delayedKey)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":6,"readOnly":false,"sha":"28d826f4b47e91d4e296526a4f9dd0e6e87f4030"},"addJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job scheduler, i.e. a job factory that creates jobs based on a given schedule (repeat options).\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] jobs scheduler id\n      ARGV[4] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal jobSchedulerId = ARGV[3]\nlocal prefixKey = ARGV[4]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, jobSchedulerId)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. jobSchedulerId, \"name\", opts['name'],\n    unpack(optionalValues))\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, jobSchedulerId)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. jobSchedulerId .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. jobSchedulerId .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\nreturn storeRepeatableJob(repeatKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"a5a24f643c0294143ec2a981e63344699d31b6db"},"addLog:5.23.0":{"keyPrefix":"","lua":"--[[\n  Add job log\n  Input:\n    KEYS[1] job id key\n    KEYS[2] job logs key\n    ARGV[1] id\n    ARGV[2] log\n    ARGV[3] keepLogs\n  Output:\n    -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n  local logCount = rcall(\"RPUSH\", KEYS[2], ARGV[2])\n  if ARGV[3] ~= '' then\n    local keepLogs = tonumber(ARGV[3])\n    rcall(\"LTRIM\", KEYS[2], -keepLogs, -1)\n    return math.min(keepLogs, logCount)\n  end\n  return logCount\nelse\n  return -1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"eecb06ad6c96fa5da4fa8bca0ea7a1bf1bf62f18"},"addParentJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a parent job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - adds the job to the waiting-children zset\n    Input:\n      KEYS[1] 'meta'\n      KEYS[2] 'id'\n      KEYS[3] 'completed'\n      KEYS[4] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[1]\nlocal idKey = KEYS[2]\nlocal completedKey = KEYS[3]\nlocal eventsKey = KEYS[4]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal waitChildrenKey = args[6]\nrcall(\"ZADD\", waitChildrenKey, timestamp, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n      \"waiting-children\", \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":4,"readOnly":false,"sha":"8b4682aa777886ad4a5c60c3f528309f3721d472"},"addPrioritizedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a priotitized job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'prioritized'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] 'pc' priority counter\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]] \nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal priorityKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal activeKey = KEYS[6]\nlocal eventsKey = KEYS[7]\nlocal priorityCounterKey = KEYS[8]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\n-- Add the job to the prioritized set\nlocal isPausedOrMaxed = isQueuePausedOrMaxed(metaKey, activeKey)\naddJobWithPriority( KEYS[1], priorityKey, priority, jobId, priorityCounterKey, isPausedOrMaxed)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"9941c303fd1cd31a262324a90c1cd7236c5022d5"},"addRepeatableJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      ARGV[4] custom key\n      ARGV[5] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal legacyCustomKey = ARGV[3]\nlocal customKey = ARGV[4]\nlocal prefixKey = ARGV[5]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, customKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. customKey, \"name\", opts['name'],\n    unpack(optionalValues))\n  return customKey\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, customKey)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. customKey .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. customKey .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\n-- Keep backwards compatibility with old repeatable jobs (<= 3.0.0)\nif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n  return storeRepeatableJob(repeatKey, legacyCustomKey, nextMillis, ARGV[2])\nend\nreturn storeRepeatableJob(repeatKey, customKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"c01242e2652ac7c1e5f276b7d6c849375b22d1a7"},"addStandardJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - if delayed:\n      - computes timestamp.\n      - adds to delayed zset.\n      - Emits a global event 'delayed' if the job is delayed.\n    - if not delayed\n      - Adds the jobId to the wait/paused list in one of three ways:\n         - LIFO\n         - FIFO\n         - prioritized.\n      - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'wait',\n      KEYS[2] 'paused'\n      KEYS[3] 'meta'\n      KEYS[4] 'id'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] marker key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal eventsKey = KEYS[7]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", KEYS[4])\nlocal metaKey = KEYS[3]\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, KEYS[5], eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[1], KEYS[2])\n-- LIFO or FIFO\nlocal pushCmd = opts['lifo'] and 'RPUSH' or 'LPUSH'\naddJobInTargetList(target, KEYS[8], pushCmd, isPausedOrMaxed, jobId)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"a7b39766da8f5ced70f465297396dd83e550ceed"},"changeDelay:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job delay when it is in delayed set.\n  Input:\n    KEYS[1] delayed key\n    KEYS[2] meta key\n    KEYS[3] marker key\n    KEYS[4] events stream\n    ARGV[1] delay\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] job key\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in delayed set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", ARGV[4]) == 1 then\n  local jobId = ARGV[3]\n  local delay = tonumber(ARGV[1])\n  local score, delayedTimestamp = getDelayedScore(KEYS[1], ARGV[2], delay)\n  local numRemovedElements = rcall(\"ZREM\", KEYS[1], jobId)\n  if numRemovedElements < 1 then\n    return -3\n  end\n  rcall(\"HSET\", ARGV[4], \"delay\", delay)\n  rcall(\"ZADD\", KEYS[1], score, jobId)\n  local maxEvents = getOrSetMaxEvents(KEYS[2])\n  rcall(\"XADD\", KEYS[4], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n    \"jobId\", jobId, \"delay\", delayedTimestamp)\n  -- mark that a delayed job is available\n  addDelayMarkerIfNeeded(KEYS[3], KEYS[1])\n  return 0\nelse\n  return -1\nend","numberOfKeys":4,"readOnly":false,"sha":"d7704f63de52505e835193d552148741ae9770b8"},"changePriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job priority\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'active'\n    KEYS[6] 'pc' priority counter\n    KEYS[7] 'marker'\n    ARGV[1] priority value\n    ARGV[2] prefix key\n    ARGV[3] job id\n    ARGV[4] lifo\n    Output:\n       0  - OK\n      -1  - Missing job\n]]\nlocal jobId = ARGV[3]\nlocal jobKey = ARGV[2] .. jobId\nlocal priority = tonumber(ARGV[1])\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\nlocal function reAddJobWithNewPriority( prioritizedKey, markerKey, targetKey,\n    priorityCounter, lifo, priority, jobId, isPausedOrMaxed)\n    if priority == 0 then\n        local pushCmd = lifo and 'RPUSH' or 'LPUSH'\n        addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n    else\n        if lifo then\n            pushBackJobWithPriority(prioritizedKey, priority, jobId)\n        else\n            addJobWithPriority(markerKey, prioritizedKey, priority, jobId,\n                priorityCounter, isPausedOrMaxed)\n        end\n    end\nend\nif rcall(\"EXISTS\", jobKey) == 1 then\n    local metaKey = KEYS[3]\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[5], KEYS[1], KEYS[2])\n    local prioritizedKey = KEYS[4]\n    local priorityCounterKey = KEYS[6]\n    local markerKey = KEYS[7]\n    -- Re-add with the new priority\n    if rcall(\"ZREM\", prioritizedKey, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    elseif rcall(\"LREM\", target, -1, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    end\n    rcall(\"HSET\", jobKey, \"priority\", priority)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":7,"readOnly":false,"sha":"0712f368ed58c17e481d319f364e46cbf665b95b"},"cleanJobsInSet:5.23.0":{"keyPrefix":"","lua":"--[[\n  Remove jobs from the specific set.\n  Input:\n    KEYS[1]  set key,\n    KEYS[2]  events stream key\n    KEYS[3]  job schedulers key\n    ARGV[1]  jobKey prefix\n    ARGV[2]  timestamp\n    ARGV[3]  limit the number of jobs to be removed. 0 is unlimited\n    ARGV[4]  set name, can be any of 'wait', 'active', 'paused', 'delayed', 'completed', or 'failed'\n]]\nlocal rcall = redis.call\nlocal rangeStart = 0\nlocal rangeEnd = -1\nlocal limit = tonumber(ARGV[3])\n-- If we're only deleting _n_ items, avoid retrieving all items\n-- for faster performance\n--\n-- Start from the tail of the list, since that's where oldest elements\n-- are generally added for FIFO lists\nif limit > 0 then\n  rangeStart = -1 - limit + 1\n  rangeEnd = -1\nend\n-- Includes\n--[[\n  Function to clean job list.\n  Returns jobIds and deleted count number.\n]]\n-- Includes\n--[[\n  Function to get the latest saved timestamp.\n]]\nlocal function getTimestamp(jobKey, attributes)\n  if #attributes == 1 then\n    return rcall(\"HGET\", jobKey, attributes[1])\n  end\n  local jobTs\n  for _, ts in ipairs(rcall(\"HMGET\", jobKey, unpack(attributes))) do\n    if (ts) then\n      jobTs = ts\n      break\n    end\n  end\n  return jobTs\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function cleanList(listKey, jobKeyPrefix, rangeStart, rangeEnd,\n  timestamp, isWaiting)\n  local jobs = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  local deleted = {}\n  local deletedCount = 0\n  local jobTS\n  local deletionMarker = ''\n  local jobIdsLen = #jobs\n  for i, job in ipairs(jobs) do\n    if limit > 0 and deletedCount >= limit then\n      break\n    end\n    local jobKey = jobKeyPrefix .. job\n    if (isWaiting or rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n      -- Find the right timestamp of the job to compare to maxTimestamp:\n      -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n      -- * processedOn represents when the job was last attempted, but it doesn't get populated until\n      --   the job is first tried\n      -- * timestamp is the original job submission time\n      -- Fetch all three of these (in that order) and use the first one that is set so that we'll leave jobs\n      -- that have been active within the grace period:\n      jobTS = getTimestamp(jobKey, {\"finishedOn\", \"processedOn\", \"timestamp\"})\n      if (not jobTS or jobTS <= timestamp) then\n        -- replace the entry with a deletion marker; the actual deletion will\n        -- occur at the end of the script\n        rcall(\"LSET\", listKey, rangeEnd - jobIdsLen + i, deletionMarker)\n        removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]])\n        deletedCount = deletedCount + 1\n        table.insert(deleted, job)\n      end\n    end\n  end\n  rcall(\"LREM\", listKey, 0, deletionMarker)\n  return {deleted, deletedCount}\nend\n--[[\n  Function to clean job set.\n  Returns jobIds and deleted count number.\n]] \n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  We use ZRANGEBYSCORE to make the case where we're deleting a limited number\n  of items in a sorted set only run a single iteration. If we simply used\n  ZRANGE, we may take a long time traversing through jobs that are within the\n  grace period.\n]]\nlocal function getJobsInZset(zsetKey, rangeEnd, limit)\n  if limit > 0 then\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd, \"LIMIT\", 0, limit)\n  else\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd)\n  end\nend\nlocal function isJobSchedulerJob(jobId, jobSchedulersKey)\n    if jobSchedulersKey then\n        local jobSchedulerId = jobId:match(\"repeat:(.*):%d+\")\n        if jobSchedulerId then\n            return rcall(\"ZSCORE\", jobSchedulersKey, jobSchedulerId)\n        end\n    end\n    return false\nend\nlocal function cleanSet(\n    setKey,\n    jobKeyPrefix,\n    rangeEnd,\n    timestamp,\n    limit,\n    attributes,\n    isFinished,\n    jobSchedulersKey)\n    local jobs = getJobsInZset(setKey, rangeEnd, limit)\n    local deleted = {}\n    local deletedCount = 0\n    local jobTS\n    for i, job in ipairs(jobs) do\n        if limit > 0 and deletedCount >= limit then\n            break\n        end\n        -- Extract a Job Scheduler Id from jobId (\"repeat:job-scheduler-id:millis\") \n        -- and check if it is in the scheduled jobs\n        if not isJobSchedulerJob(job, jobSchedulersKey) then\n            local jobKey = jobKeyPrefix .. job\n            if isFinished then\n                removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                deletedCount = deletedCount + 1\n                table.insert(deleted, job)\n            else\n                -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n                jobTS = getTimestamp(jobKey, attributes)\n                if (not jobTS or jobTS <= timestamp) then\n                    removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                    deletedCount = deletedCount + 1\n                    table.insert(deleted, job)\n                end\n            end\n        end\n    end\n    if (#deleted > 0) then\n        for from, to in batches(#deleted, 7000) do\n            rcall(\"ZREM\", setKey, unpack(deleted, from, to))\n        end\n    end\n    return {deleted, deletedCount}\nend\nlocal result\nif ARGV[4] == \"active\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], false --[[ hasFinished ]])\nelseif ARGV[4] == \"delayed\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"processedOn\", \"timestamp\"}, false  --[[ hasFinished ]], KEYS[3])\nelseif ARGV[4] == \"prioritized\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"timestamp\"}, false  --[[ hasFinished ]])\nelseif ARGV[4] == \"wait\" or ARGV[4] == \"paused\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], true --[[ hasFinished ]])\nelse\n  rangeEnd = ARGV[2]\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"finishedOn\"}, true  --[[ hasFinished ]])\nend\nrcall(\"XADD\", KEYS[2], \"*\", \"event\", \"cleaned\", \"count\", result[2])\nreturn result[1]\n","numberOfKeys":3,"readOnly":false,"sha":"1a81e85ab6be2d531f463ccc8ab17a81b858dcdb"},"drain:5.23.0":{"keyPrefix":"","lua":"--[[\n  Drains the queue, removes all jobs that are waiting\n  or delayed, but not active, completed or failed\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'delayed'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'jobschedulers' (repeat)\n    ARGV[1]  queue key prefix\n]]\nlocal rcall = redis.call\nlocal queueBaseKey = ARGV[1]\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nremoveListJobs(KEYS[1], true, queueBaseKey, 0) -- wait\nremoveListJobs(KEYS[2], true, queueBaseKey, 0) -- paused\nif KEYS[3] ~= \"\" then\n    -- We must not remove delayed jobs if they are associated to a job scheduler.\n    local scheduledJobs = {}\n    local jobSchedulers = rcall(\"ZRANGE\", KEYS[5], 0, -1, \"WITHSCORES\")\n    -- For every job scheduler, get the current delayed job id.\n    for i = 1, #jobSchedulers, 2 do\n        local jobSchedulerId = jobSchedulers[i]\n        local jobSchedulerMillis = jobSchedulers[i + 1]\n        local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. jobSchedulerMillis\n        scheduledJobs[delayedJobId] = true\n    end\n    removeZSetJobs(KEYS[3], true, queueBaseKey, 0, scheduledJobs) -- delayed\nend\nremoveZSetJobs(KEYS[4], true, queueBaseKey, 0) -- prioritized\n","numberOfKeys":5,"readOnly":false,"sha":"cde4aa2dbd6d7545a57a6dd8684ad9448e0ae387"},"extendLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Extend lock and removes the job from the stalled set.\n  Input:\n    KEYS[1] 'lock',\n    KEYS[2] 'stalled'\n    ARGV[1]  token\n    ARGV[2]  lock duration in milliseconds\n    ARGV[3]  jobid\n  Output:\n    \"1\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  --   if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2], \"XX\") then\n  if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2]) then\n    rcall(\"SREM\", KEYS[2], ARGV[3])\n    return 1\n  end\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"99b6eb3d7a4777fb2271fd6cdf3ac5a290a4aac4"},"getCounts:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1...] types\n]]\nlocal rcall = redis.call;\nlocal prefix = KEYS[1]\nlocal results = {}\nfor i = 1, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        results[#results+1] = count-1\n      else\n        results[#results+1] = 0\n      end\n    else\n      results[#results+1] = rcall(\"LLEN\", stateKey)\n    end\n  elseif ARGV[i] == \"active\" then\n    results[#results+1] = rcall(\"LLEN\", stateKey)\n  else\n    results[#results+1] = rcall(\"ZCARD\", stateKey)\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"a8034c631460c6803c87966ce881636246de2398"},"getCountsPerPriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1] wait key\n      KEYS[2] paused key\n      KEYS[3] meta key\n      KEYS[4] prioritized key\n      ARGV[1...] priorities\n]]\nlocal rcall = redis.call\nlocal results = {}\nlocal waitKey = KEYS[1]\nlocal pausedKey = KEYS[2]\nlocal prioritizedKey = KEYS[4]\n-- Includes\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePaused(queueMetaKey)\n  return rcall(\"HEXISTS\", queueMetaKey, \"paused\") == 1\nend\nfor i = 1, #ARGV do\n  local priority = tonumber(ARGV[i])\n  if priority == 0 then\n    if isQueuePaused(KEYS[3]) then\n      results[#results+1] = rcall(\"LLEN\", pausedKey)\n    else\n      results[#results+1] = rcall(\"LLEN\", waitKey)\n    end\n  else\n    results[#results+1] = rcall(\"ZCOUNT\", prioritizedKey,\n      priority * 0x100000000, (priority + 1)  * 0x100000000 - 1)\n  end\nend\nreturn results\n","numberOfKeys":4,"readOnly":false,"sha":"0d3cc488e178c7c757e27ee35b04e6486f7b392a"},"getRanges:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get job ids per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1]    start\n      ARGV[2]    end\n      ARGV[3]    asc\n      ARGV[4...] types\n]]\nlocal rcall = redis.call\nlocal prefix = KEYS[1]\nlocal rangeStart = tonumber(ARGV[1])\nlocal rangeEnd = tonumber(ARGV[2])\nlocal asc = ARGV[3]\nlocal results = {}\nlocal function getRangeInList(listKey, asc, rangeStart, rangeEnd, results)\n  if asc == \"1\" then\n    local modifiedRangeStart\n    local modifiedRangeEnd\n    if rangeStart == -1 then\n      modifiedRangeStart = 0\n    else\n      modifiedRangeStart = -(rangeStart + 1)\n    end\n    if rangeEnd == -1 then\n      modifiedRangeEnd = 0\n    else\n      modifiedRangeEnd = -(rangeEnd + 1)\n    end\n    results[#results+1] = rcall(\"LRANGE\", listKey,\n      modifiedRangeEnd,\n      modifiedRangeStart)\n  else\n    results[#results+1] = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  end\nend\nfor i = 4, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n      else\n        results[#results+1] = {}\n      end\n    else\n      getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n    end\n  elseif ARGV[i] == \"active\" then\n    getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n  else\n    if asc == \"1\" then\n      results[#results+1] = rcall(\"ZRANGE\", stateKey, rangeStart, rangeEnd)\n    else\n      results[#results+1] = rcall(\"ZREVRANGE\", stateKey, rangeStart, rangeEnd)\n    end\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"8ead3c08a7bde7653892f14e44385d448a0f291c"},"getRateLimitTtl:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get rate limit ttl\n    Input:\n      KEYS[1] 'limiter'\n      ARGV[1] maxJobs\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\nlocal rateLimiterKey = KEYS[1]\nif ARGV[1] ~= \"0\" then\n  return getRateLimitTTL(tonumber(ARGV[1]), rateLimiterKey)\nelse\n  return rcall(\"PTTL\", rateLimiterKey)\nend\n","numberOfKeys":1,"readOnly":false,"sha":"92372d939896ee53f841c7ba94305e56a871786f"},"getState:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'prioritized'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal active_items = rcall(\"LRANGE\", KEYS[4] , 0, -1)\nif checkItemInList(active_items, ARGV[1]) ~= nil then\n  return \"active\"\nend\nlocal wait_items = rcall(\"LRANGE\", KEYS[5] , 0, -1)\nif checkItemInList(wait_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nlocal paused_items = rcall(\"LRANGE\", KEYS[6] , 0, -1)\nif checkItemInList(paused_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7], ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"8857a088a8555cf7fb21513a66531eb00cf8932d"},"getStateV2:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\nif rcall(\"LPOS\", KEYS[4] , ARGV[1]) ~= false then\n  return \"active\"\nend\nif rcall(\"LPOS\", KEYS[5] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"LPOS\", KEYS[6] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7] , ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"f7064020cc18bc64f3d44da9b89581294f7a67d3"},"isFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if a job is finished (.i.e. is in the completed or failed set)\n  Input: \n    KEYS[1] completed key\n    KEYS[2] failed key\n    KEYS[3] job key\n    ARGV[1] job id\n    ARGV[2] return value?\n  Output:\n    0 - Not finished.\n    1 - Completed.\n    2 - Failed.\n   -1 - Missing job. \n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[3]) ~= 1 then\n  if ARGV[2] == \"1\" then\n    return {-1,\"Missing key for job \" .. KEYS[3] .. \". isFinished\"}\n  end  \n  return -1\nend\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local returnValue = rcall(\"HGET\", KEYS[3], \"returnvalue\")\n    return {1,returnValue}\n  end\n  return 1\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local failedReason = rcall(\"HGET\", KEYS[3], \"failedReason\")\n    return {2,failedReason}\n  end\n  return 2\nend\nif ARGV[2] == \"1\" then\n  return {0}\nend\nreturn 0\n","numberOfKeys":3,"readOnly":false,"sha":"fdea3cb84e6f9aa18dd37ab7d710874c5828eb52"},"isJobInList:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if job is in a given list.\n  Input:\n    KEYS[1]\n    ARGV[1]\n  Output:\n    1 if element found in the list.\n]]\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal items = redis.call(\"LRANGE\", KEYS[1] , 0, -1)\nreturn checkItemInList(items, ARGV[1])\n","numberOfKeys":1,"readOnly":false,"sha":"7fafc57c06446598a2e9e21a718f11559c3b74c7"},"isMaxed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if queue is maxed.\n  Input:\n    KEYS[1] meta key\n    KEYS[2] active key\n  Output:\n    1 if element found in the list.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to check if queue is maxed or not.\n]]\nlocal function isQueueMaxed(queueMetaKey, activeKey)\n  local maxConcurrency = rcall(\"HGET\", queueMetaKey, \"concurrency\")\n  if maxConcurrency then\n    local activeCount = rcall(\"LLEN\", activeKey)\n    if activeCount >= tonumber(maxConcurrency) then\n      return true\n    end\n  end\n  return false\nend\nreturn isQueueMaxed(KEYS[1], KEYS[2])\n","numberOfKeys":2,"readOnly":false,"sha":"915456b98cefd4cfc19cf99a50d73bde41a27b6c"},"moveJobFromActiveToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Function to move job from active state to wait.\n  Input:\n    KEYS[1]  active key\n    KEYS[2]  wait key\n    KEYS[3]  stalled key\n    KEYS[4]  job lock key\n    KEYS[5]  paused key\n    KEYS[6]  meta key\n    KEYS[7]  limiter key\n    KEYS[8]  prioritized key\n    KEYS[9]  marker key\n    KEYS[10] event key\n    ARGV[1] job id\n    ARGV[2] lock token\n    ARGV[3] job id key\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal jobId = ARGV[1]\nlocal token = ARGV[2]\nlocal lockKey = KEYS[4]\nlocal lockToken = rcall(\"GET\", lockKey)\nlocal pttl = rcall(\"PTTL\", KEYS[7])\nif lockToken == token then\n  local metaKey = KEYS[6]\n  local removed = rcall(\"LREM\", KEYS[1], 1, jobId)\n  if removed > 0 then\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[1], KEYS[2], KEYS[5])\n    rcall(\"SREM\", KEYS[3], jobId)\n    local priority = tonumber(rcall(\"HGET\", ARGV[3], \"priority\")) or 0\n    if priority > 0 then\n      pushBackJobWithPriority(KEYS[8], priority, jobId)\n    else\n      addJobInTargetList(target, KEYS[9], \"RPUSH\", isPausedOrMaxed, jobId)\n    end\n    rcall(\"DEL\", lockKey)\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[10], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n  end\nend\nreturn pttl\n","numberOfKeys":10,"readOnly":false,"sha":"546b74fe67e4c131992799dac9ba737c553ea95f"},"moveJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move completed, failed or delayed jobs to wait.\n  Note: Does not support jobs with priorities.\n  Input:\n    KEYS[1] base key\n    KEYS[2] events stream\n    KEYS[3] state key (failed, completed, delayed)\n    KEYS[4] 'wait'\n    KEYS[5] 'paused'\n    KEYS[6] 'meta'\n    KEYS[7] 'active'\n    KEYS[8] 'marker'\n    ARGV[1] count\n    ARGV[2] timestamp\n    ARGV[3] prev state\n  Output:\n    1  means the operation is not completed\n    0  means the operation is completed\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal timestamp = tonumber(ARGV[2])\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal metaKey = KEYS[6]\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[7], KEYS[4], KEYS[5])\nlocal jobs = rcall('ZRANGEBYSCORE', KEYS[3], 0, timestamp, 'LIMIT', 0, maxCount)\nif (#jobs > 0) then\n    if ARGV[3] == \"failed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"failedReason\")\n        end\n    elseif ARGV[3] == \"completed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"returnvalue\")\n        end\n    end\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    for i, key in ipairs(jobs) do\n        -- Emit waiting event\n        rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n              \"waiting\", \"jobId\", key, \"prev\", ARGV[3]);\n    end\n    for from, to in batches(#jobs, 7000) do\n        rcall(\"ZREM\", KEYS[3], unpack(jobs, from, to))\n        rcall(\"LPUSH\", target, unpack(jobs, from, to))\n    end\n    addBaseMarkerIfNeeded(KEYS[8], isPausedOrMaxed)\nend\nmaxCount = maxCount - #jobs\nif (maxCount <= 0) then return 1 end\nreturn 0\n","numberOfKeys":8,"readOnly":false,"sha":"655fa4396927ac2e4239ae18746a6c053c05c5d5"},"moveStalledJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move stalled jobs to wait.\n    Input:\n      KEYS[1] 'stalled' (SET)\n      KEYS[2] 'wait',   (LIST)\n      KEYS[3] 'active', (LIST)\n      KEYS[4] 'failed', (ZSET)\n      KEYS[5] 'stalled-check', (KEY)\n      KEYS[6] 'meta', (KEY)\n      KEYS[7] 'paused', (LIST)\n      KEYS[8] 'marker'\n      KEYS[9] 'event stream' (STREAM)\n      ARGV[1]  Max stalled job count\n      ARGV[2]  queue.toKey('')\n      ARGV[3]  timestamp\n      ARGV[4]  max check time\n    Events:\n      'stalled' with stalled job id.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\nlocal stalledKey = KEYS[1]\nlocal waitKey = KEYS[2]\nlocal activeKey = KEYS[3]\nlocal failedKey = KEYS[4]\nlocal stalledCheckKey = KEYS[5]\nlocal metaKey = KEYS[6]\nlocal pausedKey = KEYS[7]\nlocal markerKey = KEYS[8]\nlocal eventStreamKey = KEYS[9]\nlocal maxStalledJobCount = tonumber(ARGV[1])\nlocal queueKeyPrefix = ARGV[2]\nlocal timestamp = ARGV[3]\nlocal maxCheckTime = ARGV[4]\nif rcall(\"EXISTS\", stalledCheckKey) == 1 then return {{}, {}} end\nrcall(\"SET\", stalledCheckKey, timestamp, \"PX\", maxCheckTime)\n-- Trim events before emiting them to avoid trimming events emitted in this script\ntrimEvents(metaKey, eventStreamKey)\n-- Move all stalled jobs to wait\nlocal stalling = rcall('SMEMBERS', stalledKey)\nlocal stalled = {}\nlocal failed = {}\nif (#stalling > 0) then\n    rcall('DEL', stalledKey)\n    -- Remove from active list\n    for i, jobId in ipairs(stalling) do\n        -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n        if string.sub(jobId, 1, 2) == \"0:\" then\n            -- If the jobId is a delay marker ID we just remove it.\n            rcall(\"LREM\", activeKey, 1, jobId)\n        else\n            local jobKey = queueKeyPrefix .. jobId\n            -- Check that the lock is also missing, then we can handle this job as really stalled.\n            if (rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n                --  Remove from the active queue.\n                local removed = rcall(\"LREM\", activeKey, 1, jobId)\n                if (removed > 0) then\n                    -- If this job has been stalled too many times, such as if it crashes the worker, then fail it.\n                    local stalledCount =\n                        rcall(\"HINCRBY\", jobKey, \"stalledCounter\", 1)\n                    if (stalledCount > maxStalledJobCount) then\n                        local jobAttributes = rcall(\"HMGET\", jobKey, \"opts\", \"parent\", \"deid\")\n                        local rawOpts = jobAttributes[1]\n                        local rawParentData = jobAttributes[2]\n                        local opts = cjson.decode(rawOpts)\n                        local removeOnFailType = type(opts[\"removeOnFail\"])\n                        rcall(\"ZADD\", failedKey, timestamp, jobId)\n                        removeDeduplicationKeyIfNeeded(queueKeyPrefix, jobAttributes[3])\n                        local failedReason =\n                            \"job stalled more than allowable limit\"\n                        rcall(\"HMSET\", jobKey, \"failedReason\", failedReason,\n                              \"finishedOn\", timestamp)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"failed\", \"jobId\", jobId, 'prev', 'active',\n                              'failedReason', failedReason)\n                        if rawParentData ~= false then\n                            if opts['fpof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                moveParentFromWaitingChildrenToFailed(\n                                    parentData['queueKey'],\n                                    parentData['queueKey'] .. ':' .. parentData['id'],\n                                    parentData['id'],\n                                    jobKey,\n                                    timestamp\n                                )\n                            elseif opts['idof'] or opts['rdof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                local parentKey = parentData['queueKey'] .. ':' .. parentData['id']\n                                local dependenciesSet = parentKey .. \":dependencies\"\n                                if rcall(\"SREM\", dependenciesSet, jobKey) == 1 then\n                                    moveParentToWaitIfNeeded(parentData['queueKey'], dependenciesSet,\n                                                             parentKey, parentData['id'], timestamp)\n                                    if opts['idof'] then\n                                       local failedSet = parentKey .. \":failed\"\n                                       rcall(\"HSET\", failedSet, jobKey, failedReason)\n                                    end\n                                end\n                            end\n                        end\n                        if removeOnFailType == \"number\" then\n                            removeJobsByMaxCount(opts[\"removeOnFail\"],\n                                                  failedKey, queueKeyPrefix)\n                        elseif removeOnFailType == \"boolean\" then\n                            if opts[\"removeOnFail\"] then\n                                removeJob(jobId, false, queueKeyPrefix,\n                                  false --[[remove debounce key]])\n                                rcall(\"ZREM\", failedKey, jobId)\n                            end\n                        elseif removeOnFailType ~= \"nil\" then\n                            local maxAge = opts[\"removeOnFail\"][\"age\"]\n                            local maxCount = opts[\"removeOnFail\"][\"count\"]\n                            if maxAge ~= nil then\n                                removeJobsByMaxAge(timestamp, maxAge,\n                                                    failedKey, queueKeyPrefix)\n                            end\n                            if maxCount ~= nil and maxCount > 0 then\n                                removeJobsByMaxCount(maxCount, failedKey,\n                                                      queueKeyPrefix)\n                            end\n                        end\n                        table.insert(failed, jobId)\n                    else\n                        local target, isPausedOrMaxed =\n                            getTargetQueueList(metaKey, activeKey, waitKey, pausedKey)\n                        -- Move the job back to the wait queue, to immediately be picked up by a waiting worker.\n                        addJobInTargetList(target, markerKey, \"RPUSH\", isPausedOrMaxed, jobId)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"waiting\", \"jobId\", jobId, 'prev', 'active')\n                        -- Emit the stalled event\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"stalled\", \"jobId\", jobId)\n                        table.insert(stalled, jobId)\n                    end\n                end\n            end\n        end\n    end\nend\n-- Mark potentially stalled jobs\nlocal active = rcall('LRANGE', activeKey, 0, -1)\nif (#active > 0) then\n    for from, to in batches(#active, 7000) do\n        rcall('SADD', stalledKey, unpack(active, from, to))\n    end\nend\nreturn {failed, stalled}","numberOfKeys":9,"readOnly":false,"sha":"b06d5ab6576efcc0e07c6fa2f57923659b3e4a08"},"moveToActive:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move next job to be processed to active, lock it and fetch its data. The job\n  may be delayed, in that case we need to move it to the delayed set instead.\n  This operation guarantees that the worker owns the job during the lock\n  expiration time. The worker is responsible of keeping the lock fresh\n  so that no other worker picks this job again.\n  Input:\n    KEYS[1] wait key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] stream events key\n    KEYS[5] stalled key\n    -- Rate limiting\n    KEYS[6] rate limiter key\n    KEYS[7] delayed key\n    -- Delayed jobs\n    KEYS[8] paused key\n    KEYS[9] meta key\n    KEYS[10] pc priority counter\n    -- Marker\n    KEYS[11] marker key\n    -- Arguments\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] opts\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal rcall = redis.call\nlocal waitKey = KEYS[1]\nlocal activeKey = KEYS[2]\nlocal eventStreamKey = KEYS[4]\nlocal rateLimiterKey = KEYS[6]\nlocal delayedKey = KEYS[7]\nlocal opts = cmsgpack.unpack(ARGV[3])\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[9], activeKey, waitKey, KEYS[8])\n-- Check if there are delayed jobs that we can move to wait.\nlocal markerKey = KEYS[11]\npromoteDelayedJobs(delayedKey, markerKey, target, KEYS[3], eventStreamKey, ARGV[1],\n                   ARGV[2], KEYS[10], isPausedOrMaxed)\nlocal maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\nlocal expireTime = getRateLimitTTL(maxJobs, rateLimiterKey)\n-- Check if we are rate limited first.\nif expireTime > 0 then return {0, 0, expireTime, 0} end\n-- paused or maxed queue\nif isPausedOrMaxed then return {0, 0, 0, 0} end\n-- no job ID, try non-blocking move from wait to active\nlocal jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\n-- Markers in waitlist DEPRECATED in v5: Will be completely removed in v6.\nif jobId and string.sub(jobId, 1, 2) == \"0:\" then\n    rcall(\"LREM\", activeKey, 1, jobId)\n    jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\nend\nif jobId then\n    return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                   maxJobs, opts)\nelse\n    jobId = moveJobFromPriorityToActive(KEYS[3], activeKey, KEYS[10])\n    if jobId then\n        return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                       maxJobs, opts)\n    end\nend\n-- Return the timestamp for the next delayed job if any.\nlocal nextTimestamp = getNextDelayedTimestamp(delayedKey)\nif nextTimestamp ~= nil then return {0, 0, 0, nextTimestamp} end\nreturn {0, 0, 0, 0}\n","numberOfKeys":11,"readOnly":false,"sha":"accb36ea979fc4cd20f4a56e3c4ad6df0ec0b14a"},"moveToDelayed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to delayed set.\n  Input:\n    KEYS[1] marker key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] delayed key\n    KEYS[5] job key\n    KEYS[6] events stream\n    KEYS[7] meta key\n    KEYS[8] stalled key\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] queue token\n    ARGV[5] delay value\n    ARGV[6] skip attempt\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in active set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal jobKey = KEYS[5]\nlocal metaKey = KEYS[7]\nlocal token = ARGV[4] \nif rcall(\"EXISTS\", jobKey) == 1 then\n    local errorCode = removeLock(jobKey, KEYS[8], token, ARGV[3])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local delayedKey = KEYS[4]\n    local jobId = ARGV[3]\n    local delay = tonumber(ARGV[5])\n    local score, delayedTimestamp = getDelayedScore(delayedKey, ARGV[2], delay)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if numRemovedElements < 1 then return -3 end\n    if ARGV[6] == \"0\" then\n        rcall(\"HINCRBY\", jobKey, \"atm\", 1)\n    end\n    rcall(\"HSET\", jobKey, \"delay\", ARGV[5])\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    rcall(\"ZADD\", delayedKey, score, jobId)\n    rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n          \"jobId\", jobId, \"delay\", delayedTimestamp)\n    -- Check if we need to push a marker job to wake up sleeping workers.\n    local markerKey = KEYS[1]\n    addDelayMarkerIfNeeded(markerKey, delayedKey)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"b54cf2d23990cd8eb373f262044967845d31c6a9"},"moveToFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move job from active to a finished status (completed o failed)\n  A job can only be moved to completed if it was active.\n  The job must be locked before it can be moved to a finished status,\n  and the lock must be released in this script.\n    Input:\n      KEYS[1] wait key\n      KEYS[2] active key\n      KEYS[3] prioritized key\n      KEYS[4] event stream key\n      KEYS[5] stalled key\n      -- Rate limiting\n      KEYS[6] rate limiter key\n      KEYS[7] delayed key\n      KEYS[8] paused key\n      KEYS[9] meta key\n      KEYS[10] pc priority counter\n      KEYS[11] completed/failed key\n      KEYS[12] jobId key\n      KEYS[13] metrics key\n      KEYS[14] marker key\n      ARGV[1]  jobId\n      ARGV[2]  timestamp\n      ARGV[3]  msg property returnvalue / failedReason\n      ARGV[4]  return value / failed reason\n      ARGV[5]  target (completed/failed)\n      ARGV[6]  fetch next?\n      ARGV[7]  keys prefix\n      ARGV[8]  opts\n      opts - token - lock token\n      opts - keepJobs\n      opts - lockDuration - lock duration in milliseconds\n      opts - attempts max attempts\n      opts - maxMetricsSize\n      opts - fpof - fail parent on fail\n      opts - idof - ignore dependency on fail\n      opts - rdof - remove dependency on fail\n    Output:\n      0 OK\n      -1 Missing key.\n      -2 Missing lock.\n      -3 Job not in active set\n      -4 Job has pending dependencies\n      -6 Lock is not owned by this client\n    Events:\n      'completed/failed'\n]]\nlocal rcall = redis.call\n--- Includes\n--[[\n  Functions to collect metrics based on a current and previous count of jobs.\n  Granualarity is fixed at 1 minute.\n]] \n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\nlocal function collectMetrics(metaKey, dataPointsList, maxDataPoints,\n                                 timestamp)\n    -- Increment current count\n    local count = rcall(\"HINCRBY\", metaKey, \"count\", 1) - 1\n    -- Compute how many data points we need to add to the list, N.\n    local prevTS = rcall(\"HGET\", metaKey, \"prevTS\")\n    if not prevTS then\n        -- If prevTS is nil, set it to the current timestamp\n        rcall(\"HSET\", metaKey, \"prevTS\", timestamp, \"prevCount\", 0)\n        return\n    end\n    local N = math.min(math.floor(timestamp / 60000) - math.floor(prevTS / 60000), tonumber(maxDataPoints))\n    if N > 0 then\n        local delta = count - rcall(\"HGET\", metaKey, \"prevCount\")\n        -- If N > 1, add N-1 zeros to the list\n        if N > 1 then\n            local points = {}\n            points[1] = delta\n            for i = 2, N do\n                points[i] = 0\n            end\n            for from, to in batches(#points, 7000) do\n                rcall(\"LPUSH\", dataPointsList, unpack(points, from, to))\n            end\n        else\n            -- LPUSH delta to the list\n            rcall(\"LPUSH\", dataPointsList, delta)\n        end\n        -- LTRIM to keep list to its max size\n        rcall(\"LTRIM\", dataPointsList, 0, maxDataPoints - 1)\n        -- update prev count with current count\n        rcall(\"HSET\", metaKey, \"prevCount\", count, \"prevTS\", timestamp)\n    end\nend\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal jobIdKey = KEYS[12]\nif rcall(\"EXISTS\", jobIdKey) == 1 then -- // Make sure job exists\n    local opts = cmsgpack.unpack(ARGV[8])\n    local token = opts['token']\n    local errorCode = removeLock(jobIdKey, KEYS[5], token, ARGV[1])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local attempts = opts['attempts']\n    local maxMetricsSize = opts['maxMetricsSize']\n    local maxCount = opts['keepJobs']['count']\n    local maxAge = opts['keepJobs']['age']\n    if rcall(\"SCARD\", jobIdKey .. \":dependencies\") ~= 0 then -- // Make sure it does not have pending dependencies\n        return -4\n    end\n    local jobAttributes = rcall(\"HMGET\", jobIdKey, \"parentKey\", \"parent\", \"deid\")\n    local parentKey = jobAttributes[1] or \"\"\n    local parentId = \"\"\n    local parentQueueKey = \"\"\n    if jobAttributes[2] ~= false then\n        local jsonDecodedParent = cjson.decode(jobAttributes[2])\n        parentId = jsonDecodedParent['id']\n        parentQueueKey = jsonDecodedParent['queueKey']\n    end\n    local jobId = ARGV[1]\n    local timestamp = ARGV[2]\n    -- Remove from active list (if not active we shall return error)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if (numRemovedElements < 1) then return -3 end\n    local eventStreamKey = KEYS[4]\n    local metaKey = KEYS[9]\n    -- Trim events before emiting them to avoid trimming events emitted in this script\n    trimEvents(metaKey, eventStreamKey)\n    local prefix = ARGV[7]\n    removeDeduplicationKeyIfNeeded(prefix, jobAttributes[3])\n    -- If job has a parent we need to\n    -- 1) remove this job id from parents dependencies\n    -- 2) move the job Id to parent \"processed\" set\n    -- 3) push the results into parent \"results\" list\n    -- 4) if parent's dependencies is empty, then move parent to \"wait/paused\". Note it may be a different queue!.\n    if parentId == \"\" and parentKey ~= \"\" then\n        parentId = getJobIdFromKey(parentKey)\n        parentQueueKey = getJobKeyPrefix(parentKey, \":\" .. parentId)\n    end\n    if parentId ~= \"\" then\n        if ARGV[5] == \"completed\" then\n            local dependenciesSet = parentKey .. \":dependencies\"\n            if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                updateParentDepsIfNeeded(parentKey, parentQueueKey,\n                                         dependenciesSet, parentId, jobIdKey,\n                                         ARGV[4], timestamp)\n            end\n        else\n            if opts['fpof'] then\n                moveParentFromWaitingChildrenToFailed(parentQueueKey, parentKey,\n                                                      parentId, jobIdKey,\n                                                      timestamp)\n            elseif opts['idof'] or opts['rdof'] then\n                local dependenciesSet = parentKey .. \":dependencies\"\n                if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                    moveParentToWaitIfNeeded(parentQueueKey, dependenciesSet,\n                                             parentKey, parentId, timestamp)\n                    if opts['idof'] then\n                        local failedSet = parentKey .. \":failed\"\n                        rcall(\"HSET\", failedSet, jobIdKey, ARGV[4])\n                    end\n                end\n            end\n        end\n    end\n    local attemptsMade = rcall(\"HINCRBY\", jobIdKey, \"atm\", 1)\n    -- Remove job?\n    if maxCount ~= 0 then\n        local targetSet = KEYS[11]\n        -- Add to complete/failed set\n        rcall(\"ZADD\", targetSet, timestamp, jobId)\n        rcall(\"HMSET\", jobIdKey, ARGV[3], ARGV[4], \"finishedOn\", timestamp)\n        -- \"returnvalue\" / \"failedReason\" and \"finishedOn\"\n        -- Remove old jobs?\n        if maxAge ~= nil then\n            removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix)\n        end\n        if maxCount ~= nil and maxCount > 0 then\n            removeJobsByMaxCount(maxCount, targetSet, prefix)\n        end\n    else\n        removeJobKeys(jobIdKey)\n        if parentKey ~= \"\" then\n            -- TODO: when a child is removed when finished, result or failure in parent\n            -- must not be deleted, those value references should be deleted when the parent\n            -- is deleted\n            removeParentDependencyKey(jobIdKey, false, parentKey, jobAttributes[3])\n        end\n    end\n    rcall(\"XADD\", eventStreamKey, \"*\", \"event\", ARGV[5], \"jobId\", jobId, ARGV[3],\n          ARGV[4])\n    if ARGV[5] == \"failed\" then\n        if tonumber(attemptsMade) >= tonumber(attempts) then\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"retries-exhausted\", \"jobId\",\n                  jobId, \"attemptsMade\", attemptsMade)\n        end\n    end\n    -- Collect metrics\n    if maxMetricsSize ~= \"\" then\n        collectMetrics(KEYS[13], KEYS[13] .. ':data', maxMetricsSize, timestamp)\n    end\n    -- Try to get next job to avoid an extra roundtrip if the queue is not closing,\n    -- and not rate limited.\n    if (ARGV[6] == \"1\") then\n        local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[2], KEYS[1], KEYS[8])\n        -- Check if there are delayed jobs that can be promoted\n        promoteDelayedJobs(KEYS[7], KEYS[14], target, KEYS[3], eventStreamKey, prefix,\n                           timestamp, KEYS[10], isPausedOrMaxed)\n        local maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\n        -- Check if we are rate limited first.\n        local expireTime = getRateLimitTTL(maxJobs, KEYS[6])\n        if expireTime > 0 then return {0, 0, expireTime, 0} end\n        -- paused or maxed queue\n        if isPausedOrMaxed then return {0, 0, 0, 0} end\n        jobId = rcall(\"RPOPLPUSH\", KEYS[1], KEYS[2])\n        if jobId then\n            -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n            if string.sub(jobId, 1, 2) == \"0:\" then\n                rcall(\"LREM\", KEYS[2], 1, jobId)\n                -- If jobId is special ID 0:delay (delay greater than 0), then there is no job to process\n                -- but if ID is 0:0, then there is at least 1 prioritized job to process\n                if jobId == \"0:0\" then\n                    jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2],\n                                                        KEYS[10])\n                    return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                                   timestamp, maxJobs,\n                                                   opts)\n                end\n            else\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        else\n            jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2], KEYS[10])\n            if jobId then\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        end\n        -- Return the timestamp for the next delayed job if any.\n        local nextTimestamp = getNextDelayedTimestamp(KEYS[7])\n        if nextTimestamp ~= nil then\n            -- The result is guaranteed to be positive, since the\n            -- ZRANGEBYSCORE command would have return a job otherwise.\n            return {0, 0, 0, nextTimestamp}\n        end\n    end\n    local waitLen = rcall(\"LLEN\", KEYS[1])\n    if waitLen == 0 then\n        local activeLen = rcall(\"LLEN\", KEYS[2])\n        if activeLen == 0 then\n            local prioritizedLen = rcall(\"ZCARD\", KEYS[3])\n            if prioritizedLen == 0 then\n                rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"drained\")\n            end\n        end\n    end\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":14,"readOnly":false,"sha":"12006f44a676d9abd1b94956e52c26b0a23f2d53"},"moveToWaitingChildren:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to waiting children set.\n  Input:\n    KEYS[1] lock key\n    KEYS[2] active key\n    KEYS[3] waitChildrenKey key\n    KEYS[4] job key\n    KEYS[5] stalled key\n    ARGV[1] token\n    ARGV[2] child key\n    ARGV[3] timestamp\n    ARGV[4] the id of the job\n  Output:\n    0 - OK\n    1 - There are not pending dependencies.\n   -1 - Missing job.\n   -2 - Missing lock\n   -3 - Job not in active set\n]]\nlocal rcall = redis.call\nlocal stalledKey = KEYS[5]\n--- Includes\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal function moveToWaitingChildren (activeKey, waitingChildrenKey, jobId,\n    timestamp)\n  local score = tonumber(timestamp)\n  local numRemovedElements = rcall(\"LREM\", activeKey, -1, jobId)\n  if(numRemovedElements < 1) then\n    return -3\n  end\n  rcall(\"ZADD\", waitingChildrenKey, score, jobId)\n  return 0\nend\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  if ARGV[2] ~= \"\" then\n    if rcall(\"SISMEMBER\", KEYS[4] .. \":dependencies\", ARGV[2]) ~= 0 then\n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  else\n    if rcall(\"SCARD\", KEYS[4] .. \":dependencies\") ~= 0 then \n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  end\nend\nreturn -1\n","numberOfKeys":5,"readOnly":false,"sha":"6973c26e3288f458fe6c1018d2e75b11159dc264"},"obliterate:5.23.0":{"keyPrefix":"","lua":"--[[\n  Completely obliterates a queue and all of its contents\n  This command completely destroys a queue including all of its jobs, current or past \n  leaving no trace of its existence. Since this script needs to iterate to find all the job\n  keys, consider that this call may be slow for very large queues.\n  The queue needs to be \"paused\" or it will return an error\n  If the queue has currently active jobs then the script by default will return error,\n  however this behaviour can be overrided using the 'force' option.\n  Input:\n    KEYS[1] meta\n    KEYS[2] base\n    ARGV[1] count\n    ARGV[2] force\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal baseKey = KEYS[2]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nlocal function removeLockKeys(keys)\n  for i, key in ipairs(keys) do\n    rcall(\"DEL\", baseKey .. key .. ':lock')\n  end\nend\n-- 1) Check if paused, if not return with error.\nif rcall(\"HEXISTS\", KEYS[1], \"paused\") ~= 1 then\n  return -1 -- Error, NotPaused\nend\n-- 2) Check if there are active jobs, if there are and not \"force\" return error.\nlocal activeKey = baseKey .. 'active'\nlocal activeJobs = getListItems(activeKey, maxCount)\nif (#activeJobs > 0) then\n  if(ARGV[2] == \"\") then \n    return -2 -- Error, ExistActiveJobs\n  end\nend\nremoveLockKeys(activeJobs)\nmaxCount = removeJobs(activeJobs, true, baseKey, maxCount)\nrcall(\"LTRIM\", activeKey, #activeJobs, -1)\nif(maxCount <= 0) then\n  return 1\nend\nlocal delayedKey = baseKey .. 'delayed'\nmaxCount = removeZSetJobs(delayedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal repeatKey = baseKey .. 'repeat'\nlocal repeatJobsIds = getZSetItems(repeatKey, maxCount)\nfor i, key in ipairs(repeatJobsIds) do\n  local jobKey = repeatKey .. \":\" .. key\n  rcall(\"DEL\", jobKey)\nend\nif(#repeatJobsIds > 0) then\n  for from, to in batches(#repeatJobsIds, 7000) do\n    rcall(\"ZREM\", repeatKey, unpack(repeatJobsIds, from, to))\n  end\nend\nmaxCount = maxCount - #repeatJobsIds\nif(maxCount <= 0) then\n  return 1\nend\nlocal completedKey = baseKey .. 'completed'\nmaxCount = removeZSetJobs(completedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal waitKey = baseKey .. 'paused'\nmaxCount = removeListJobs(waitKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal prioritizedKey = baseKey .. 'prioritized'\nmaxCount = removeZSetJobs(prioritizedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal failedKey = baseKey .. 'failed'\nmaxCount = removeZSetJobs(failedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nif(maxCount > 0) then\n  rcall(\"DEL\",\n    baseKey .. 'events',\n    baseKey .. 'delay', \n    baseKey .. 'stalled-check',\n    baseKey .. 'stalled',\n    baseKey .. 'id',\n    baseKey .. 'pc',\n    baseKey .. 'meta',\n    baseKey .. 'metrics:completed',\n    baseKey .. 'metrics:completed:data',\n    baseKey .. 'metrics:failed',\n    baseKey .. 'metrics:failed:data')\n  return 0\nelse\n  return 1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"373cd929817041e9886b8934d98dcad319bd1fa3"},"paginate:5.23.0":{"keyPrefix":"","lua":"--[[\n    Paginate a set or hash\n    Input:\n      KEYS[1] key pointing to the set or hash to be paginated.\n      ARGV[1]  page start offset\n      ARGV[2]  page end offset (-1 for all the elements)\n      ARGV[3]  cursor\n      ARGV[4]  offset\n      ARGV[5]  max iterations\n      ARGV[6]  fetch jobs?\n    Output:\n      [cursor, offset, items, numItems]\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to achieve pagination for a set or hash.\n  This function simulates pagination in the most efficient way possible\n  for a set using sscan or hscan.\n  The main limitation is that sets are not order preserving, so the\n  pagination is not stable. This means that if the set is modified\n  between pages, the same element may appear in different pages.\n]] -- Maximum number of elements to be returned by sscan per iteration.\nlocal maxCount = 100\n-- Finds the cursor, and returns the first elements available for the requested page.\nlocal function findPage(key, command, pageStart, pageSize, cursor, offset,\n                        maxIterations, fetchJobs)\n    local items = {}\n    local jobs = {}\n    local iterations = 0\n    repeat\n        -- Iterate over the set using sscan/hscan.\n        local result = rcall(command, key, cursor, \"COUNT\", maxCount)\n        cursor = result[1]\n        local members = result[2]\n        local step = 1\n        if command == \"HSCAN\" then\n            step = 2\n        end\n        if #members == 0 then\n            -- If the result is empty, we can return the result.\n            return cursor, offset, items, jobs\n        end\n        local chunkStart = offset\n        local chunkEnd = offset + #members / step\n        local pageEnd = pageStart + pageSize\n        if chunkEnd < pageStart then\n            -- If the chunk is before the page, we can skip it.\n            offset = chunkEnd\n        elseif chunkStart > pageEnd then\n            -- If the chunk is after the page, we can return the result.\n            return cursor, offset, items, jobs\n        else\n            -- If the chunk is overlapping the page, we need to add the elements to the result.\n            for i = 1, #members, step do\n                if offset >= pageEnd then\n                    return cursor, offset, items, jobs\n                end\n                if offset >= pageStart then\n                    local index = #items + 1\n                    if fetchJobs ~= nil then\n                        jobs[#jobs+1] = rcall(\"HGETALL\", members[i])\n                    end\n                    if step == 2 then\n                        items[index] = {members[i], members[i + 1]}\n                    else\n                        items[index] = members[i]\n                    end\n                end\n                offset = offset + 1\n            end\n        end\n        iterations = iterations + 1\n    until cursor == \"0\" or iterations >= maxIterations\n    return cursor, offset, items, jobs\nend\nlocal key = KEYS[1]\nlocal scanCommand = \"SSCAN\"\nlocal countCommand = \"SCARD\"\nlocal type = rcall(\"TYPE\", key)[\"ok\"]\nif type == \"none\" then\n    return {0, 0, {}, 0}\nelseif type == \"hash\" then\n    scanCommand = \"HSCAN\"\n    countCommand = \"HLEN\"\nelseif type ~= \"set\" then\n    return\n        redis.error_reply(\"Pagination is only supported for sets and hashes.\")\nend\nlocal numItems = rcall(countCommand, key)\nlocal startOffset = tonumber(ARGV[1])\nlocal endOffset = tonumber(ARGV[2])\nif endOffset == -1 then \n  endOffset = numItems\nend\nlocal pageSize = (endOffset - startOffset) + 1\nlocal cursor, offset, items, jobs = findPage(key, scanCommand, startOffset,\n                                       pageSize, ARGV[3], tonumber(ARGV[4]),\n                                       tonumber(ARGV[5]), ARGV[6])\nreturn {cursor, offset, items, numItems, jobs}\n","numberOfKeys":1,"readOnly":false,"sha":"24e0a4e97b78f73b314c257b4fff96ebfc207f27"},"pause:5.23.0":{"keyPrefix":"","lua":"--[[\n  Pauses or resumes a queue globably.\n  Input:\n    KEYS[1] 'wait' or 'paused''\n    KEYS[2] 'paused' or 'wait'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] events stream key\n    KEYS[6] 'delayed'\n    KEYS|7] 'marker'\n    ARGV[1] 'paused' or 'resumed'\n  Event:\n    publish paused or resumed event.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\nlocal markerKey = KEYS[7]\nlocal hasJobs = rcall(\"EXISTS\", KEYS[1]) == 1\n--TODO: check this logic to be reused when changing a delay\nif hasJobs then rcall(\"RENAME\", KEYS[1], KEYS[2]) end\nif ARGV[1] == \"paused\" then\n    rcall(\"HSET\", KEYS[3], \"paused\", 1)\n    rcall(\"DEL\", markerKey)\nelse\n    rcall(\"HDEL\", KEYS[3], \"paused\")\n    if hasJobs or rcall(\"ZCARD\", KEYS[4]) > 0 then\n        -- Add marker if there are waiting or priority jobs\n        rcall(\"ZADD\", markerKey, 0, \"0\")\n    else\n        addDelayMarkerIfNeeded(markerKey, KEYS[6])\n    end\nend\nrcall(\"XADD\", KEYS[5], \"*\", \"event\", ARGV[1]);\n","numberOfKeys":7,"readOnly":false,"sha":"b5e8cf4d8b11d432fad7d3f9a78f55ce7f9e5e58"},"promote:5.23.0":{"keyPrefix":"","lua":"--[[\n  Promotes a job that is currently \"delayed\" to the \"waiting\" state\n    Input:\n      KEYS[1] 'delayed'\n      KEYS[2] 'wait'\n      KEYS[3] 'paused'\n      KEYS[4] 'meta'\n      KEYS[5] 'prioritized'\n      KEYS[6] 'active'\n      KEYS[7] 'pc' priority counter\n      KEYS[8] 'event stream'\n      KEYS[9] 'marker'\n      ARGV[1]  queue.toKey('')\n      ARGV[2]  jobId\n    Output:\n       0 - OK\n      -3 - Job not in delayed zset.\n    Events:\n      'waiting'\n]]\nlocal rcall = redis.call\nlocal jobId = ARGV[2]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"ZREM\", KEYS[1], jobId) == 1 then\n    local jobKey = ARGV[1] .. jobId\n    local priority = tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n    local metaKey = KEYS[4]\n    local markerKey = KEYS[9]\n    -- Remove delayed \"marker\" from the wait list if there is any.\n    -- Since we are adding a job we do not need the marker anymore.\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[2], KEYS[3])\n    local marker = rcall(\"LINDEX\", target, 0)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then rcall(\"LPOP\", target) end\n    if priority == 0 then\n        -- LIFO or FIFO\n        addJobInTargetList(target, markerKey, \"LPUSH\", isPausedOrMaxed, jobId)\n    else\n        addJobWithPriority(markerKey, KEYS[5], priority, jobId, KEYS[7], isPausedOrMaxed)\n    end\n    -- Emit waiting event (wait..ing@token)\n    rcall(\"XADD\", KEYS[8], \"*\", \"event\", \"waiting\", \"jobId\", jobId, \"prev\",\n          \"delayed\");\n    rcall(\"HSET\", jobKey, \"delay\", 0)\n    return 0\nelse\n    return -3\nend\n","numberOfKeys":9,"readOnly":false,"sha":"3b1d1df758d39e3939530d7943c8f8b10be81ef5"},"releaseLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Release lock\n    Input:\n      KEYS[1] 'lock',\n      ARGV[1]  token\n      ARGV[2]  lock duration in milliseconds\n    Output:\n      \"OK\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  return rcall(\"DEL\", KEYS[1])\nelse\n  return 0\nend\n","numberOfKeys":1,"readOnly":false,"sha":"aa94dc35fb8a4d637c5faaa49796b6094475e299"},"removeChildDependency:5.23.0":{"keyPrefix":"","lua":"--[[\n  Break parent-child dependency by removing\n  child reference from parent\n  Input:\n    KEYS[1] 'key' prefix,\n    ARGV[1] job key\n    ARGV[2] parent key\n    Output:\n       0  - OK\n       1  - There is not relationship.\n      -1  - Missing job key\n      -5  - Missing parent key\n]]\nlocal rcall = redis.call\nlocal jobKey = ARGV[1]\nlocal parentKey = ARGV[2]\n-- Includes\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nif rcall(\"EXISTS\", jobKey) ~= 1 then return -1 end\nif rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\nif removeParentDependencyKey(jobKey, false, parentKey, KEYS[1], nil) then\n  rcall(\"HDEL\", jobKey, \"parentKey\", \"parent\")\n  return 0\nelse\n  return 1\nend","numberOfKeys":1,"readOnly":false,"sha":"91d0d0ceb4fdecae5b011a6acad7dae6df8b917a"},"removeJob:5.23.0":{"keyPrefix":"","lua":"--[[\n    Remove a job from all the queues it may be in as well as all its data.\n    In order to be able to remove a job, it cannot be active.\n    Input:\n      KEYS[1] queue prefix\n      KEYS[2] meta key\n      ARGV[1] jobId\n      ARGV[2] remove children\n    Events:\n      'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to recursively check if there are no locks\n  on the jobs to be removed.\n  returns:\n    boolean\n]]\nlocal function isLocked( prefix, jobId, removeChildren)\n  local jobKey = prefix .. jobId;\n  -- Check if this job is locked\n  local lockKey = jobKey .. ':lock'\n  local lock = rcall(\"GET\", lockKey)\n  if not lock then\n    if removeChildren == \"1\" then\n      local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n      if (#dependencies > 0) then\n        for i, childJobKey in ipairs(dependencies) do\n          -- We need to get the jobId for this job.\n          local childJobId = getJobIdFromKey(childJobKey)\n          local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n          local result = isLocked( childJobPrefix, childJobId, removeChildren )\n          if result then\n            return true\n          end\n        end\n      end\n    end\n    return false\n  end\n  return true\nend\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove from any state.\n  returns:\n    prev state\n]]\nlocal function removeJobFromAnyState( prefix, jobId)\n  -- We start with the ZSCORE checks, since they have O(1) complexity\n  if rcall(\"ZSCORE\", prefix .. \"completed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"completed\", jobId)\n    return \"completed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"waiting-children\", jobId) then\n    rcall(\"ZREM\", prefix .. \"waiting-children\", jobId)\n    return \"waiting-children\"\n  elseif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"delayed\", jobId)\n    return \"delayed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"failed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"failed\", jobId)\n    return \"failed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"prioritized\", jobId) then\n    rcall(\"ZREM\", prefix .. \"prioritized\", jobId)\n    return \"prioritized\"\n  -- We remove only 1 element from the list, since we assume they are not added multiple times\n  elseif rcall(\"LREM\", prefix .. \"wait\", 1, jobId) == 1 then\n    return \"wait\"\n  elseif rcall(\"LREM\", prefix .. \"paused\", 1, jobId) == 1 then\n    return \"paused\"\n  elseif rcall(\"LREM\", prefix .. \"active\", 1, jobId) == 1 then\n    return \"active\"\n  end\n  return \"unknown\"\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(prefix, jobId, parentKey, removeChildren)\n    local jobKey = prefix .. jobId;\n    removeParentDependencyKey(jobKey, false, parentKey, nil)\n    if removeChildren == \"1\" then\n        -- Check if this job has children\n        -- If so, we are going to try to remove the children recursively in deep first way because\n        -- if some job is locked we must exit with and error.\n        -- local countProcessed = rcall(\"HLEN\", jobKey .. \":processed\")\n        local processed = rcall(\"HGETALL\", jobKey .. \":processed\")\n        if (#processed > 0) then\n            for i = 1, #processed, 2 do\n                local childJobId = getJobIdFromKey(processed[i])\n                local childJobPrefix = getJobKeyPrefix(processed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n        if (#dependencies > 0) then\n            for i, childJobKey in ipairs(dependencies) do\n                -- We need to get the jobId for this job.\n                local childJobId = getJobIdFromKey(childJobKey)\n                local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local failed = rcall(\"HGETALL\", jobKey .. \":failed\")\n        if (#failed > 0) then\n            for i = 1, #failed, 2 do\n                local childJobId = getJobIdFromKey(failed[i])\n                local childJobPrefix = getJobKeyPrefix(failed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n    end\n    local prev = removeJobFromAnyState(prefix, jobId)\n    removeDeduplicationKey(prefix, jobKey)\n    if removeJobKeys(jobKey) > 0 then\n        local maxEvents = getOrSetMaxEvents(KEYS[2])\n        rcall(\"XADD\", prefix .. \"events\", \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"removed\", \"jobId\", jobId, \"prev\",\n            prev)\n    end\nend\nlocal prefix = KEYS[1]\nlocal jobId = ARGV[1]\nlocal shouldRemoveChildren = ARGV[2]\nlocal jobKey = prefix .. jobId\n-- Check if the job belongs to a job scheduler and it is in delayed state.\nif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) and rcall(\"HGET\", jobKey, \"rjk\") then\n    return -8 -- Return error code as the job is part of a job scheduler and is in delayed state.\nend\nif not isLocked(prefix, jobId, shouldRemoveChildren) then\n    removeJob(prefix, jobId, nil, shouldRemoveChildren)\n    return 1\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"6ab3da66c7019f2baed32b1b6ded3d70871a9882"},"removeJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] job schedulers key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] job scheduler id\n    ARGV[2] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal jobSchedulerId = ARGV[1]\nlocal prefix = ARGV[2]\nlocal millis = rcall(\"ZSCORE\", KEYS[1], jobSchedulerId)\nif millis then\n  -- Delete next programmed job.\n  local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], delayedJobId) == 1) then\n    removeJobKeys(prefix .. delayedJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", delayedJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], jobSchedulerId) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. jobSchedulerId)\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"97fea98805553999aa91f7168443955f40975f20"},"removeRepeatable:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] repeat jobs key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] old repeat job id\n    ARGV[2] options concat\n    ARGV[3] repeat job key\n    ARGV[4] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\nlocal millis = rcall(\"ZSCORE\", KEYS[1], ARGV[2])\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n-- legacy removal TODO: remove in next breaking change\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = ARGV[1] .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\");\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[2]) == 1) then\n  return 0\nend\n-- new removal\nmillis = rcall(\"ZSCORE\", KEYS[1], ARGV[3])\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = \"repeat:\" .. ARGV[3] .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[3]) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. ARGV[3])\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"8b7754dbe8ee0938a634f0bfd43cfa41084e2074"},"reprocessJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Attempts to reprocess a job\n  Input:\n    KEYS[1] job key\n    KEYS[2] events stream\n    KEYS[3] job state\n    KEYS[4] wait key\n    KEYS[5] meta\n    KEYS[6] paused key\n    KEYS[7] active key\n    KEYS[8] marker key\n    ARGV[1] job.id\n    ARGV[2] (job.opts.lifo ? 'R' : 'L') + 'PUSH'\n    ARGV[3] propVal - failedReason/returnvalue\n    ARGV[4] prev state - failed/completed\n  Output:\n     1 means the operation was a success\n    -1 means the job does not exist\n    -3 means the job was not found in the expected set.\n]]\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  local jobId = ARGV[1]\n  if (rcall(\"ZREM\", KEYS[3], jobId) == 1) then\n    rcall(\"HDEL\", KEYS[1], \"finishedOn\", \"processedOn\", ARGV[3])\n    local target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[7], KEYS[4], KEYS[6])\n    addJobInTargetList(target, KEYS[8], ARGV[2], isPausedOrMaxed, jobId)\n    local maxEvents = getOrSetMaxEvents(KEYS[5])\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId, \"prev\", ARGV[4]);\n    return 1\n  else\n    return -3\n  end\nelse\n  return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"8dda09f0ada31675974dc60c7d149ee15b0743b9"},"retryJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Retries a failed job by moving it back to the wait queue.\n    Input:\n      KEYS[1]  'active',\n      KEYS[2]  'wait'\n      KEYS[3]  'paused'\n      KEYS[4]  job key\n      KEYS[5]  'meta'\n      KEYS[6]  events stream\n      KEYS[7]  delayed key\n      KEYS[8]  prioritized key\n      KEYS[9]  'pc' priority counter\n      KEYS[10] 'marker'\n      KEYS[11] 'stalled'\n      ARGV[1]  key prefix\n      ARGV[2]  timestamp\n      ARGV[3]  pushCmd\n      ARGV[4]  jobId\n      ARGV[5]  token\n    Events:\n      'waiting'\n    Output:\n     0  - OK\n     -1 - Missing key\n     -2 - Missing lock\n     -3 - Job not in active set\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[1], KEYS[2], KEYS[3])\nlocal markerKey = KEYS[10]\n-- Check if there are delayed jobs that we can move to wait.\n-- test example: when there are delayed jobs between retries\npromoteDelayedJobs(KEYS[7], markerKey, target, KEYS[8], KEYS[6], ARGV[1], ARGV[2], KEYS[9], isPausedOrMaxed)\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  local errorCode = removeLock(KEYS[4], KEYS[11], ARGV[5], ARGV[4]) \n  if errorCode < 0 then\n    return errorCode\n  end\n  local numRemovedElements = rcall(\"LREM\", KEYS[1], -1, ARGV[4])\n  if (numRemovedElements < 1) then return -3 end\n  local priority = tonumber(rcall(\"HGET\", KEYS[4], \"priority\")) or 0\n  --need to re-evaluate after removing job from active\n  isPausedOrMaxed = isQueuePausedOrMaxed(KEYS[5], KEYS[1])\n  -- Standard or priority add\n  if priority == 0 then\n    addJobInTargetList(target, markerKey, ARGV[3], isPausedOrMaxed, ARGV[4])\n  else\n    addJobWithPriority(markerKey, KEYS[8], priority, ARGV[4], KEYS[9], isPausedOrMaxed)\n  end\n  rcall(\"HINCRBY\", KEYS[4], \"atm\", 1)\n  local maxEvents = getOrSetMaxEvents(KEYS[5])\n  -- Emit waiting event\n  rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n    \"jobId\", ARGV[4], \"prev\", \"failed\")\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":11,"readOnly":false,"sha":"6076d6fc973ce8afee9cb60d78b0c0b6bd5eae4c"},"saveStacktrace:5.23.0":{"keyPrefix":"","lua":"--[[\n  Save stacktrace and failedReason.\n  Input:\n    KEYS[1] job key\n    ARGV[1]  stacktrace\n    ARGV[2]  failedReason\n  Output:\n     0 - OK\n    -1 - Missing key\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  rcall(\"HMSET\", KEYS[1], \"stacktrace\", ARGV[1], \"failedReason\", ARGV[2])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"ab2818154a3f405adad5e01b769e79c50fb9e615"},"updateData:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job data\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] data\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\",KEYS[1]) == 1 then -- // Make sure job exists\n  rcall(\"HSET\", KEYS[1], \"data\", ARGV[1])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"12a42ffd90c486a7f398fbb17cdcdd484f4abaea"},"updateJobOption:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update a job option\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] field\n    ARGV[2] value\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local opts = rcall(\"HGET\", KEYS[1], \"opts\")\n    local jsonOpts = cjson.decode(opts)\n    jsonOpts[ARGV[1]] = ARGV[2]\n    rcall(\"HSET\", KEYS[1], \"opts\", cjson.encode(jsonOpts))\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"03691d12e8d0415d9c65afda83999f77432e7d1a"},"updateProgress:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job progress\n  Input:\n    KEYS[1] Job id key\n    KEYS[2] event stream key\n    KEYS[3] meta key\n    ARGV[1] id\n    ARGV[2] progress\n  Output:\n     0 - OK\n    -1 - Missing job.\n  Event:\n    progress(jobId, progress)\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local maxEvents = getOrSetMaxEvents(KEYS[3])\n    rcall(\"HSET\", KEYS[1], \"progress\", ARGV[2])\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"progress\",\n          \"jobId\", ARGV[1], \"data\", ARGV[2]);\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":3,"readOnly":false,"sha":"ddd7da9c6be4b31a479136c66425bef0bc2a047f"},"updateRepeatableJobMillis:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      ARGV[1] next milliseconds\n      ARGV[2] custom key\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal nextMillis = ARGV[1]\nlocal customKey = ARGV[2]\nlocal legacyCustomKey = ARGV[3]\nif rcall(\"ZSCORE\", repeatKey, customKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n    return customKey\nelseif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, legacyCustomKey)\n    return legacyCustomKey\nend\nreturn ''\n","numberOfKeys":1,"readOnly":false,"sha":"18e65990db4c93586838c27a5975ee2d3a63ce00"}},"status":"ready","stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"_events":{},"_eventsCount":2,"blocking":true,"capabilities":{"canBlockFor1Ms":true,"canDoubleTimeout":true},"initializing":{},"opts":{"connectionName":"bull:dGFza3M=","host":"192.168.10.2","maxRetriesPerRequest":null,"port":6379},"shared":false,"skipVersionCheck":false,"status":"ready","version":"7.4.1"},"closed":false,"connection":{"_client":{"_autoPipelines":{},"_events":{},"_eventsCount":3,"_maxListeners":13,"_runningAutoPipelines":{},"addedBuiltinSet":{},"commandQueue":{"_capacityMask":3,"_head":1,"_list":[null,null,null,null],"_tail":1},"condition":{"auth":null,"select":0,"subscriber":false},"connectionEpoch":1,"connector":{"connecting":true,"disconnectTimeout":2000,"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":null,"db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"isCluster":false,"manuallyClosing":false,"offlineQueue":{"_capacityMask":3,"_head":0,"_list":[null,null,null,null],"_tail":0},"options":{"autoPipeliningIgnoredCommands":[],"autoResendUnfulfilledCommands":true,"autoResubscribe":true,"connectTimeout":10000,"connectionName":null,"db":0,"disconnectTimeout":2000,"enableAutoPipelining":false,"enableOfflineQueue":true,"enableReadyCheck":true,"enableTLSForSentinelMode":false,"failoverDetector":false,"family":4,"host":"192.168.10.2","keepAlive":0,"keyPrefix":"","lazyConnect":false,"maxLoadingRetryTime":10000,"maxRetriesPerRequest":null,"name":null,"natMap":null,"noDelay":true,"password":null,"port":6379,"readOnly":false,"reconnectOnError":null,"role":"master","sentinelMaxConnections":10,"sentinels":null,"stringNumbers":false,"updateSentinels":true,"username":null},"reconnectTimeout":null,"retryAttempts":0,"scriptsSet":{"addDelayedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a delayed job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - computes timestamp.\n    - adds to delayed zset.\n    - Emits a global event 'delayed' if the job is delayed.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'delayed'\n      KEYS[5] 'completed'\n      KEYS[6] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (use custom instead of one generated automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n          x [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal delayedKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal eventsKey = KEYS[6]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\nlocal score, delayedTimestamp = getDelayedScore(delayedKey, timestamp, tonumber(delay))\nrcall(\"ZADD\", delayedKey, score, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n      \"jobId\", jobId, \"delay\", delayedTimestamp)\n-- mark that a delayed job is available\nlocal markerKey = KEYS[1]\naddDelayMarkerIfNeeded(markerKey, delayedKey)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":6,"readOnly":false,"sha":"28d826f4b47e91d4e296526a4f9dd0e6e87f4030"},"addJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job scheduler, i.e. a job factory that creates jobs based on a given schedule (repeat options).\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] jobs scheduler id\n      ARGV[4] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal jobSchedulerId = ARGV[3]\nlocal prefixKey = ARGV[4]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, jobSchedulerId)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. jobSchedulerId, \"name\", opts['name'],\n    unpack(optionalValues))\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, jobSchedulerId)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. jobSchedulerId .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. jobSchedulerId .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\nreturn storeRepeatableJob(repeatKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"a5a24f643c0294143ec2a981e63344699d31b6db"},"addLog:5.23.0":{"keyPrefix":"","lua":"--[[\n  Add job log\n  Input:\n    KEYS[1] job id key\n    KEYS[2] job logs key\n    ARGV[1] id\n    ARGV[2] log\n    ARGV[3] keepLogs\n  Output:\n    -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n  local logCount = rcall(\"RPUSH\", KEYS[2], ARGV[2])\n  if ARGV[3] ~= '' then\n    local keepLogs = tonumber(ARGV[3])\n    rcall(\"LTRIM\", KEYS[2], -keepLogs, -1)\n    return math.min(keepLogs, logCount)\n  end\n  return logCount\nelse\n  return -1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"eecb06ad6c96fa5da4fa8bca0ea7a1bf1bf62f18"},"addParentJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a parent job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - adds the job to the waiting-children zset\n    Input:\n      KEYS[1] 'meta'\n      KEYS[2] 'id'\n      KEYS[3] 'completed'\n      KEYS[4] events stream key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal metaKey = KEYS[1]\nlocal idKey = KEYS[2]\nlocal completedKey = KEYS[3]\nlocal eventsKey = KEYS[4]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal waitChildrenKey = args[6]\nrcall(\"ZADD\", waitChildrenKey, timestamp, jobId)\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n      \"waiting-children\", \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":4,"readOnly":false,"sha":"8b4682aa777886ad4a5c60c3f528309f3721d472"},"addPrioritizedJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a priotitized job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'marker',\n      KEYS[2] 'meta'\n      KEYS[3] 'id'\n      KEYS[4] 'prioritized'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] 'pc' priority counter\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]] \nlocal metaKey = KEYS[2]\nlocal idKey = KEYS[3]\nlocal priorityKey = KEYS[4]\nlocal completedKey = KEYS[5]\nlocal activeKey = KEYS[6]\nlocal eventsKey = KEYS[7]\nlocal priorityCounterKey = KEYS[8]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", idKey)\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, completedKey, eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nlocal delay, priority = storeJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2],\n                                 opts, timestamp, parentKey, parentData,\n                                 repeatJobKey)\n-- Add the job to the prioritized set\nlocal isPausedOrMaxed = isQueuePausedOrMaxed(metaKey, activeKey)\naddJobWithPriority( KEYS[1], priorityKey, priority, jobId, priorityCounterKey, isPausedOrMaxed)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"9941c303fd1cd31a262324a90c1cd7236c5022d5"},"addRepeatableJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      KEYS[2] 'delayed' key\n      ARGV[1] next milliseconds\n      ARGV[2] msgpacked options\n            [1]  name\n            [2]  tz?\n            [3]  patten?\n            [4]  endDate?\n            [5]  every?\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      ARGV[4] custom key\n      ARGV[5] prefix key\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal delayedKey = KEYS[2]\nlocal nextMillis = ARGV[1]\nlocal legacyCustomKey = ARGV[3]\nlocal customKey = ARGV[4]\nlocal prefixKey = ARGV[5]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function storeRepeatableJob(repeatKey, customKey, nextMillis, rawOpts)\n  rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n  local opts = cmsgpack.unpack(rawOpts)\n  local optionalValues = {}\n  if opts['tz'] then\n    table.insert(optionalValues, \"tz\")\n    table.insert(optionalValues, opts['tz'])\n  end\n  if opts['pattern'] then\n    table.insert(optionalValues, \"pattern\")\n    table.insert(optionalValues, opts['pattern'])\n  end\n  if opts['endDate'] then\n    table.insert(optionalValues, \"endDate\")\n    table.insert(optionalValues, opts['endDate'])\n  end\n  if opts['every'] then\n    table.insert(optionalValues, \"every\")\n    table.insert(optionalValues, opts['every'])\n  end\n  rcall(\"HMSET\", repeatKey .. \":\" .. customKey, \"name\", opts['name'],\n    unpack(optionalValues))\n  return customKey\nend\n-- If we are overriding a repeatable job we must delete the delayed job for\n-- the next iteration.\nlocal prevMillis = rcall(\"ZSCORE\", repeatKey, customKey)\nif prevMillis ~= false then\n  local delayedJobId =  \"repeat:\" .. customKey .. \":\" .. prevMillis\n  local nextDelayedJobId =  repeatKey .. \":\" .. customKey .. \":\" .. nextMillis\n  if rcall(\"ZSCORE\", delayedKey, delayedJobId) ~= false\n   and rcall(\"EXISTS\", nextDelayedJobId) ~= 1 then\n    removeJob(delayedJobId, true, prefixKey, true --[[remove debounce key]])\n    rcall(\"ZREM\", delayedKey, delayedJobId)\n  end\nend\n-- Keep backwards compatibility with old repeatable jobs (<= 3.0.0)\nif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n  return storeRepeatableJob(repeatKey, legacyCustomKey, nextMillis, ARGV[2])\nend\nreturn storeRepeatableJob(repeatKey, customKey, nextMillis, ARGV[2])\n","numberOfKeys":2,"readOnly":false,"sha":"c01242e2652ac7c1e5f276b7d6c849375b22d1a7"},"addStandardJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a job to the queue by doing the following:\n    - Increases the job counter if needed.\n    - Creates a new job key with the job data.\n    - if delayed:\n      - computes timestamp.\n      - adds to delayed zset.\n      - Emits a global event 'delayed' if the job is delayed.\n    - if not delayed\n      - Adds the jobId to the wait/paused list in one of three ways:\n         - LIFO\n         - FIFO\n         - prioritized.\n      - Adds the job to the \"added\" list so that workers gets notified.\n    Input:\n      KEYS[1] 'wait',\n      KEYS[2] 'paused'\n      KEYS[3] 'meta'\n      KEYS[4] 'id'\n      KEYS[5] 'completed'\n      KEYS[6] 'active'\n      KEYS[7] events stream key\n      KEYS[8] marker key\n      ARGV[1] msgpacked arguments array\n            [1]  key prefix,\n            [2]  custom id (will not generate one automatically)\n            [3]  name\n            [4]  timestamp\n            [5]  parentKey?\n            [6]  waitChildrenKey key.\n            [7]  parent dependencies key.\n            [8]  parent? {id, queueKey}\n            [9]  repeat job key\n            [10] deduplication key\n      ARGV[2] Json stringified job data\n      ARGV[3] msgpacked options\n      Output:\n        jobId  - OK\n        -5     - Missing parent key\n]]\nlocal eventsKey = KEYS[7]\nlocal jobId\nlocal jobIdKey\nlocal rcall = redis.call\nlocal args = cmsgpack.unpack(ARGV[1])\nlocal data = ARGV[2]\nlocal opts = cmsgpack.unpack(ARGV[3])\nlocal parentKey = args[5]\nlocal parent = args[8]\nlocal repeatJobKey = args[9]\nlocal deduplicationKey = args[10]\nlocal parentData\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to debounce a job.\n]]\nlocal function deduplicateJob(prefixKey, deduplicationOpts, jobId, deduplicationKey, eventsKey, maxEvents)\n  local deduplicationId = deduplicationOpts and deduplicationOpts['id']\n  if deduplicationId then\n    local ttl = deduplicationOpts['ttl']\n    local deduplicationKeyExists\n    if ttl then\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'PX', ttl, 'NX')\n    else\n      deduplicationKeyExists = not rcall('SET', deduplicationKey, jobId, 'NX')\n    end\n    if deduplicationKeyExists then\n      local currentDebounceJobId = rcall('GET', deduplicationKey)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"debounced\", \"jobId\", currentDebounceJobId, \"debounceId\", deduplicationId)\n      rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n        \"deduplicated\", \"jobId\", currentDebounceJobId, \"deduplicationId\", deduplicationId)\n      return currentDebounceJobId\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to handle the case when job is duplicated.\n]]\n-- Includes\n--[[\n    This function is used to update the parent's dependencies if the job\n    is already completed and about to be ignored. The parent must get its\n    dependencies updated to avoid the parent job being stuck forever in \n    the waiting-children state.\n]]\n-- Includes\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal function updateExistingJobsParent(parentKey, parent, parentData,\n                                        parentDependenciesKey, completedKey,\n                                        jobIdKey, jobId, timestamp)\n    if parentKey ~= nil then\n        if rcall(\"ZSCORE\", completedKey, jobId) ~= false then\n            local returnvalue = rcall(\"HGET\", jobIdKey, \"returnvalue\")\n            updateParentDepsIfNeeded(parentKey, parent['queueKey'],\n                                     parentDependenciesKey, parent['id'],\n                                     jobIdKey, returnvalue, timestamp)\n        else\n            if parentDependenciesKey ~= nil then\n                rcall(\"SADD\", parentDependenciesKey, jobIdKey)\n            end\n        end\n        rcall(\"HMSET\", jobIdKey, \"parentKey\", parentKey, \"parent\", parentData)\n    end\nend\nlocal function handleDuplicatedJob(jobKey, jobId, currentParentKey, currentParent,\n  parentData, parentDependenciesKey, completedKey, eventsKey, maxEvents, timestamp)\n  local existedParentKey = rcall(\"HGET\", jobKey, \"parentKey\")\n  if not existedParentKey or existedParentKey == currentParentKey then\n    updateExistingJobsParent(currentParentKey, currentParent, parentData,\n      parentDependenciesKey, completedKey, jobKey,\n      jobId, timestamp)\n  else\n    if currentParentKey ~= nil and currentParentKey ~= existedParentKey\n      and (rcall(\"EXISTS\", existedParentKey) == 1) then\n      return -7\n    end\n  end\n  rcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n    \"duplicated\", \"jobId\", jobId)\n  return jobId .. \"\" -- convert to string\nend\n--[[\n  Function to store a job\n]]\nlocal function storeJob(eventsKey, jobIdKey, jobId, name, data, opts, timestamp,\n                        parentKey, parentData, repeatJobKey)\n    local jsonOpts = cjson.encode(opts)\n    local delay = opts['delay'] or 0\n    local priority = opts['priority'] or 0\n    local debounceId = opts['de'] and opts['de']['id']\n    local optionalValues = {}\n    if parentKey ~= nil then\n        table.insert(optionalValues, \"parentKey\")\n        table.insert(optionalValues, parentKey)\n        table.insert(optionalValues, \"parent\")\n        table.insert(optionalValues, parentData)\n    end\n    if repeatJobKey ~= nil then\n        table.insert(optionalValues, \"rjk\")\n        table.insert(optionalValues, repeatJobKey)\n    end\n    if debounceId then\n        table.insert(optionalValues, \"deid\")\n        table.insert(optionalValues, debounceId)\n    end\n    rcall(\"HMSET\", jobIdKey, \"name\", name, \"data\", data, \"opts\", jsonOpts,\n          \"timestamp\", timestamp, \"delay\", delay, \"priority\", priority,\n          unpack(optionalValues))\n    rcall(\"XADD\", eventsKey, \"*\", \"event\", \"added\", \"jobId\", jobId, \"name\", name)\n    return delay, priority\nend\nif parentKey ~= nil then\n    if rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\n    parentData = cjson.encode(parent)\nend\nlocal jobCounter = rcall(\"INCR\", KEYS[4])\nlocal metaKey = KEYS[3]\nlocal maxEvents = getOrSetMaxEvents(metaKey)\nlocal parentDependenciesKey = args[7]\nlocal timestamp = args[4]\nif args[2] == \"\" then\n    jobId = jobCounter\n    jobIdKey = args[1] .. jobId\nelse\n    jobId = args[2]\n    jobIdKey = args[1] .. jobId\n    if rcall(\"EXISTS\", jobIdKey) == 1 then\n        return handleDuplicatedJob(jobIdKey, jobId, parentKey, parent,\n            parentData, parentDependenciesKey, KEYS[5], eventsKey,\n            maxEvents, timestamp)\n    end\nend\nlocal deduplicationJobId = deduplicateJob(args[1], opts['de'],\n  jobId, deduplicationKey, eventsKey, maxEvents)\nif deduplicationJobId then\n  return deduplicationJobId\nend\n-- Store the job.\nstoreJob(eventsKey, jobIdKey, jobId, args[3], ARGV[2], opts, timestamp,\n         parentKey, parentData, repeatJobKey)\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[1], KEYS[2])\n-- LIFO or FIFO\nlocal pushCmd = opts['lifo'] and 'RPUSH' or 'LPUSH'\naddJobInTargetList(target, KEYS[8], pushCmd, isPausedOrMaxed, jobId)\n-- Emit waiting event\nrcall(\"XADD\", eventsKey, \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n-- Check if this job is a child of another job, if so add it to the parents dependencies\nif parentDependenciesKey ~= nil then\n    rcall(\"SADD\", parentDependenciesKey, jobIdKey)\nend\nreturn jobId .. \"\" -- convert to string\n","numberOfKeys":8,"readOnly":false,"sha":"a7b39766da8f5ced70f465297396dd83e550ceed"},"changeDelay:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job delay when it is in delayed set.\n  Input:\n    KEYS[1] delayed key\n    KEYS[2] meta key\n    KEYS[3] marker key\n    KEYS[4] events stream\n    ARGV[1] delay\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] job key\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in delayed set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", ARGV[4]) == 1 then\n  local jobId = ARGV[3]\n  local delay = tonumber(ARGV[1])\n  local score, delayedTimestamp = getDelayedScore(KEYS[1], ARGV[2], delay)\n  local numRemovedElements = rcall(\"ZREM\", KEYS[1], jobId)\n  if numRemovedElements < 1 then\n    return -3\n  end\n  rcall(\"HSET\", ARGV[4], \"delay\", delay)\n  rcall(\"ZADD\", KEYS[1], score, jobId)\n  local maxEvents = getOrSetMaxEvents(KEYS[2])\n  rcall(\"XADD\", KEYS[4], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n    \"jobId\", jobId, \"delay\", delayedTimestamp)\n  -- mark that a delayed job is available\n  addDelayMarkerIfNeeded(KEYS[3], KEYS[1])\n  return 0\nelse\n  return -1\nend","numberOfKeys":4,"readOnly":false,"sha":"d7704f63de52505e835193d552148741ae9770b8"},"changePriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Change job priority\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'active'\n    KEYS[6] 'pc' priority counter\n    KEYS[7] 'marker'\n    ARGV[1] priority value\n    ARGV[2] prefix key\n    ARGV[3] job id\n    ARGV[4] lifo\n    Output:\n       0  - OK\n      -1  - Missing job\n]]\nlocal jobId = ARGV[3]\nlocal jobKey = ARGV[2] .. jobId\nlocal priority = tonumber(ARGV[1])\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\nlocal function reAddJobWithNewPriority( prioritizedKey, markerKey, targetKey,\n    priorityCounter, lifo, priority, jobId, isPausedOrMaxed)\n    if priority == 0 then\n        local pushCmd = lifo and 'RPUSH' or 'LPUSH'\n        addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n    else\n        if lifo then\n            pushBackJobWithPriority(prioritizedKey, priority, jobId)\n        else\n            addJobWithPriority(markerKey, prioritizedKey, priority, jobId,\n                priorityCounter, isPausedOrMaxed)\n        end\n    end\nend\nif rcall(\"EXISTS\", jobKey) == 1 then\n    local metaKey = KEYS[3]\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[5], KEYS[1], KEYS[2])\n    local prioritizedKey = KEYS[4]\n    local priorityCounterKey = KEYS[6]\n    local markerKey = KEYS[7]\n    -- Re-add with the new priority\n    if rcall(\"ZREM\", prioritizedKey, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    elseif rcall(\"LREM\", target, -1, jobId) > 0 then\n        reAddJobWithNewPriority( prioritizedKey, markerKey, target,\n            priorityCounterKey, ARGV[4] == '1', priority, jobId, isPausedOrMaxed)\n    end\n    rcall(\"HSET\", jobKey, \"priority\", priority)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":7,"readOnly":false,"sha":"0712f368ed58c17e481d319f364e46cbf665b95b"},"cleanJobsInSet:5.23.0":{"keyPrefix":"","lua":"--[[\n  Remove jobs from the specific set.\n  Input:\n    KEYS[1]  set key,\n    KEYS[2]  events stream key\n    KEYS[3]  job schedulers key\n    ARGV[1]  jobKey prefix\n    ARGV[2]  timestamp\n    ARGV[3]  limit the number of jobs to be removed. 0 is unlimited\n    ARGV[4]  set name, can be any of 'wait', 'active', 'paused', 'delayed', 'completed', or 'failed'\n]]\nlocal rcall = redis.call\nlocal rangeStart = 0\nlocal rangeEnd = -1\nlocal limit = tonumber(ARGV[3])\n-- If we're only deleting _n_ items, avoid retrieving all items\n-- for faster performance\n--\n-- Start from the tail of the list, since that's where oldest elements\n-- are generally added for FIFO lists\nif limit > 0 then\n  rangeStart = -1 - limit + 1\n  rangeEnd = -1\nend\n-- Includes\n--[[\n  Function to clean job list.\n  Returns jobIds and deleted count number.\n]]\n-- Includes\n--[[\n  Function to get the latest saved timestamp.\n]]\nlocal function getTimestamp(jobKey, attributes)\n  if #attributes == 1 then\n    return rcall(\"HGET\", jobKey, attributes[1])\n  end\n  local jobTs\n  for _, ts in ipairs(rcall(\"HMGET\", jobKey, unpack(attributes))) do\n    if (ts) then\n      jobTs = ts\n      break\n    end\n  end\n  return jobTs\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function cleanList(listKey, jobKeyPrefix, rangeStart, rangeEnd,\n  timestamp, isWaiting)\n  local jobs = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  local deleted = {}\n  local deletedCount = 0\n  local jobTS\n  local deletionMarker = ''\n  local jobIdsLen = #jobs\n  for i, job in ipairs(jobs) do\n    if limit > 0 and deletedCount >= limit then\n      break\n    end\n    local jobKey = jobKeyPrefix .. job\n    if (isWaiting or rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n      -- Find the right timestamp of the job to compare to maxTimestamp:\n      -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n      -- * processedOn represents when the job was last attempted, but it doesn't get populated until\n      --   the job is first tried\n      -- * timestamp is the original job submission time\n      -- Fetch all three of these (in that order) and use the first one that is set so that we'll leave jobs\n      -- that have been active within the grace period:\n      jobTS = getTimestamp(jobKey, {\"finishedOn\", \"processedOn\", \"timestamp\"})\n      if (not jobTS or jobTS <= timestamp) then\n        -- replace the entry with a deletion marker; the actual deletion will\n        -- occur at the end of the script\n        rcall(\"LSET\", listKey, rangeEnd - jobIdsLen + i, deletionMarker)\n        removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]])\n        deletedCount = deletedCount + 1\n        table.insert(deleted, job)\n      end\n    end\n  end\n  rcall(\"LREM\", listKey, 0, deletionMarker)\n  return {deleted, deletedCount}\nend\n--[[\n  Function to clean job set.\n  Returns jobIds and deleted count number.\n]] \n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  We use ZRANGEBYSCORE to make the case where we're deleting a limited number\n  of items in a sorted set only run a single iteration. If we simply used\n  ZRANGE, we may take a long time traversing through jobs that are within the\n  grace period.\n]]\nlocal function getJobsInZset(zsetKey, rangeEnd, limit)\n  if limit > 0 then\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd, \"LIMIT\", 0, limit)\n  else\n    return rcall(\"ZRANGEBYSCORE\", zsetKey, 0, rangeEnd)\n  end\nend\nlocal function isJobSchedulerJob(jobId, jobSchedulersKey)\n    if jobSchedulersKey then\n        local jobSchedulerId = jobId:match(\"repeat:(.*):%d+\")\n        if jobSchedulerId then\n            return rcall(\"ZSCORE\", jobSchedulersKey, jobSchedulerId)\n        end\n    end\n    return false\nend\nlocal function cleanSet(\n    setKey,\n    jobKeyPrefix,\n    rangeEnd,\n    timestamp,\n    limit,\n    attributes,\n    isFinished,\n    jobSchedulersKey)\n    local jobs = getJobsInZset(setKey, rangeEnd, limit)\n    local deleted = {}\n    local deletedCount = 0\n    local jobTS\n    for i, job in ipairs(jobs) do\n        if limit > 0 and deletedCount >= limit then\n            break\n        end\n        -- Extract a Job Scheduler Id from jobId (\"repeat:job-scheduler-id:millis\") \n        -- and check if it is in the scheduled jobs\n        if not isJobSchedulerJob(job, jobSchedulersKey) then\n            local jobKey = jobKeyPrefix .. job\n            if isFinished then\n                removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                deletedCount = deletedCount + 1\n                table.insert(deleted, job)\n            else\n                -- * finishedOn says when the job was completed, but it isn't set unless the job has actually completed\n                jobTS = getTimestamp(jobKey, attributes)\n                if (not jobTS or jobTS <= timestamp) then\n                    removeJob(job, true, jobKeyPrefix, true --[[remove debounce key]] )\n                    deletedCount = deletedCount + 1\n                    table.insert(deleted, job)\n                end\n            end\n        end\n    end\n    if (#deleted > 0) then\n        for from, to in batches(#deleted, 7000) do\n            rcall(\"ZREM\", setKey, unpack(deleted, from, to))\n        end\n    end\n    return {deleted, deletedCount}\nend\nlocal result\nif ARGV[4] == \"active\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], false --[[ hasFinished ]])\nelseif ARGV[4] == \"delayed\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"processedOn\", \"timestamp\"}, false  --[[ hasFinished ]], KEYS[3])\nelseif ARGV[4] == \"prioritized\" then\n  rangeEnd = \"+inf\"\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"timestamp\"}, false  --[[ hasFinished ]])\nelseif ARGV[4] == \"wait\" or ARGV[4] == \"paused\" then\n  result = cleanList(KEYS[1], ARGV[1], rangeStart, rangeEnd, ARGV[2], true --[[ hasFinished ]])\nelse\n  rangeEnd = ARGV[2]\n  result = cleanSet(KEYS[1], ARGV[1], rangeEnd, ARGV[2], limit,\n                    {\"finishedOn\"}, true  --[[ hasFinished ]])\nend\nrcall(\"XADD\", KEYS[2], \"*\", \"event\", \"cleaned\", \"count\", result[2])\nreturn result[1]\n","numberOfKeys":3,"readOnly":false,"sha":"1a81e85ab6be2d531f463ccc8ab17a81b858dcdb"},"drain:5.23.0":{"keyPrefix":"","lua":"--[[\n  Drains the queue, removes all jobs that are waiting\n  or delayed, but not active, completed or failed\n  Input:\n    KEYS[1] 'wait',\n    KEYS[2] 'paused'\n    KEYS[3] 'delayed'\n    KEYS[4] 'prioritized'\n    KEYS[5] 'jobschedulers' (repeat)\n    ARGV[1]  queue key prefix\n]]\nlocal rcall = redis.call\nlocal queueBaseKey = ARGV[1]\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nremoveListJobs(KEYS[1], true, queueBaseKey, 0) -- wait\nremoveListJobs(KEYS[2], true, queueBaseKey, 0) -- paused\nif KEYS[3] ~= \"\" then\n    -- We must not remove delayed jobs if they are associated to a job scheduler.\n    local scheduledJobs = {}\n    local jobSchedulers = rcall(\"ZRANGE\", KEYS[5], 0, -1, \"WITHSCORES\")\n    -- For every job scheduler, get the current delayed job id.\n    for i = 1, #jobSchedulers, 2 do\n        local jobSchedulerId = jobSchedulers[i]\n        local jobSchedulerMillis = jobSchedulers[i + 1]\n        local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. jobSchedulerMillis\n        scheduledJobs[delayedJobId] = true\n    end\n    removeZSetJobs(KEYS[3], true, queueBaseKey, 0, scheduledJobs) -- delayed\nend\nremoveZSetJobs(KEYS[4], true, queueBaseKey, 0) -- prioritized\n","numberOfKeys":5,"readOnly":false,"sha":"cde4aa2dbd6d7545a57a6dd8684ad9448e0ae387"},"extendLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Extend lock and removes the job from the stalled set.\n  Input:\n    KEYS[1] 'lock',\n    KEYS[2] 'stalled'\n    ARGV[1]  token\n    ARGV[2]  lock duration in milliseconds\n    ARGV[3]  jobid\n  Output:\n    \"1\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  --   if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2], \"XX\") then\n  if rcall(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2]) then\n    rcall(\"SREM\", KEYS[2], ARGV[3])\n    return 1\n  end\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"99b6eb3d7a4777fb2271fd6cdf3ac5a290a4aac4"},"getCounts:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1...] types\n]]\nlocal rcall = redis.call;\nlocal prefix = KEYS[1]\nlocal results = {}\nfor i = 1, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        results[#results+1] = count-1\n      else\n        results[#results+1] = 0\n      end\n    else\n      results[#results+1] = rcall(\"LLEN\", stateKey)\n    end\n  elseif ARGV[i] == \"active\" then\n    results[#results+1] = rcall(\"LLEN\", stateKey)\n  else\n    results[#results+1] = rcall(\"ZCARD\", stateKey)\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"a8034c631460c6803c87966ce881636246de2398"},"getCountsPerPriority:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get counts per provided states\n    Input:\n      KEYS[1] wait key\n      KEYS[2] paused key\n      KEYS[3] meta key\n      KEYS[4] prioritized key\n      ARGV[1...] priorities\n]]\nlocal rcall = redis.call\nlocal results = {}\nlocal waitKey = KEYS[1]\nlocal pausedKey = KEYS[2]\nlocal prioritizedKey = KEYS[4]\n-- Includes\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePaused(queueMetaKey)\n  return rcall(\"HEXISTS\", queueMetaKey, \"paused\") == 1\nend\nfor i = 1, #ARGV do\n  local priority = tonumber(ARGV[i])\n  if priority == 0 then\n    if isQueuePaused(KEYS[3]) then\n      results[#results+1] = rcall(\"LLEN\", pausedKey)\n    else\n      results[#results+1] = rcall(\"LLEN\", waitKey)\n    end\n  else\n    results[#results+1] = rcall(\"ZCOUNT\", prioritizedKey,\n      priority * 0x100000000, (priority + 1)  * 0x100000000 - 1)\n  end\nend\nreturn results\n","numberOfKeys":4,"readOnly":false,"sha":"0d3cc488e178c7c757e27ee35b04e6486f7b392a"},"getRanges:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get job ids per provided states\n    Input:\n      KEYS[1]    'prefix'\n      ARGV[1]    start\n      ARGV[2]    end\n      ARGV[3]    asc\n      ARGV[4...] types\n]]\nlocal rcall = redis.call\nlocal prefix = KEYS[1]\nlocal rangeStart = tonumber(ARGV[1])\nlocal rangeEnd = tonumber(ARGV[2])\nlocal asc = ARGV[3]\nlocal results = {}\nlocal function getRangeInList(listKey, asc, rangeStart, rangeEnd, results)\n  if asc == \"1\" then\n    local modifiedRangeStart\n    local modifiedRangeEnd\n    if rangeStart == -1 then\n      modifiedRangeStart = 0\n    else\n      modifiedRangeStart = -(rangeStart + 1)\n    end\n    if rangeEnd == -1 then\n      modifiedRangeEnd = 0\n    else\n      modifiedRangeEnd = -(rangeEnd + 1)\n    end\n    results[#results+1] = rcall(\"LRANGE\", listKey,\n      modifiedRangeEnd,\n      modifiedRangeStart)\n  else\n    results[#results+1] = rcall(\"LRANGE\", listKey, rangeStart, rangeEnd)\n  end\nend\nfor i = 4, #ARGV do\n  local stateKey = prefix .. ARGV[i]\n  if ARGV[i] == \"wait\" or ARGV[i] == \"paused\" then\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local marker = rcall(\"LINDEX\", stateKey, -1)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then\n      local count = rcall(\"LLEN\", stateKey)\n      if count > 1 then\n        rcall(\"RPOP\", stateKey)\n        getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n      else\n        results[#results+1] = {}\n      end\n    else\n      getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n    end\n  elseif ARGV[i] == \"active\" then\n    getRangeInList(stateKey, asc, rangeStart, rangeEnd, results)\n  else\n    if asc == \"1\" then\n      results[#results+1] = rcall(\"ZRANGE\", stateKey, rangeStart, rangeEnd)\n    else\n      results[#results+1] = rcall(\"ZREVRANGE\", stateKey, rangeStart, rangeEnd)\n    end\n  end\nend\nreturn results\n","numberOfKeys":1,"readOnly":false,"sha":"8ead3c08a7bde7653892f14e44385d448a0f291c"},"getRateLimitTtl:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get rate limit ttl\n    Input:\n      KEYS[1] 'limiter'\n      ARGV[1] maxJobs\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\nlocal rateLimiterKey = KEYS[1]\nif ARGV[1] ~= \"0\" then\n  return getRateLimitTTL(tonumber(ARGV[1]), rateLimiterKey)\nelse\n  return rcall(\"PTTL\", rateLimiterKey)\nend\n","numberOfKeys":1,"readOnly":false,"sha":"92372d939896ee53f841c7ba94305e56a871786f"},"getState:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'prioritized'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal active_items = rcall(\"LRANGE\", KEYS[4] , 0, -1)\nif checkItemInList(active_items, ARGV[1]) ~= nil then\n  return \"active\"\nend\nlocal wait_items = rcall(\"LRANGE\", KEYS[5] , 0, -1)\nif checkItemInList(wait_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nlocal paused_items = rcall(\"LRANGE\", KEYS[6] , 0, -1)\nif checkItemInList(paused_items, ARGV[1]) ~= nil then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7], ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"8857a088a8555cf7fb21513a66531eb00cf8932d"},"getStateV2:5.23.0":{"keyPrefix":"","lua":"--[[\n  Get a job state\n  Input: \n    KEYS[1] 'completed' key,\n    KEYS[2] 'failed' key\n    KEYS[3] 'delayed' key\n    KEYS[4] 'active' key\n    KEYS[5] 'wait' key\n    KEYS[6] 'paused' key\n    KEYS[7] 'waiting-children' key\n    KEYS[8] 'prioritized' key\n    ARGV[1] job id\n  Output:\n    'completed'\n    'failed'\n    'delayed'\n    'active'\n    'waiting'\n    'waiting-children'\n    'unknown'\n]]\nlocal rcall = redis.call\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  return \"completed\"\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  return \"failed\"\nend\nif rcall(\"ZSCORE\", KEYS[3], ARGV[1]) ~= false then\n  return \"delayed\"\nend\nif rcall(\"ZSCORE\", KEYS[8], ARGV[1]) ~= false then\n  return \"prioritized\"\nend\nif rcall(\"LPOS\", KEYS[4] , ARGV[1]) ~= false then\n  return \"active\"\nend\nif rcall(\"LPOS\", KEYS[5] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"LPOS\", KEYS[6] , ARGV[1]) ~= false then\n  return \"waiting\"\nend\nif rcall(\"ZSCORE\", KEYS[7] , ARGV[1]) ~= false then\n  return \"waiting-children\"\nend\nreturn \"unknown\"\n","numberOfKeys":8,"readOnly":false,"sha":"f7064020cc18bc64f3d44da9b89581294f7a67d3"},"isFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if a job is finished (.i.e. is in the completed or failed set)\n  Input: \n    KEYS[1] completed key\n    KEYS[2] failed key\n    KEYS[3] job key\n    ARGV[1] job id\n    ARGV[2] return value?\n  Output:\n    0 - Not finished.\n    1 - Completed.\n    2 - Failed.\n   -1 - Missing job. \n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[3]) ~= 1 then\n  if ARGV[2] == \"1\" then\n    return {-1,\"Missing key for job \" .. KEYS[3] .. \". isFinished\"}\n  end  \n  return -1\nend\nif rcall(\"ZSCORE\", KEYS[1], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local returnValue = rcall(\"HGET\", KEYS[3], \"returnvalue\")\n    return {1,returnValue}\n  end\n  return 1\nend\nif rcall(\"ZSCORE\", KEYS[2], ARGV[1]) ~= false then\n  if ARGV[2] == \"1\" then\n    local failedReason = rcall(\"HGET\", KEYS[3], \"failedReason\")\n    return {2,failedReason}\n  end\n  return 2\nend\nif ARGV[2] == \"1\" then\n  return {0}\nend\nreturn 0\n","numberOfKeys":3,"readOnly":false,"sha":"fdea3cb84e6f9aa18dd37ab7d710874c5828eb52"},"isJobInList:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if job is in a given list.\n  Input:\n    KEYS[1]\n    ARGV[1]\n  Output:\n    1 if element found in the list.\n]]\n-- Includes\n--[[\n  Functions to check if a item belongs to a list.\n]]\nlocal function checkItemInList(list, item)\n  for _, v in pairs(list) do\n    if v == item then\n      return 1\n    end\n  end\n  return nil\nend\nlocal items = redis.call(\"LRANGE\", KEYS[1] , 0, -1)\nreturn checkItemInList(items, ARGV[1])\n","numberOfKeys":1,"readOnly":false,"sha":"7fafc57c06446598a2e9e21a718f11559c3b74c7"},"isMaxed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Checks if queue is maxed.\n  Input:\n    KEYS[1] meta key\n    KEYS[2] active key\n  Output:\n    1 if element found in the list.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to check if queue is maxed or not.\n]]\nlocal function isQueueMaxed(queueMetaKey, activeKey)\n  local maxConcurrency = rcall(\"HGET\", queueMetaKey, \"concurrency\")\n  if maxConcurrency then\n    local activeCount = rcall(\"LLEN\", activeKey)\n    if activeCount >= tonumber(maxConcurrency) then\n      return true\n    end\n  end\n  return false\nend\nreturn isQueueMaxed(KEYS[1], KEYS[2])\n","numberOfKeys":2,"readOnly":false,"sha":"915456b98cefd4cfc19cf99a50d73bde41a27b6c"},"moveJobFromActiveToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Function to move job from active state to wait.\n  Input:\n    KEYS[1]  active key\n    KEYS[2]  wait key\n    KEYS[3]  stalled key\n    KEYS[4]  job lock key\n    KEYS[5]  paused key\n    KEYS[6]  meta key\n    KEYS[7]  limiter key\n    KEYS[8]  prioritized key\n    KEYS[9]  marker key\n    KEYS[10] event key\n    ARGV[1] job id\n    ARGV[2] lock token\n    ARGV[3] job id key\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to push back job considering priority in front of same prioritized jobs.\n]]\nlocal function pushBackJobWithPriority(prioritizedKey, priority, jobId)\n  -- in order to put it at front of same prioritized jobs\n  -- we consider prioritized counter as 0\n  local score = priority * 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal jobId = ARGV[1]\nlocal token = ARGV[2]\nlocal lockKey = KEYS[4]\nlocal lockToken = rcall(\"GET\", lockKey)\nlocal pttl = rcall(\"PTTL\", KEYS[7])\nif lockToken == token then\n  local metaKey = KEYS[6]\n  local removed = rcall(\"LREM\", KEYS[1], 1, jobId)\n  if removed > 0 then\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[1], KEYS[2], KEYS[5])\n    rcall(\"SREM\", KEYS[3], jobId)\n    local priority = tonumber(rcall(\"HGET\", ARGV[3], \"priority\")) or 0\n    if priority > 0 then\n      pushBackJobWithPriority(KEYS[8], priority, jobId)\n    else\n      addJobInTargetList(target, KEYS[9], \"RPUSH\", isPausedOrMaxed, jobId)\n    end\n    rcall(\"DEL\", lockKey)\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[10], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId)\n  end\nend\nreturn pttl\n","numberOfKeys":10,"readOnly":false,"sha":"546b74fe67e4c131992799dac9ba737c553ea95f"},"moveJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move completed, failed or delayed jobs to wait.\n  Note: Does not support jobs with priorities.\n  Input:\n    KEYS[1] base key\n    KEYS[2] events stream\n    KEYS[3] state key (failed, completed, delayed)\n    KEYS[4] 'wait'\n    KEYS[5] 'paused'\n    KEYS[6] 'meta'\n    KEYS[7] 'active'\n    KEYS[8] 'marker'\n    ARGV[1] count\n    ARGV[2] timestamp\n    ARGV[3] prev state\n  Output:\n    1  means the operation is not completed\n    0  means the operation is completed\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal timestamp = tonumber(ARGV[2])\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal metaKey = KEYS[6]\nlocal target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[7], KEYS[4], KEYS[5])\nlocal jobs = rcall('ZRANGEBYSCORE', KEYS[3], 0, timestamp, 'LIMIT', 0, maxCount)\nif (#jobs > 0) then\n    if ARGV[3] == \"failed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"failedReason\")\n        end\n    elseif ARGV[3] == \"completed\" then\n        for i, key in ipairs(jobs) do\n            local jobKey = KEYS[1] .. key\n            rcall(\"HDEL\", jobKey, \"finishedOn\", \"processedOn\", \"returnvalue\")\n        end\n    end\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    for i, key in ipairs(jobs) do\n        -- Emit waiting event\n        rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\",\n              \"waiting\", \"jobId\", key, \"prev\", ARGV[3]);\n    end\n    for from, to in batches(#jobs, 7000) do\n        rcall(\"ZREM\", KEYS[3], unpack(jobs, from, to))\n        rcall(\"LPUSH\", target, unpack(jobs, from, to))\n    end\n    addBaseMarkerIfNeeded(KEYS[8], isPausedOrMaxed)\nend\nmaxCount = maxCount - #jobs\nif (maxCount <= 0) then return 1 end\nreturn 0\n","numberOfKeys":8,"readOnly":false,"sha":"655fa4396927ac2e4239ae18746a6c053c05c5d5"},"moveStalledJobsToWait:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move stalled jobs to wait.\n    Input:\n      KEYS[1] 'stalled' (SET)\n      KEYS[2] 'wait',   (LIST)\n      KEYS[3] 'active', (LIST)\n      KEYS[4] 'failed', (ZSET)\n      KEYS[5] 'stalled-check', (KEY)\n      KEYS[6] 'meta', (KEY)\n      KEYS[7] 'paused', (LIST)\n      KEYS[8] 'marker'\n      KEYS[9] 'event stream' (STREAM)\n      ARGV[1]  Max stalled job count\n      ARGV[2]  queue.toKey('')\n      ARGV[3]  timestamp\n      ARGV[4]  max check time\n    Events:\n      'stalled' with stalled job id.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\nlocal stalledKey = KEYS[1]\nlocal waitKey = KEYS[2]\nlocal activeKey = KEYS[3]\nlocal failedKey = KEYS[4]\nlocal stalledCheckKey = KEYS[5]\nlocal metaKey = KEYS[6]\nlocal pausedKey = KEYS[7]\nlocal markerKey = KEYS[8]\nlocal eventStreamKey = KEYS[9]\nlocal maxStalledJobCount = tonumber(ARGV[1])\nlocal queueKeyPrefix = ARGV[2]\nlocal timestamp = ARGV[3]\nlocal maxCheckTime = ARGV[4]\nif rcall(\"EXISTS\", stalledCheckKey) == 1 then return {{}, {}} end\nrcall(\"SET\", stalledCheckKey, timestamp, \"PX\", maxCheckTime)\n-- Trim events before emiting them to avoid trimming events emitted in this script\ntrimEvents(metaKey, eventStreamKey)\n-- Move all stalled jobs to wait\nlocal stalling = rcall('SMEMBERS', stalledKey)\nlocal stalled = {}\nlocal failed = {}\nif (#stalling > 0) then\n    rcall('DEL', stalledKey)\n    -- Remove from active list\n    for i, jobId in ipairs(stalling) do\n        -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n        if string.sub(jobId, 1, 2) == \"0:\" then\n            -- If the jobId is a delay marker ID we just remove it.\n            rcall(\"LREM\", activeKey, 1, jobId)\n        else\n            local jobKey = queueKeyPrefix .. jobId\n            -- Check that the lock is also missing, then we can handle this job as really stalled.\n            if (rcall(\"EXISTS\", jobKey .. \":lock\") == 0) then\n                --  Remove from the active queue.\n                local removed = rcall(\"LREM\", activeKey, 1, jobId)\n                if (removed > 0) then\n                    -- If this job has been stalled too many times, such as if it crashes the worker, then fail it.\n                    local stalledCount =\n                        rcall(\"HINCRBY\", jobKey, \"stalledCounter\", 1)\n                    if (stalledCount > maxStalledJobCount) then\n                        local jobAttributes = rcall(\"HMGET\", jobKey, \"opts\", \"parent\", \"deid\")\n                        local rawOpts = jobAttributes[1]\n                        local rawParentData = jobAttributes[2]\n                        local opts = cjson.decode(rawOpts)\n                        local removeOnFailType = type(opts[\"removeOnFail\"])\n                        rcall(\"ZADD\", failedKey, timestamp, jobId)\n                        removeDeduplicationKeyIfNeeded(queueKeyPrefix, jobAttributes[3])\n                        local failedReason =\n                            \"job stalled more than allowable limit\"\n                        rcall(\"HMSET\", jobKey, \"failedReason\", failedReason,\n                              \"finishedOn\", timestamp)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"failed\", \"jobId\", jobId, 'prev', 'active',\n                              'failedReason', failedReason)\n                        if rawParentData ~= false then\n                            if opts['fpof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                moveParentFromWaitingChildrenToFailed(\n                                    parentData['queueKey'],\n                                    parentData['queueKey'] .. ':' .. parentData['id'],\n                                    parentData['id'],\n                                    jobKey,\n                                    timestamp\n                                )\n                            elseif opts['idof'] or opts['rdof'] then\n                                local parentData = cjson.decode(rawParentData)\n                                local parentKey = parentData['queueKey'] .. ':' .. parentData['id']\n                                local dependenciesSet = parentKey .. \":dependencies\"\n                                if rcall(\"SREM\", dependenciesSet, jobKey) == 1 then\n                                    moveParentToWaitIfNeeded(parentData['queueKey'], dependenciesSet,\n                                                             parentKey, parentData['id'], timestamp)\n                                    if opts['idof'] then\n                                       local failedSet = parentKey .. \":failed\"\n                                       rcall(\"HSET\", failedSet, jobKey, failedReason)\n                                    end\n                                end\n                            end\n                        end\n                        if removeOnFailType == \"number\" then\n                            removeJobsByMaxCount(opts[\"removeOnFail\"],\n                                                  failedKey, queueKeyPrefix)\n                        elseif removeOnFailType == \"boolean\" then\n                            if opts[\"removeOnFail\"] then\n                                removeJob(jobId, false, queueKeyPrefix,\n                                  false --[[remove debounce key]])\n                                rcall(\"ZREM\", failedKey, jobId)\n                            end\n                        elseif removeOnFailType ~= \"nil\" then\n                            local maxAge = opts[\"removeOnFail\"][\"age\"]\n                            local maxCount = opts[\"removeOnFail\"][\"count\"]\n                            if maxAge ~= nil then\n                                removeJobsByMaxAge(timestamp, maxAge,\n                                                    failedKey, queueKeyPrefix)\n                            end\n                            if maxCount ~= nil and maxCount > 0 then\n                                removeJobsByMaxCount(maxCount, failedKey,\n                                                      queueKeyPrefix)\n                            end\n                        end\n                        table.insert(failed, jobId)\n                    else\n                        local target, isPausedOrMaxed =\n                            getTargetQueueList(metaKey, activeKey, waitKey, pausedKey)\n                        -- Move the job back to the wait queue, to immediately be picked up by a waiting worker.\n                        addJobInTargetList(target, markerKey, \"RPUSH\", isPausedOrMaxed, jobId)\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"waiting\", \"jobId\", jobId, 'prev', 'active')\n                        -- Emit the stalled event\n                        rcall(\"XADD\", eventStreamKey, \"*\", \"event\",\n                              \"stalled\", \"jobId\", jobId)\n                        table.insert(stalled, jobId)\n                    end\n                end\n            end\n        end\n    end\nend\n-- Mark potentially stalled jobs\nlocal active = rcall('LRANGE', activeKey, 0, -1)\nif (#active > 0) then\n    for from, to in batches(#active, 7000) do\n        rcall('SADD', stalledKey, unpack(active, from, to))\n    end\nend\nreturn {failed, stalled}","numberOfKeys":9,"readOnly":false,"sha":"b06d5ab6576efcc0e07c6fa2f57923659b3e4a08"},"moveToActive:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move next job to be processed to active, lock it and fetch its data. The job\n  may be delayed, in that case we need to move it to the delayed set instead.\n  This operation guarantees that the worker owns the job during the lock\n  expiration time. The worker is responsible of keeping the lock fresh\n  so that no other worker picks this job again.\n  Input:\n    KEYS[1] wait key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] stream events key\n    KEYS[5] stalled key\n    -- Rate limiting\n    KEYS[6] rate limiter key\n    KEYS[7] delayed key\n    -- Delayed jobs\n    KEYS[8] paused key\n    KEYS[9] meta key\n    KEYS[10] pc priority counter\n    -- Marker\n    KEYS[11] marker key\n    -- Arguments\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] opts\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal rcall = redis.call\nlocal waitKey = KEYS[1]\nlocal activeKey = KEYS[2]\nlocal eventStreamKey = KEYS[4]\nlocal rateLimiterKey = KEYS[6]\nlocal delayedKey = KEYS[7]\nlocal opts = cmsgpack.unpack(ARGV[3])\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[9], activeKey, waitKey, KEYS[8])\n-- Check if there are delayed jobs that we can move to wait.\nlocal markerKey = KEYS[11]\npromoteDelayedJobs(delayedKey, markerKey, target, KEYS[3], eventStreamKey, ARGV[1],\n                   ARGV[2], KEYS[10], isPausedOrMaxed)\nlocal maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\nlocal expireTime = getRateLimitTTL(maxJobs, rateLimiterKey)\n-- Check if we are rate limited first.\nif expireTime > 0 then return {0, 0, expireTime, 0} end\n-- paused or maxed queue\nif isPausedOrMaxed then return {0, 0, 0, 0} end\n-- no job ID, try non-blocking move from wait to active\nlocal jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\n-- Markers in waitlist DEPRECATED in v5: Will be completely removed in v6.\nif jobId and string.sub(jobId, 1, 2) == \"0:\" then\n    rcall(\"LREM\", activeKey, 1, jobId)\n    jobId = rcall(\"RPOPLPUSH\", waitKey, activeKey)\nend\nif jobId then\n    return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                   maxJobs, opts)\nelse\n    jobId = moveJobFromPriorityToActive(KEYS[3], activeKey, KEYS[10])\n    if jobId then\n        return prepareJobForProcessing(ARGV[1], rateLimiterKey, eventStreamKey, jobId, ARGV[2],\n                                       maxJobs, opts)\n    end\nend\n-- Return the timestamp for the next delayed job if any.\nlocal nextTimestamp = getNextDelayedTimestamp(delayedKey)\nif nextTimestamp ~= nil then return {0, 0, 0, nextTimestamp} end\nreturn {0, 0, 0, 0}\n","numberOfKeys":11,"readOnly":false,"sha":"accb36ea979fc4cd20f4a56e3c4ad6df0ec0b14a"},"moveToDelayed:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to delayed set.\n  Input:\n    KEYS[1] marker key\n    KEYS[2] active key\n    KEYS[3] prioritized key\n    KEYS[4] delayed key\n    KEYS[5] job key\n    KEYS[6] events stream\n    KEYS[7] meta key\n    KEYS[8] stalled key\n    ARGV[1] key prefix\n    ARGV[2] timestamp\n    ARGV[3] the id of the job\n    ARGV[4] queue token\n    ARGV[5] delay value\n    ARGV[6] skip attempt\n  Output:\n    0 - OK\n   -1 - Missing job.\n   -3 - Job not in active set.\n  Events:\n    - delayed key.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Bake in the job id first 12 bits into the timestamp\n  to guarantee correct execution order of delayed jobs\n  (up to 4096 jobs per given timestamp or 4096 jobs apart per timestamp)\n  WARNING: Jobs that are so far apart that they wrap around will cause FIFO to fail\n]]\nlocal function getDelayedScore(delayedKey, timestamp, delay)\n  local delayedTimestamp = (delay > 0 and (tonumber(timestamp) + delay)) or tonumber(timestamp)\n  local minScore = delayedTimestamp * 0x1000\n  local maxScore = (delayedTimestamp + 1 ) * 0x1000 - 1\n  local result = rcall(\"ZREVRANGEBYSCORE\", delayedKey, maxScore,\n    minScore, \"WITHSCORES\",\"LIMIT\", 0, 1)\n  if #result then\n    local currentMaxScore = tonumber(result[2])\n    if currentMaxScore ~= nil then\n      if currentMaxScore >= maxScore then\n        return maxScore, delayedTimestamp\n      else\n        return currentMaxScore + 1, delayedTimestamp\n      end\n    end\n  end\n  return minScore, delayedTimestamp\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal jobKey = KEYS[5]\nlocal metaKey = KEYS[7]\nlocal token = ARGV[4] \nif rcall(\"EXISTS\", jobKey) == 1 then\n    local errorCode = removeLock(jobKey, KEYS[8], token, ARGV[3])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local delayedKey = KEYS[4]\n    local jobId = ARGV[3]\n    local delay = tonumber(ARGV[5])\n    local score, delayedTimestamp = getDelayedScore(delayedKey, ARGV[2], delay)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if numRemovedElements < 1 then return -3 end\n    if ARGV[6] == \"0\" then\n        rcall(\"HINCRBY\", jobKey, \"atm\", 1)\n    end\n    rcall(\"HSET\", jobKey, \"delay\", ARGV[5])\n    local maxEvents = getOrSetMaxEvents(metaKey)\n    rcall(\"ZADD\", delayedKey, score, jobId)\n    rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"delayed\",\n          \"jobId\", jobId, \"delay\", delayedTimestamp)\n    -- Check if we need to push a marker job to wake up sleeping workers.\n    local markerKey = KEYS[1]\n    addDelayMarkerIfNeeded(markerKey, delayedKey)\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"b54cf2d23990cd8eb373f262044967845d31c6a9"},"moveToFinished:5.23.0":{"keyPrefix":"","lua":"--[[\n  Move job from active to a finished status (completed o failed)\n  A job can only be moved to completed if it was active.\n  The job must be locked before it can be moved to a finished status,\n  and the lock must be released in this script.\n    Input:\n      KEYS[1] wait key\n      KEYS[2] active key\n      KEYS[3] prioritized key\n      KEYS[4] event stream key\n      KEYS[5] stalled key\n      -- Rate limiting\n      KEYS[6] rate limiter key\n      KEYS[7] delayed key\n      KEYS[8] paused key\n      KEYS[9] meta key\n      KEYS[10] pc priority counter\n      KEYS[11] completed/failed key\n      KEYS[12] jobId key\n      KEYS[13] metrics key\n      KEYS[14] marker key\n      ARGV[1]  jobId\n      ARGV[2]  timestamp\n      ARGV[3]  msg property returnvalue / failedReason\n      ARGV[4]  return value / failed reason\n      ARGV[5]  target (completed/failed)\n      ARGV[6]  fetch next?\n      ARGV[7]  keys prefix\n      ARGV[8]  opts\n      opts - token - lock token\n      opts - keepJobs\n      opts - lockDuration - lock duration in milliseconds\n      opts - attempts max attempts\n      opts - maxMetricsSize\n      opts - fpof - fail parent on fail\n      opts - idof - ignore dependency on fail\n      opts - rdof - remove dependency on fail\n    Output:\n      0 OK\n      -1 Missing key.\n      -2 Missing lock.\n      -3 Job not in active set\n      -4 Job has pending dependencies\n      -6 Lock is not owned by this client\n    Events:\n      'completed/failed'\n]]\nlocal rcall = redis.call\n--- Includes\n--[[\n  Functions to collect metrics based on a current and previous count of jobs.\n  Granualarity is fixed at 1 minute.\n]] \n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\nlocal function collectMetrics(metaKey, dataPointsList, maxDataPoints,\n                                 timestamp)\n    -- Increment current count\n    local count = rcall(\"HINCRBY\", metaKey, \"count\", 1) - 1\n    -- Compute how many data points we need to add to the list, N.\n    local prevTS = rcall(\"HGET\", metaKey, \"prevTS\")\n    if not prevTS then\n        -- If prevTS is nil, set it to the current timestamp\n        rcall(\"HSET\", metaKey, \"prevTS\", timestamp, \"prevCount\", 0)\n        return\n    end\n    local N = math.min(math.floor(timestamp / 60000) - math.floor(prevTS / 60000), tonumber(maxDataPoints))\n    if N > 0 then\n        local delta = count - rcall(\"HGET\", metaKey, \"prevCount\")\n        -- If N > 1, add N-1 zeros to the list\n        if N > 1 then\n            local points = {}\n            points[1] = delta\n            for i = 2, N do\n                points[i] = 0\n            end\n            for from, to in batches(#points, 7000) do\n                rcall(\"LPUSH\", dataPointsList, unpack(points, from, to))\n            end\n        else\n            -- LPUSH delta to the list\n            rcall(\"LPUSH\", dataPointsList, delta)\n        end\n        -- LTRIM to keep list to its max size\n        rcall(\"LTRIM\", dataPointsList, 0, maxDataPoints - 1)\n        -- update prev count with current count\n        rcall(\"HSET\", metaKey, \"prevCount\", count, \"prevTS\", timestamp)\n    end\nend\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\n--[[\n  Function to get current rate limit ttl.\n]]\nlocal function getRateLimitTTL(maxJobs, rateLimiterKey)\n  if maxJobs and maxJobs <= tonumber(rcall(\"GET\", rateLimiterKey) or 0) then\n    local pttl = rcall(\"PTTL\", rateLimiterKey)\n    if pttl == 0 then\n      rcall(\"DEL\", rateLimiterKey)\n    end\n    if pttl > 0 then\n      return pttl\n    end\n  end\n  return 0\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to move job from prioritized state to active.\n]]\nlocal function moveJobFromPriorityToActive(priorityKey, activeKey, priorityCounterKey)\n  local prioritizedJob = rcall(\"ZPOPMIN\", priorityKey)\n  if #prioritizedJob > 0 then\n    rcall(\"LPUSH\", activeKey, prioritizedJob[1])\n    return prioritizedJob[1]\n  else\n    rcall(\"DEL\", priorityCounterKey)\n  end\nend\n--[[\n  Function to recursively move from waitingChildren to failed.\n]]\n-- Includes\n--[[\n  Validate and move parent to active if needed.\n]]\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal function moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey,\n                                        parentKey, parentId, timestamp)\n    local isParentActive = rcall(\"ZSCORE\",\n                                 parentQueueKey .. \":waiting-children\", parentId)\n    if rcall(\"SCARD\", parentDependenciesKey) == 0 and isParentActive then\n        rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId)\n        local parentWaitKey = parentQueueKey .. \":wait\"\n        local parentPausedKey = parentQueueKey .. \":paused\"\n        local parentActiveKey = parentQueueKey .. \":active\"\n        local parentMetaKey = parentQueueKey .. \":meta\"\n        local parentMarkerKey = parentQueueKey .. \":marker\"\n        local jobAttributes = rcall(\"HMGET\", parentKey, \"priority\", \"delay\")\n        local priority = tonumber(jobAttributes[1]) or 0\n        local delay = tonumber(jobAttributes[2]) or 0\n        if delay > 0 then\n            local delayedTimestamp = tonumber(timestamp) + delay\n            local score = delayedTimestamp * 0x1000\n            local parentDelayedKey = parentQueueKey .. \":delayed\"\n            rcall(\"ZADD\", parentDelayedKey, score, parentId)\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"delayed\",\n                  \"jobId\", parentId, \"delay\", delayedTimestamp)\n            addDelayMarkerIfNeeded(parentMarkerKey, parentDelayedKey)\n        else\n            if priority == 0 then\n                local parentTarget, isParentPausedOrMaxed =\n                    getTargetQueueList(parentMetaKey, parentActiveKey, parentWaitKey,\n                                       parentPausedKey)\n                addJobInTargetList(parentTarget, parentMarkerKey, \"RPUSH\", isParentPausedOrMaxed,\n                    parentId)\n            else\n                local isPausedOrMaxed = isQueuePausedOrMaxed(parentMetaKey, parentActiveKey)\n                addJobWithPriority(parentMarkerKey,\n                                   parentQueueKey .. \":prioritized\", priority,\n                                   parentId, parentQueueKey .. \":pc\", isPausedOrMaxed)\n            end\n            rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"waiting\",\n                  \"jobId\", parentId, \"prev\", \"waiting-children\")\n        end\n    end\nend\n--[[\n  Function to remove deduplication key if needed.\n]]\nlocal function removeDeduplicationKeyIfNeeded(prefixKey, deduplicationId)\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    local pttl = rcall(\"PTTL\", deduplicationKey)\n    if pttl == 0 or pttl == -1 then\n      rcall(\"DEL\", deduplicationKey)\n    end\n  end\nend\nlocal function moveParentFromWaitingChildrenToFailed( parentQueueKey, parentKey, parentId, jobIdKey, timestamp)\n  if rcall(\"ZREM\", parentQueueKey .. \":waiting-children\", parentId) == 1 then\n    rcall(\"ZADD\", parentQueueKey .. \":failed\", timestamp, parentId)\n    local failedReason = \"child \" .. jobIdKey .. \" failed\"\n    rcall(\"HMSET\", parentKey, \"failedReason\", failedReason, \"finishedOn\", timestamp)\n    rcall(\"XADD\", parentQueueKey .. \":events\", \"*\", \"event\", \"failed\", \"jobId\", parentId, \"failedReason\",\n      failedReason, \"prev\", \"waiting-children\")\n    local jobAttributes = rcall(\"HMGET\", parentKey, \"parent\", \"deid\")\n    removeDeduplicationKeyIfNeeded(parentQueueKey .. \":\", jobAttributes[2])\n    if jobAttributes[1] then\n      local parentData = cjson.decode(jobAttributes[1])\n      if parentData['fpof'] then\n        moveParentFromWaitingChildrenToFailed(\n          parentData['queueKey'],\n          parentData['queueKey'] .. ':' .. parentData['id'],\n          parentData['id'],\n          parentKey,\n          timestamp\n        )\n      elseif parentData['idof'] or parentData['rdof'] then\n        local grandParentKey = parentData['queueKey'] .. ':' .. parentData['id']\n        local grandParentDependenciesSet = grandParentKey .. \":dependencies\"\n        if rcall(\"SREM\", grandParentDependenciesSet, parentKey) == 1 then\n          moveParentToWaitIfNeeded(parentData['queueKey'], grandParentDependenciesSet,\n            grandParentKey, parentData['id'], timestamp)\n          if parentData['idof'] then\n            local grandParentFailedSet = grandParentKey .. \":failed\"\n            rcall(\"HSET\", grandParentFailedSet, parentKey, failedReason)\n          end\n        end\n      end\n    end\n  end\nend\n--[[\n  Function to move job from wait state to active.\n  Input:\n    opts - token - lock token\n    opts - lockDuration\n    opts - limiter\n]]\nlocal function prepareJobForProcessing(keyPrefix, rateLimiterKey, eventStreamKey,\n    jobId, processedOn, maxJobs, opts)\n  local jobKey = keyPrefix .. jobId\n  -- Check if we need to perform rate limiting.\n  if maxJobs then\n    local jobCounter = tonumber(rcall(\"INCR\", rateLimiterKey))\n    if jobCounter == 1 then\n      local limiterDuration = opts['limiter'] and opts['limiter']['duration']\n      local integerDuration = math.floor(math.abs(limiterDuration))\n      rcall(\"PEXPIRE\", rateLimiterKey, integerDuration)\n    end\n  end\n  local lockKey = jobKey .. ':lock'\n  -- get a lock\n  if opts['token'] ~= \"0\" then\n    rcall(\"SET\", lockKey, opts['token'], \"PX\", opts['lockDuration'])\n  end\n  local optionalValues = {}\n  if opts['name'] then\n    -- Set \"processedBy\" field to the worker name\n    table.insert(optionalValues, \"pb\")\n    table.insert(optionalValues, opts['name'])\n  end\n  rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"active\", \"jobId\", jobId, \"prev\", \"waiting\")\n  rcall(\"HMSET\", jobKey, \"processedOn\", processedOn, unpack(optionalValues))\n  rcall(\"HINCRBY\", jobKey, \"ats\", 1)\n  return {rcall(\"HGETALL\", jobKey), jobId, 0, 0} -- get job data\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Functions to remove jobs by max age.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix,\n  shouldRemoveDebounceKey)\n  local start = timestamp - maxAge * 1000\n  local jobIds = rcall(\"ZREVRANGEBYSCORE\", targetSet, start, \"-inf\")\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYSCORE\", targetSet, \"-inf\", start)\nend\n--[[\n  Functions to remove jobs by max count.\n]]\n-- Includes\nlocal function removeJobsByMaxCount(maxCount, targetSet, prefix)\n  local start = maxCount\n  local jobIds = rcall(\"ZREVRANGE\", targetSet, start, -1)\n  for i, jobId in ipairs(jobIds) do\n    removeJob(jobId, false, prefix, false --[[remove debounce key]])\n  end\n  rcall(\"ZREMRANGEBYRANK\", targetSet, 0, -(maxCount + 1))\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to trim events, default 10000.\n]]\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nlocal function trimEvents(metaKey, eventStreamKey)\n  local maxEvents = getOrSetMaxEvents(metaKey)\n  if maxEvents ~= false then\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", maxEvents)\n  else\n    rcall(\"XTRIM\", eventStreamKey, \"MAXLEN\", \"~\", 10000)\n  end\nend\n--[[\n  Validate and move or add dependencies to parent.\n]]\n-- Includes\nlocal function updateParentDepsIfNeeded(parentKey, parentQueueKey, parentDependenciesKey,\n  parentId, jobIdKey, returnvalue, timestamp )\n  local processedSet = parentKey .. \":processed\"\n  rcall(\"HSET\", processedSet, jobIdKey, returnvalue)\n  moveParentToWaitIfNeeded(parentQueueKey, parentDependenciesKey, parentKey, parentId, timestamp)\nend\nlocal jobIdKey = KEYS[12]\nif rcall(\"EXISTS\", jobIdKey) == 1 then -- // Make sure job exists\n    local opts = cmsgpack.unpack(ARGV[8])\n    local token = opts['token']\n    local errorCode = removeLock(jobIdKey, KEYS[5], token, ARGV[1])\n    if errorCode < 0 then\n        return errorCode\n    end\n    local attempts = opts['attempts']\n    local maxMetricsSize = opts['maxMetricsSize']\n    local maxCount = opts['keepJobs']['count']\n    local maxAge = opts['keepJobs']['age']\n    if rcall(\"SCARD\", jobIdKey .. \":dependencies\") ~= 0 then -- // Make sure it does not have pending dependencies\n        return -4\n    end\n    local jobAttributes = rcall(\"HMGET\", jobIdKey, \"parentKey\", \"parent\", \"deid\")\n    local parentKey = jobAttributes[1] or \"\"\n    local parentId = \"\"\n    local parentQueueKey = \"\"\n    if jobAttributes[2] ~= false then\n        local jsonDecodedParent = cjson.decode(jobAttributes[2])\n        parentId = jsonDecodedParent['id']\n        parentQueueKey = jsonDecodedParent['queueKey']\n    end\n    local jobId = ARGV[1]\n    local timestamp = ARGV[2]\n    -- Remove from active list (if not active we shall return error)\n    local numRemovedElements = rcall(\"LREM\", KEYS[2], -1, jobId)\n    if (numRemovedElements < 1) then return -3 end\n    local eventStreamKey = KEYS[4]\n    local metaKey = KEYS[9]\n    -- Trim events before emiting them to avoid trimming events emitted in this script\n    trimEvents(metaKey, eventStreamKey)\n    local prefix = ARGV[7]\n    removeDeduplicationKeyIfNeeded(prefix, jobAttributes[3])\n    -- If job has a parent we need to\n    -- 1) remove this job id from parents dependencies\n    -- 2) move the job Id to parent \"processed\" set\n    -- 3) push the results into parent \"results\" list\n    -- 4) if parent's dependencies is empty, then move parent to \"wait/paused\". Note it may be a different queue!.\n    if parentId == \"\" and parentKey ~= \"\" then\n        parentId = getJobIdFromKey(parentKey)\n        parentQueueKey = getJobKeyPrefix(parentKey, \":\" .. parentId)\n    end\n    if parentId ~= \"\" then\n        if ARGV[5] == \"completed\" then\n            local dependenciesSet = parentKey .. \":dependencies\"\n            if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                updateParentDepsIfNeeded(parentKey, parentQueueKey,\n                                         dependenciesSet, parentId, jobIdKey,\n                                         ARGV[4], timestamp)\n            end\n        else\n            if opts['fpof'] then\n                moveParentFromWaitingChildrenToFailed(parentQueueKey, parentKey,\n                                                      parentId, jobIdKey,\n                                                      timestamp)\n            elseif opts['idof'] or opts['rdof'] then\n                local dependenciesSet = parentKey .. \":dependencies\"\n                if rcall(\"SREM\", dependenciesSet, jobIdKey) == 1 then\n                    moveParentToWaitIfNeeded(parentQueueKey, dependenciesSet,\n                                             parentKey, parentId, timestamp)\n                    if opts['idof'] then\n                        local failedSet = parentKey .. \":failed\"\n                        rcall(\"HSET\", failedSet, jobIdKey, ARGV[4])\n                    end\n                end\n            end\n        end\n    end\n    local attemptsMade = rcall(\"HINCRBY\", jobIdKey, \"atm\", 1)\n    -- Remove job?\n    if maxCount ~= 0 then\n        local targetSet = KEYS[11]\n        -- Add to complete/failed set\n        rcall(\"ZADD\", targetSet, timestamp, jobId)\n        rcall(\"HMSET\", jobIdKey, ARGV[3], ARGV[4], \"finishedOn\", timestamp)\n        -- \"returnvalue\" / \"failedReason\" and \"finishedOn\"\n        -- Remove old jobs?\n        if maxAge ~= nil then\n            removeJobsByMaxAge(timestamp, maxAge, targetSet, prefix)\n        end\n        if maxCount ~= nil and maxCount > 0 then\n            removeJobsByMaxCount(maxCount, targetSet, prefix)\n        end\n    else\n        removeJobKeys(jobIdKey)\n        if parentKey ~= \"\" then\n            -- TODO: when a child is removed when finished, result or failure in parent\n            -- must not be deleted, those value references should be deleted when the parent\n            -- is deleted\n            removeParentDependencyKey(jobIdKey, false, parentKey, jobAttributes[3])\n        end\n    end\n    rcall(\"XADD\", eventStreamKey, \"*\", \"event\", ARGV[5], \"jobId\", jobId, ARGV[3],\n          ARGV[4])\n    if ARGV[5] == \"failed\" then\n        if tonumber(attemptsMade) >= tonumber(attempts) then\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"retries-exhausted\", \"jobId\",\n                  jobId, \"attemptsMade\", attemptsMade)\n        end\n    end\n    -- Collect metrics\n    if maxMetricsSize ~= \"\" then\n        collectMetrics(KEYS[13], KEYS[13] .. ':data', maxMetricsSize, timestamp)\n    end\n    -- Try to get next job to avoid an extra roundtrip if the queue is not closing,\n    -- and not rate limited.\n    if (ARGV[6] == \"1\") then\n        local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[2], KEYS[1], KEYS[8])\n        -- Check if there are delayed jobs that can be promoted\n        promoteDelayedJobs(KEYS[7], KEYS[14], target, KEYS[3], eventStreamKey, prefix,\n                           timestamp, KEYS[10], isPausedOrMaxed)\n        local maxJobs = tonumber(opts['limiter'] and opts['limiter']['max'])\n        -- Check if we are rate limited first.\n        local expireTime = getRateLimitTTL(maxJobs, KEYS[6])\n        if expireTime > 0 then return {0, 0, expireTime, 0} end\n        -- paused or maxed queue\n        if isPausedOrMaxed then return {0, 0, 0, 0} end\n        jobId = rcall(\"RPOPLPUSH\", KEYS[1], KEYS[2])\n        if jobId then\n            -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n            if string.sub(jobId, 1, 2) == \"0:\" then\n                rcall(\"LREM\", KEYS[2], 1, jobId)\n                -- If jobId is special ID 0:delay (delay greater than 0), then there is no job to process\n                -- but if ID is 0:0, then there is at least 1 prioritized job to process\n                if jobId == \"0:0\" then\n                    jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2],\n                                                        KEYS[10])\n                    return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                                   timestamp, maxJobs,\n                                                   opts)\n                end\n            else\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        else\n            jobId = moveJobFromPriorityToActive(KEYS[3], KEYS[2], KEYS[10])\n            if jobId then\n                return prepareJobForProcessing(prefix, KEYS[6], eventStreamKey, jobId,\n                                               timestamp, maxJobs,\n                                               opts)\n            end\n        end\n        -- Return the timestamp for the next delayed job if any.\n        local nextTimestamp = getNextDelayedTimestamp(KEYS[7])\n        if nextTimestamp ~= nil then\n            -- The result is guaranteed to be positive, since the\n            -- ZRANGEBYSCORE command would have return a job otherwise.\n            return {0, 0, 0, nextTimestamp}\n        end\n    end\n    local waitLen = rcall(\"LLEN\", KEYS[1])\n    if waitLen == 0 then\n        local activeLen = rcall(\"LLEN\", KEYS[2])\n        if activeLen == 0 then\n            local prioritizedLen = rcall(\"ZCARD\", KEYS[3])\n            if prioritizedLen == 0 then\n                rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"drained\")\n            end\n        end\n    end\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":14,"readOnly":false,"sha":"12006f44a676d9abd1b94956e52c26b0a23f2d53"},"moveToWaitingChildren:5.23.0":{"keyPrefix":"","lua":"--[[\n  Moves job from active to waiting children set.\n  Input:\n    KEYS[1] lock key\n    KEYS[2] active key\n    KEYS[3] waitChildrenKey key\n    KEYS[4] job key\n    KEYS[5] stalled key\n    ARGV[1] token\n    ARGV[2] child key\n    ARGV[3] timestamp\n    ARGV[4] the id of the job\n  Output:\n    0 - OK\n    1 - There are not pending dependencies.\n   -1 - Missing job.\n   -2 - Missing lock\n   -3 - Job not in active set\n]]\nlocal rcall = redis.call\nlocal stalledKey = KEYS[5]\n--- Includes\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\nlocal function moveToWaitingChildren (activeKey, waitingChildrenKey, jobId,\n    timestamp)\n  local score = tonumber(timestamp)\n  local numRemovedElements = rcall(\"LREM\", activeKey, -1, jobId)\n  if(numRemovedElements < 1) then\n    return -3\n  end\n  rcall(\"ZADD\", waitingChildrenKey, score, jobId)\n  return 0\nend\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  if ARGV[2] ~= \"\" then\n    if rcall(\"SISMEMBER\", KEYS[4] .. \":dependencies\", ARGV[2]) ~= 0 then\n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  else\n    if rcall(\"SCARD\", KEYS[4] .. \":dependencies\") ~= 0 then \n      local errorCode = removeLock(KEYS[4], stalledKey, ARGV[1], ARGV[4])\n      if errorCode < 0 then\n        return errorCode\n      end\n      return moveToWaitingChildren(KEYS[2], KEYS[3], ARGV[4], ARGV[3])\n    end\n    return 1\n  end\nend\nreturn -1\n","numberOfKeys":5,"readOnly":false,"sha":"6973c26e3288f458fe6c1018d2e75b11159dc264"},"obliterate:5.23.0":{"keyPrefix":"","lua":"--[[\n  Completely obliterates a queue and all of its contents\n  This command completely destroys a queue including all of its jobs, current or past \n  leaving no trace of its existence. Since this script needs to iterate to find all the job\n  keys, consider that this call may be slow for very large queues.\n  The queue needs to be \"paused\" or it will return an error\n  If the queue has currently active jobs then the script by default will return error,\n  however this behaviour can be overrided using the 'force' option.\n  Input:\n    KEYS[1] meta\n    KEYS[2] base\n    ARGV[1] count\n    ARGV[2] force\n]]\nlocal maxCount = tonumber(ARGV[1])\nlocal baseKey = KEYS[2]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\n--[[\n  Function to remove job.\n]]\n-- Includes\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(jobId, hard, baseKey, shouldRemoveDeduplicationKey)\n  local jobKey = baseKey .. jobId\n  removeParentDependencyKey(jobKey, hard, nil, baseKey)\n  if shouldRemoveDeduplicationKey then\n    removeDeduplicationKey(baseKey, jobKey)\n  end\n  removeJobKeys(jobKey)\nend\nlocal function removeJobs(keys, hard, baseKey, max)\n  for i, key in ipairs(keys) do\n    removeJob(key, hard, baseKey, true --[[remove debounce key]])\n  end\n  return max - #keys\nend\n--[[\n  Functions to remove jobs.\n]]\n-- Includes\nlocal function getListItems(keyName, max)\n  return rcall('LRANGE', keyName, 0, max - 1)\nend\nlocal function removeListJobs(keyName, hard, baseKey, max)\n  local jobs = getListItems(keyName, max)\n  local count = removeJobs(jobs, hard, baseKey, max)\n  rcall(\"LTRIM\", keyName, #jobs, -1)\n  return count\nend\n-- Includes\n--[[\n  Function to loop in batches.\n  Just a bit of warning, some commands as ZREM\n  could receive a maximum of 7000 parameters per call.\n]]\nlocal function batches(n, batchSize)\n  local i = 0\n  return function()\n    local from = i * batchSize + 1\n    i = i + 1\n    if (from <= n) then\n      local to = math.min(from + batchSize - 1, n)\n      return from, to\n    end\n  end\nend\n--[[\n  Function to get ZSet items.\n]]\nlocal function getZSetItems(keyName, max)\n  return rcall('ZRANGE', keyName, 0, max - 1)\nend\nlocal function removeZSetJobs(keyName, hard, baseKey, max, jobsToIgnore)\n  local jobs = getZSetItems(keyName, max)\n  -- filter out jobs to ignore\n  if jobsToIgnore then\n    local filteredJobs = {}\n    for i = 1, #jobs do\n      if not jobsToIgnore[jobs[i]] then\n        table.insert(filteredJobs, jobs[i])\n      end\n    end\n    jobs = filteredJobs\n  end\n  local count = removeJobs(jobs, hard, baseKey, max)\n  if(#jobs > 0) then\n    for from, to in batches(#jobs, 7000) do\n      rcall(\"ZREM\", keyName, unpack(jobs, from, to))\n    end\n  end\n  return count\nend\nlocal function removeLockKeys(keys)\n  for i, key in ipairs(keys) do\n    rcall(\"DEL\", baseKey .. key .. ':lock')\n  end\nend\n-- 1) Check if paused, if not return with error.\nif rcall(\"HEXISTS\", KEYS[1], \"paused\") ~= 1 then\n  return -1 -- Error, NotPaused\nend\n-- 2) Check if there are active jobs, if there are and not \"force\" return error.\nlocal activeKey = baseKey .. 'active'\nlocal activeJobs = getListItems(activeKey, maxCount)\nif (#activeJobs > 0) then\n  if(ARGV[2] == \"\") then \n    return -2 -- Error, ExistActiveJobs\n  end\nend\nremoveLockKeys(activeJobs)\nmaxCount = removeJobs(activeJobs, true, baseKey, maxCount)\nrcall(\"LTRIM\", activeKey, #activeJobs, -1)\nif(maxCount <= 0) then\n  return 1\nend\nlocal delayedKey = baseKey .. 'delayed'\nmaxCount = removeZSetJobs(delayedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal repeatKey = baseKey .. 'repeat'\nlocal repeatJobsIds = getZSetItems(repeatKey, maxCount)\nfor i, key in ipairs(repeatJobsIds) do\n  local jobKey = repeatKey .. \":\" .. key\n  rcall(\"DEL\", jobKey)\nend\nif(#repeatJobsIds > 0) then\n  for from, to in batches(#repeatJobsIds, 7000) do\n    rcall(\"ZREM\", repeatKey, unpack(repeatJobsIds, from, to))\n  end\nend\nmaxCount = maxCount - #repeatJobsIds\nif(maxCount <= 0) then\n  return 1\nend\nlocal completedKey = baseKey .. 'completed'\nmaxCount = removeZSetJobs(completedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal waitKey = baseKey .. 'paused'\nmaxCount = removeListJobs(waitKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal prioritizedKey = baseKey .. 'prioritized'\nmaxCount = removeZSetJobs(prioritizedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nlocal failedKey = baseKey .. 'failed'\nmaxCount = removeZSetJobs(failedKey, true, baseKey, maxCount)\nif(maxCount <= 0) then\n  return 1\nend\nif(maxCount > 0) then\n  rcall(\"DEL\",\n    baseKey .. 'events',\n    baseKey .. 'delay', \n    baseKey .. 'stalled-check',\n    baseKey .. 'stalled',\n    baseKey .. 'id',\n    baseKey .. 'pc',\n    baseKey .. 'meta',\n    baseKey .. 'metrics:completed',\n    baseKey .. 'metrics:completed:data',\n    baseKey .. 'metrics:failed',\n    baseKey .. 'metrics:failed:data')\n  return 0\nelse\n  return 1\nend\n","numberOfKeys":2,"readOnly":false,"sha":"373cd929817041e9886b8934d98dcad319bd1fa3"},"paginate:5.23.0":{"keyPrefix":"","lua":"--[[\n    Paginate a set or hash\n    Input:\n      KEYS[1] key pointing to the set or hash to be paginated.\n      ARGV[1]  page start offset\n      ARGV[2]  page end offset (-1 for all the elements)\n      ARGV[3]  cursor\n      ARGV[4]  offset\n      ARGV[5]  max iterations\n      ARGV[6]  fetch jobs?\n    Output:\n      [cursor, offset, items, numItems]\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to achieve pagination for a set or hash.\n  This function simulates pagination in the most efficient way possible\n  for a set using sscan or hscan.\n  The main limitation is that sets are not order preserving, so the\n  pagination is not stable. This means that if the set is modified\n  between pages, the same element may appear in different pages.\n]] -- Maximum number of elements to be returned by sscan per iteration.\nlocal maxCount = 100\n-- Finds the cursor, and returns the first elements available for the requested page.\nlocal function findPage(key, command, pageStart, pageSize, cursor, offset,\n                        maxIterations, fetchJobs)\n    local items = {}\n    local jobs = {}\n    local iterations = 0\n    repeat\n        -- Iterate over the set using sscan/hscan.\n        local result = rcall(command, key, cursor, \"COUNT\", maxCount)\n        cursor = result[1]\n        local members = result[2]\n        local step = 1\n        if command == \"HSCAN\" then\n            step = 2\n        end\n        if #members == 0 then\n            -- If the result is empty, we can return the result.\n            return cursor, offset, items, jobs\n        end\n        local chunkStart = offset\n        local chunkEnd = offset + #members / step\n        local pageEnd = pageStart + pageSize\n        if chunkEnd < pageStart then\n            -- If the chunk is before the page, we can skip it.\n            offset = chunkEnd\n        elseif chunkStart > pageEnd then\n            -- If the chunk is after the page, we can return the result.\n            return cursor, offset, items, jobs\n        else\n            -- If the chunk is overlapping the page, we need to add the elements to the result.\n            for i = 1, #members, step do\n                if offset >= pageEnd then\n                    return cursor, offset, items, jobs\n                end\n                if offset >= pageStart then\n                    local index = #items + 1\n                    if fetchJobs ~= nil then\n                        jobs[#jobs+1] = rcall(\"HGETALL\", members[i])\n                    end\n                    if step == 2 then\n                        items[index] = {members[i], members[i + 1]}\n                    else\n                        items[index] = members[i]\n                    end\n                end\n                offset = offset + 1\n            end\n        end\n        iterations = iterations + 1\n    until cursor == \"0\" or iterations >= maxIterations\n    return cursor, offset, items, jobs\nend\nlocal key = KEYS[1]\nlocal scanCommand = \"SSCAN\"\nlocal countCommand = \"SCARD\"\nlocal type = rcall(\"TYPE\", key)[\"ok\"]\nif type == \"none\" then\n    return {0, 0, {}, 0}\nelseif type == \"hash\" then\n    scanCommand = \"HSCAN\"\n    countCommand = \"HLEN\"\nelseif type ~= \"set\" then\n    return\n        redis.error_reply(\"Pagination is only supported for sets and hashes.\")\nend\nlocal numItems = rcall(countCommand, key)\nlocal startOffset = tonumber(ARGV[1])\nlocal endOffset = tonumber(ARGV[2])\nif endOffset == -1 then \n  endOffset = numItems\nend\nlocal pageSize = (endOffset - startOffset) + 1\nlocal cursor, offset, items, jobs = findPage(key, scanCommand, startOffset,\n                                       pageSize, ARGV[3], tonumber(ARGV[4]),\n                                       tonumber(ARGV[5]), ARGV[6])\nreturn {cursor, offset, items, numItems, jobs}\n","numberOfKeys":1,"readOnly":false,"sha":"24e0a4e97b78f73b314c257b4fff96ebfc207f27"},"pause:5.23.0":{"keyPrefix":"","lua":"--[[\n  Pauses or resumes a queue globably.\n  Input:\n    KEYS[1] 'wait' or 'paused''\n    KEYS[2] 'paused' or 'wait'\n    KEYS[3] 'meta'\n    KEYS[4] 'prioritized'\n    KEYS[5] events stream key\n    KEYS[6] 'delayed'\n    KEYS|7] 'marker'\n    ARGV[1] 'paused' or 'resumed'\n  Event:\n    publish paused or resumed event.\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Add delay marker if needed.\n]]\n-- Includes\n--[[\n  Function to return the next delayed job timestamp.\n]]\nlocal function getNextDelayedTimestamp(delayedKey)\n  local result = rcall(\"ZRANGE\", delayedKey, 0, 0, \"WITHSCORES\")\n  if #result then\n    local nextTimestamp = tonumber(result[2])\n    if nextTimestamp ~= nil then \n      return nextTimestamp / 0x1000\n    end\n  end\nend\nlocal function addDelayMarkerIfNeeded(markerKey, delayedKey)\n  local nextTimestamp = getNextDelayedTimestamp(delayedKey)\n  if nextTimestamp ~= nil then\n    -- Replace the score of the marker with the newest known\n    -- next timestamp.\n    rcall(\"ZADD\", markerKey, nextTimestamp, \"1\")\n  end\nend\nlocal markerKey = KEYS[7]\nlocal hasJobs = rcall(\"EXISTS\", KEYS[1]) == 1\n--TODO: check this logic to be reused when changing a delay\nif hasJobs then rcall(\"RENAME\", KEYS[1], KEYS[2]) end\nif ARGV[1] == \"paused\" then\n    rcall(\"HSET\", KEYS[3], \"paused\", 1)\n    rcall(\"DEL\", markerKey)\nelse\n    rcall(\"HDEL\", KEYS[3], \"paused\")\n    if hasJobs or rcall(\"ZCARD\", KEYS[4]) > 0 then\n        -- Add marker if there are waiting or priority jobs\n        rcall(\"ZADD\", markerKey, 0, \"0\")\n    else\n        addDelayMarkerIfNeeded(markerKey, KEYS[6])\n    end\nend\nrcall(\"XADD\", KEYS[5], \"*\", \"event\", ARGV[1]);\n","numberOfKeys":7,"readOnly":false,"sha":"b5e8cf4d8b11d432fad7d3f9a78f55ce7f9e5e58"},"promote:5.23.0":{"keyPrefix":"","lua":"--[[\n  Promotes a job that is currently \"delayed\" to the \"waiting\" state\n    Input:\n      KEYS[1] 'delayed'\n      KEYS[2] 'wait'\n      KEYS[3] 'paused'\n      KEYS[4] 'meta'\n      KEYS[5] 'prioritized'\n      KEYS[6] 'active'\n      KEYS[7] 'pc' priority counter\n      KEYS[8] 'event stream'\n      KEYS[9] 'marker'\n      ARGV[1]  queue.toKey('')\n      ARGV[2]  jobId\n    Output:\n       0 - OK\n      -3 - Job not in delayed zset.\n    Events:\n      'waiting'\n]]\nlocal rcall = redis.call\nlocal jobId = ARGV[2]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"ZREM\", KEYS[1], jobId) == 1 then\n    local jobKey = ARGV[1] .. jobId\n    local priority = tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n    local metaKey = KEYS[4]\n    local markerKey = KEYS[9]\n    -- Remove delayed \"marker\" from the wait list if there is any.\n    -- Since we are adding a job we do not need the marker anymore.\n    -- Markers in waitlist DEPRECATED in v5: Remove in v6.\n    local target, isPausedOrMaxed = getTargetQueueList(metaKey, KEYS[6], KEYS[2], KEYS[3])\n    local marker = rcall(\"LINDEX\", target, 0)\n    if marker and string.sub(marker, 1, 2) == \"0:\" then rcall(\"LPOP\", target) end\n    if priority == 0 then\n        -- LIFO or FIFO\n        addJobInTargetList(target, markerKey, \"LPUSH\", isPausedOrMaxed, jobId)\n    else\n        addJobWithPriority(markerKey, KEYS[5], priority, jobId, KEYS[7], isPausedOrMaxed)\n    end\n    -- Emit waiting event (wait..ing@token)\n    rcall(\"XADD\", KEYS[8], \"*\", \"event\", \"waiting\", \"jobId\", jobId, \"prev\",\n          \"delayed\");\n    rcall(\"HSET\", jobKey, \"delay\", 0)\n    return 0\nelse\n    return -3\nend\n","numberOfKeys":9,"readOnly":false,"sha":"3b1d1df758d39e3939530d7943c8f8b10be81ef5"},"releaseLock:5.23.0":{"keyPrefix":"","lua":"--[[\n  Release lock\n    Input:\n      KEYS[1] 'lock',\n      ARGV[1]  token\n      ARGV[2]  lock duration in milliseconds\n    Output:\n      \"OK\" if lock extented succesfully.\n]]\nlocal rcall = redis.call\nif rcall(\"GET\", KEYS[1]) == ARGV[1] then\n  return rcall(\"DEL\", KEYS[1])\nelse\n  return 0\nend\n","numberOfKeys":1,"readOnly":false,"sha":"aa94dc35fb8a4d637c5faaa49796b6094475e299"},"removeChildDependency:5.23.0":{"keyPrefix":"","lua":"--[[\n  Break parent-child dependency by removing\n  child reference from parent\n  Input:\n    KEYS[1] 'key' prefix,\n    ARGV[1] job key\n    ARGV[2] parent key\n    Output:\n       0  - OK\n       1  - There is not relationship.\n      -1  - Missing job key\n      -5  - Missing parent key\n]]\nlocal rcall = redis.call\nlocal jobKey = ARGV[1]\nlocal parentKey = ARGV[2]\n-- Includes\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nif rcall(\"EXISTS\", jobKey) ~= 1 then return -1 end\nif rcall(\"EXISTS\", parentKey) ~= 1 then return -5 end\nif removeParentDependencyKey(jobKey, false, parentKey, KEYS[1], nil) then\n  rcall(\"HDEL\", jobKey, \"parentKey\", \"parent\")\n  return 0\nelse\n  return 1\nend","numberOfKeys":1,"readOnly":false,"sha":"91d0d0ceb4fdecae5b011a6acad7dae6df8b917a"},"removeJob:5.23.0":{"keyPrefix":"","lua":"--[[\n    Remove a job from all the queues it may be in as well as all its data.\n    In order to be able to remove a job, it cannot be active.\n    Input:\n      KEYS[1] queue prefix\n      KEYS[2] meta key\n      ARGV[1] jobId\n      ARGV[2] remove children\n    Events:\n      'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Functions to destructure job key.\n  Just a bit of warning, these functions may be a bit slow and affect performance significantly.\n]]\nlocal getJobIdFromKey = function (jobKey)\n  return string.match(jobKey, \".*:(.*)\")\nend\nlocal getJobKeyPrefix = function (jobKey, jobId)\n  return string.sub(jobKey, 0, #jobKey - #jobId)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to recursively check if there are no locks\n  on the jobs to be removed.\n  returns:\n    boolean\n]]\nlocal function isLocked( prefix, jobId, removeChildren)\n  local jobKey = prefix .. jobId;\n  -- Check if this job is locked\n  local lockKey = jobKey .. ':lock'\n  local lock = rcall(\"GET\", lockKey)\n  if not lock then\n    if removeChildren == \"1\" then\n      local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n      if (#dependencies > 0) then\n        for i, childJobKey in ipairs(dependencies) do\n          -- We need to get the jobId for this job.\n          local childJobId = getJobIdFromKey(childJobKey)\n          local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n          local result = isLocked( childJobPrefix, childJobId, removeChildren )\n          if result then\n            return true\n          end\n        end\n      end\n    end\n    return false\n  end\n  return true\nend\n--[[\n  Function to remove deduplication key.\n]]\nlocal function removeDeduplicationKey(prefixKey, jobKey)\n  local deduplicationId = rcall(\"HGET\", jobKey, \"deid\")\n  if deduplicationId then\n    local deduplicationKey = prefixKey .. \"de:\" .. deduplicationId\n    rcall(\"DEL\", deduplicationKey)\n  end\nend\n--[[\n  Function to remove from any state.\n  returns:\n    prev state\n]]\nlocal function removeJobFromAnyState( prefix, jobId)\n  -- We start with the ZSCORE checks, since they have O(1) complexity\n  if rcall(\"ZSCORE\", prefix .. \"completed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"completed\", jobId)\n    return \"completed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"waiting-children\", jobId) then\n    rcall(\"ZREM\", prefix .. \"waiting-children\", jobId)\n    return \"waiting-children\"\n  elseif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"delayed\", jobId)\n    return \"delayed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"failed\", jobId) then\n    rcall(\"ZREM\", prefix .. \"failed\", jobId)\n    return \"failed\"\n  elseif rcall(\"ZSCORE\", prefix .. \"prioritized\", jobId) then\n    rcall(\"ZREM\", prefix .. \"prioritized\", jobId)\n    return \"prioritized\"\n  -- We remove only 1 element from the list, since we assume they are not added multiple times\n  elseif rcall(\"LREM\", prefix .. \"wait\", 1, jobId) == 1 then\n    return \"wait\"\n  elseif rcall(\"LREM\", prefix .. \"paused\", 1, jobId) == 1 then\n    return \"paused\"\n  elseif rcall(\"LREM\", prefix .. \"active\", 1, jobId) == 1 then\n    return \"active\"\n  end\n  return \"unknown\"\nend\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n--[[\n  Check if this job has a parent. If so we will just remove it from\n  the parent child list, but if it is the last child we should move the parent to \"wait/paused\"\n  which requires code from \"moveToFinished\"\n]]\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nlocal function moveParentToWait(parentPrefix, parentId, emitEvent)\n  local parentTarget, isPausedOrMaxed = getTargetQueueList(parentPrefix .. \"meta\", parentPrefix .. \"active\",\n    parentPrefix .. \"wait\", parentPrefix .. \"paused\")\n  addJobInTargetList(parentTarget, parentPrefix .. \"marker\", \"RPUSH\", isPausedOrMaxed, parentId)\n  if emitEvent then\n    local parentEventStream = parentPrefix .. \"events\"\n    rcall(\"XADD\", parentEventStream, \"*\", \"event\", \"waiting\", \"jobId\", parentId, \"prev\", \"waiting-children\")\n  end\nend\nlocal function removeParentDependencyKey(jobKey, hard, parentKey, baseKey, debounceId)\n  if parentKey then\n    local parentDependenciesKey = parentKey .. \":dependencies\"\n    local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n    if result > 0 then\n      local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n      if pendingDependencies == 0 then\n        local parentId = getJobIdFromKey(parentKey)\n        local parentPrefix = getJobKeyPrefix(parentKey, parentId)\n        local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n        if numRemovedElements == 1 then\n          if hard then -- remove parent in same queue\n            if parentPrefix == baseKey then\n              removeParentDependencyKey(parentKey, hard, nil, baseKey, nil)\n              removeJobKeys(parentKey)\n              if debounceId then\n                rcall(\"DEL\", parentPrefix .. \"de:\" .. debounceId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId)\n            end\n          else\n            moveParentToWait(parentPrefix, parentId, true)\n          end\n        end\n      end\n      return true\n    end\n  else\n    local parentAttributes = rcall(\"HMGET\", jobKey, \"parentKey\", \"deid\")\n    local missedParentKey = parentAttributes[1]\n    if( (type(missedParentKey) == \"string\") and missedParentKey ~= \"\"\n      and (rcall(\"EXISTS\", missedParentKey) == 1)) then\n      local parentDependenciesKey = missedParentKey .. \":dependencies\"\n      local result = rcall(\"SREM\", parentDependenciesKey, jobKey)\n      if result > 0 then\n        local pendingDependencies = rcall(\"SCARD\", parentDependenciesKey)\n        if pendingDependencies == 0 then\n          local parentId = getJobIdFromKey(missedParentKey)\n          local parentPrefix = getJobKeyPrefix(missedParentKey, parentId)\n          local numRemovedElements = rcall(\"ZREM\", parentPrefix .. \"waiting-children\", parentId)\n          if numRemovedElements == 1 then\n            if hard then\n              if parentPrefix == baseKey then\n                removeParentDependencyKey(missedParentKey, hard, nil, baseKey, nil)\n                removeJobKeys(missedParentKey)\n                if parentAttributes[2] then\n                  rcall(\"DEL\", parentPrefix .. \"de:\" .. parentAttributes[2])\n                end\n              else\n                moveParentToWait(parentPrefix, parentId)\n              end\n            else\n              moveParentToWait(parentPrefix, parentId, true)\n            end\n          end\n        end\n        return true\n      end\n    end\n  end\n  return false\nend\nlocal function removeJob(prefix, jobId, parentKey, removeChildren)\n    local jobKey = prefix .. jobId;\n    removeParentDependencyKey(jobKey, false, parentKey, nil)\n    if removeChildren == \"1\" then\n        -- Check if this job has children\n        -- If so, we are going to try to remove the children recursively in deep first way because\n        -- if some job is locked we must exit with and error.\n        -- local countProcessed = rcall(\"HLEN\", jobKey .. \":processed\")\n        local processed = rcall(\"HGETALL\", jobKey .. \":processed\")\n        if (#processed > 0) then\n            for i = 1, #processed, 2 do\n                local childJobId = getJobIdFromKey(processed[i])\n                local childJobPrefix = getJobKeyPrefix(processed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local dependencies = rcall(\"SMEMBERS\", jobKey .. \":dependencies\")\n        if (#dependencies > 0) then\n            for i, childJobKey in ipairs(dependencies) do\n                -- We need to get the jobId for this job.\n                local childJobId = getJobIdFromKey(childJobKey)\n                local childJobPrefix = getJobKeyPrefix(childJobKey, childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n        local failed = rcall(\"HGETALL\", jobKey .. \":failed\")\n        if (#failed > 0) then\n            for i = 1, #failed, 2 do\n                local childJobId = getJobIdFromKey(failed[i])\n                local childJobPrefix = getJobKeyPrefix(failed[i], childJobId)\n                removeJob(childJobPrefix, childJobId, jobKey, removeChildren)\n            end\n        end\n    end\n    local prev = removeJobFromAnyState(prefix, jobId)\n    removeDeduplicationKey(prefix, jobKey)\n    if removeJobKeys(jobKey) > 0 then\n        local maxEvents = getOrSetMaxEvents(KEYS[2])\n        rcall(\"XADD\", prefix .. \"events\", \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"removed\", \"jobId\", jobId, \"prev\",\n            prev)\n    end\nend\nlocal prefix = KEYS[1]\nlocal jobId = ARGV[1]\nlocal shouldRemoveChildren = ARGV[2]\nlocal jobKey = prefix .. jobId\n-- Check if the job belongs to a job scheduler and it is in delayed state.\nif rcall(\"ZSCORE\", prefix .. \"delayed\", jobId) and rcall(\"HGET\", jobKey, \"rjk\") then\n    return -8 -- Return error code as the job is part of a job scheduler and is in delayed state.\nend\nif not isLocked(prefix, jobId, shouldRemoveChildren) then\n    removeJob(prefix, jobId, nil, shouldRemoveChildren)\n    return 1\nend\nreturn 0\n","numberOfKeys":2,"readOnly":false,"sha":"6ab3da66c7019f2baed32b1b6ded3d70871a9882"},"removeJobScheduler:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] job schedulers key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] job scheduler id\n    ARGV[2] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\nlocal jobSchedulerId = ARGV[1]\nlocal prefix = ARGV[2]\nlocal millis = rcall(\"ZSCORE\", KEYS[1], jobSchedulerId)\nif millis then\n  -- Delete next programmed job.\n  local delayedJobId = \"repeat:\" .. jobSchedulerId .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], delayedJobId) == 1) then\n    removeJobKeys(prefix .. delayedJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", delayedJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], jobSchedulerId) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. jobSchedulerId)\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"97fea98805553999aa91f7168443955f40975f20"},"removeRepeatable:5.23.0":{"keyPrefix":"","lua":"--[[\n  Removes a repeatable job\n  Input:\n    KEYS[1] repeat jobs key\n    KEYS[2] delayed jobs key\n    KEYS[3] events key\n    ARGV[1] old repeat job id\n    ARGV[2] options concat\n    ARGV[3] repeat job key\n    ARGV[4] prefix key\n  Output:\n    0 - OK\n    1 - Missing repeat job\n  Events:\n    'removed'\n]]\nlocal rcall = redis.call\nlocal millis = rcall(\"ZSCORE\", KEYS[1], ARGV[2])\n-- Includes\n--[[\n  Function to remove job keys.\n]]\nlocal function removeJobKeys(jobKey)\n  return rcall(\"DEL\", jobKey, jobKey .. ':logs',\n    jobKey .. ':dependencies', jobKey .. ':processed', jobKey .. ':failed')\nend\n-- legacy removal TODO: remove in next breaking change\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = ARGV[1] .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\");\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[2]) == 1) then\n  return 0\nend\n-- new removal\nmillis = rcall(\"ZSCORE\", KEYS[1], ARGV[3])\nif millis then\n  -- Delete next programmed job.\n  local repeatJobId = \"repeat:\" .. ARGV[3] .. \":\" .. millis\n  if(rcall(\"ZREM\", KEYS[2], repeatJobId) == 1) then\n    removeJobKeys(ARGV[4] .. repeatJobId)\n    rcall(\"XADD\", KEYS[3], \"*\", \"event\", \"removed\", \"jobId\", repeatJobId, \"prev\", \"delayed\")\n  end\nend\nif(rcall(\"ZREM\", KEYS[1], ARGV[3]) == 1) then\n  rcall(\"DEL\", KEYS[1] .. \":\" .. ARGV[3])\n  return 0\nend\nreturn 1\n","numberOfKeys":3,"readOnly":false,"sha":"8b7754dbe8ee0938a634f0bfd43cfa41084e2074"},"reprocessJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Attempts to reprocess a job\n  Input:\n    KEYS[1] job key\n    KEYS[2] events stream\n    KEYS[3] job state\n    KEYS[4] wait key\n    KEYS[5] meta\n    KEYS[6] paused key\n    KEYS[7] active key\n    KEYS[8] marker key\n    ARGV[1] job.id\n    ARGV[2] (job.opts.lifo ? 'R' : 'L') + 'PUSH'\n    ARGV[3] propVal - failedReason/returnvalue\n    ARGV[4] prev state - failed/completed\n  Output:\n     1 means the operation was a success\n    -1 means the job does not exist\n    -3 means the job was not found in the expected set.\n]]\nlocal rcall = redis.call;\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  local jobId = ARGV[1]\n  if (rcall(\"ZREM\", KEYS[3], jobId) == 1) then\n    rcall(\"HDEL\", KEYS[1], \"finishedOn\", \"processedOn\", ARGV[3])\n    local target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[7], KEYS[4], KEYS[6])\n    addJobInTargetList(target, KEYS[8], ARGV[2], isPausedOrMaxed, jobId)\n    local maxEvents = getOrSetMaxEvents(KEYS[5])\n    -- Emit waiting event\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n      \"jobId\", jobId, \"prev\", ARGV[4]);\n    return 1\n  else\n    return -3\n  end\nelse\n  return -1\nend\n","numberOfKeys":8,"readOnly":false,"sha":"8dda09f0ada31675974dc60c7d149ee15b0743b9"},"retryJob:5.23.0":{"keyPrefix":"","lua":"--[[\n  Retries a failed job by moving it back to the wait queue.\n    Input:\n      KEYS[1]  'active',\n      KEYS[2]  'wait'\n      KEYS[3]  'paused'\n      KEYS[4]  job key\n      KEYS[5]  'meta'\n      KEYS[6]  events stream\n      KEYS[7]  delayed key\n      KEYS[8]  prioritized key\n      KEYS[9]  'pc' priority counter\n      KEYS[10] 'marker'\n      KEYS[11] 'stalled'\n      ARGV[1]  key prefix\n      ARGV[2]  timestamp\n      ARGV[3]  pushCmd\n      ARGV[4]  jobId\n      ARGV[5]  token\n    Events:\n      'waiting'\n    Output:\n     0  - OK\n     -1 - Missing key\n     -2 - Missing lock\n     -3 - Job not in active set\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to add job in target list and add marker if needed.\n]]\n-- Includes\n--[[\n  Add marker if needed when a job is available.\n]]\nlocal function addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\n  if not isPausedOrMaxed then\n    rcall(\"ZADD\", markerKey, 0, \"0\")\n  end  \nend\nlocal function addJobInTargetList(targetKey, markerKey, pushCmd, isPausedOrMaxed, jobId)\n  rcall(pushCmd, targetKey, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to add job considering priority.\n]]\n-- Includes\nlocal function addJobWithPriority(markerKey, prioritizedKey, priority, jobId, priorityCounterKey,\n  isPausedOrMaxed)\n  local prioCounter = rcall(\"INCR\", priorityCounterKey)\n  local score = priority * 0x100000000 + prioCounter % 0x100000000\n  rcall(\"ZADD\", prioritizedKey, score, jobId)\n  addBaseMarkerIfNeeded(markerKey, isPausedOrMaxed)\nend\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\n--[[\n  Function to check for the meta.paused key to decide if we are paused or not\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function getTargetQueueList(queueMetaKey, activeKey, waitKey, pausedKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return pausedKey, true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      if activeCount >= tonumber(queueAttributes[2]) then\n        return waitKey, true\n      else\n        return waitKey, false\n      end\n    end\n  end\n  return waitKey, false\nend\n--[[\n  Updates the delay set, by moving delayed jobs that should\n  be processed now to \"wait\".\n     Events:\n      'waiting'\n]]\n-- Includes\n-- Try to get as much as 1000 jobs at once\nlocal function promoteDelayedJobs(delayedKey, markerKey, targetKey, prioritizedKey,\n                                  eventStreamKey, prefix, timestamp, priorityCounterKey, isPaused)\n    local jobs = rcall(\"ZRANGEBYSCORE\", delayedKey, 0, (timestamp + 1) * 0x1000 - 1, \"LIMIT\", 0, 1000)\n    if (#jobs > 0) then\n        rcall(\"ZREM\", delayedKey, unpack(jobs))\n        for _, jobId in ipairs(jobs) do\n            local jobKey = prefix .. jobId\n            local priority =\n                tonumber(rcall(\"HGET\", jobKey, \"priority\")) or 0\n            if priority == 0 then\n                -- LIFO or FIFO\n                addJobInTargetList(targetKey, markerKey, \"LPUSH\", isPaused, jobId)\n            else\n                addJobWithPriority(markerKey, prioritizedKey, priority,\n                  jobId, priorityCounterKey, isPaused)\n            end\n            -- Emit waiting event\n            rcall(\"XADD\", eventStreamKey, \"*\", \"event\", \"waiting\", \"jobId\",\n                  jobId, \"prev\", \"delayed\")\n            rcall(\"HSET\", jobKey, \"delay\", 0)\n        end\n    end\nend\nlocal function removeLock(jobKey, stalledKey, token, jobId)\n  if token ~= \"0\" then\n    local lockKey = jobKey .. ':lock'\n    local lockToken = rcall(\"GET\", lockKey)\n    if lockToken == token then\n      rcall(\"DEL\", lockKey)\n      rcall(\"SREM\", stalledKey, jobId)\n    else\n      if lockToken then\n        -- Lock exists but token does not match\n        return -6\n      else\n        -- Lock is missing completely\n        return -2\n      end\n    end\n  end\n  return 0\nend\n--[[\n  Function to check if queue is paused or maxed\n  (since an empty list and !EXISTS are not really the same).\n]]\nlocal function isQueuePausedOrMaxed(queueMetaKey, activeKey)\n  local queueAttributes = rcall(\"HMGET\", queueMetaKey, \"paused\", \"concurrency\")\n  if queueAttributes[1] then\n    return true\n  else\n    if queueAttributes[2] then\n      local activeCount = rcall(\"LLEN\", activeKey)\n      return activeCount >= tonumber(queueAttributes[2])\n    end\n  end\n  return false\nend\nlocal target, isPausedOrMaxed = getTargetQueueList(KEYS[5], KEYS[1], KEYS[2], KEYS[3])\nlocal markerKey = KEYS[10]\n-- Check if there are delayed jobs that we can move to wait.\n-- test example: when there are delayed jobs between retries\npromoteDelayedJobs(KEYS[7], markerKey, target, KEYS[8], KEYS[6], ARGV[1], ARGV[2], KEYS[9], isPausedOrMaxed)\nif rcall(\"EXISTS\", KEYS[4]) == 1 then\n  local errorCode = removeLock(KEYS[4], KEYS[11], ARGV[5], ARGV[4]) \n  if errorCode < 0 then\n    return errorCode\n  end\n  local numRemovedElements = rcall(\"LREM\", KEYS[1], -1, ARGV[4])\n  if (numRemovedElements < 1) then return -3 end\n  local priority = tonumber(rcall(\"HGET\", KEYS[4], \"priority\")) or 0\n  --need to re-evaluate after removing job from active\n  isPausedOrMaxed = isQueuePausedOrMaxed(KEYS[5], KEYS[1])\n  -- Standard or priority add\n  if priority == 0 then\n    addJobInTargetList(target, markerKey, ARGV[3], isPausedOrMaxed, ARGV[4])\n  else\n    addJobWithPriority(markerKey, KEYS[8], priority, ARGV[4], KEYS[9], isPausedOrMaxed)\n  end\n  rcall(\"HINCRBY\", KEYS[4], \"atm\", 1)\n  local maxEvents = getOrSetMaxEvents(KEYS[5])\n  -- Emit waiting event\n  rcall(\"XADD\", KEYS[6], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"waiting\",\n    \"jobId\", ARGV[4], \"prev\", \"failed\")\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":11,"readOnly":false,"sha":"6076d6fc973ce8afee9cb60d78b0c0b6bd5eae4c"},"saveStacktrace:5.23.0":{"keyPrefix":"","lua":"--[[\n  Save stacktrace and failedReason.\n  Input:\n    KEYS[1] job key\n    ARGV[1]  stacktrace\n    ARGV[2]  failedReason\n  Output:\n     0 - OK\n    -1 - Missing key\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then\n  rcall(\"HMSET\", KEYS[1], \"stacktrace\", ARGV[1], \"failedReason\", ARGV[2])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"ab2818154a3f405adad5e01b769e79c50fb9e615"},"updateData:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job data\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] data\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\",KEYS[1]) == 1 then -- // Make sure job exists\n  rcall(\"HSET\", KEYS[1], \"data\", ARGV[1])\n  return 0\nelse\n  return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"12a42ffd90c486a7f398fbb17cdcdd484f4abaea"},"updateJobOption:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update a job option\n  Input:\n    KEYS[1] Job id key\n    ARGV[1] field\n    ARGV[2] value\n  Output:\n    0 - OK\n   -1 - Missing job.\n]]\nlocal rcall = redis.call\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local opts = rcall(\"HGET\", KEYS[1], \"opts\")\n    local jsonOpts = cjson.decode(opts)\n    jsonOpts[ARGV[1]] = ARGV[2]\n    rcall(\"HSET\", KEYS[1], \"opts\", cjson.encode(jsonOpts))\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":1,"readOnly":false,"sha":"03691d12e8d0415d9c65afda83999f77432e7d1a"},"updateProgress:5.23.0":{"keyPrefix":"","lua":"--[[\n  Update job progress\n  Input:\n    KEYS[1] Job id key\n    KEYS[2] event stream key\n    KEYS[3] meta key\n    ARGV[1] id\n    ARGV[2] progress\n  Output:\n     0 - OK\n    -1 - Missing job.\n  Event:\n    progress(jobId, progress)\n]]\nlocal rcall = redis.call\n-- Includes\n--[[\n  Function to get max events value or set by default 10000.\n]]\nlocal function getOrSetMaxEvents(metaKey)\n    local maxEvents = rcall(\"HGET\", metaKey, \"opts.maxLenEvents\")\n    if not maxEvents then\n        maxEvents = 10000\n        rcall(\"HSET\", metaKey, \"opts.maxLenEvents\", maxEvents)\n    end\n    return maxEvents\nend\nif rcall(\"EXISTS\", KEYS[1]) == 1 then -- // Make sure job exists\n    local maxEvents = getOrSetMaxEvents(KEYS[3])\n    rcall(\"HSET\", KEYS[1], \"progress\", ARGV[2])\n    rcall(\"XADD\", KEYS[2], \"MAXLEN\", \"~\", maxEvents, \"*\", \"event\", \"progress\",\n          \"jobId\", ARGV[1], \"data\", ARGV[2]);\n    return 0\nelse\n    return -1\nend\n","numberOfKeys":3,"readOnly":false,"sha":"ddd7da9c6be4b31a479136c66425bef0bc2a047f"},"updateRepeatableJobMillis:5.23.0":{"keyPrefix":"","lua":"--[[\n  Adds a repeatable job\n    Input:\n      KEYS[1] 'repeat' key\n      ARGV[1] next milliseconds\n      ARGV[2] custom key\n      ARGV[3] legacy custom key TODO: remove this logic in next breaking change\n      Output:\n        repeatableKey  - OK\n]]\nlocal rcall = redis.call\nlocal repeatKey = KEYS[1]\nlocal nextMillis = ARGV[1]\nlocal customKey = ARGV[2]\nlocal legacyCustomKey = ARGV[3]\nif rcall(\"ZSCORE\", repeatKey, customKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, customKey)\n    return customKey\nelseif rcall(\"ZSCORE\", repeatKey, legacyCustomKey) ~= false then\n    rcall(\"ZADD\", repeatKey, nextMillis, legacyCustomKey)\n    return legacyCustomKey\nend\nreturn ''\n","numberOfKeys":1,"readOnly":false,"sha":"18e65990db4c93586838c27a5975ee2d3a63ce00"}},"status":"ready","stream":{"_closeAfterHandlingError":false,"_events":{"error":[null,null]},"_eventsCount":5,"_hadError":false,"_host":null,"_parent":null,"_pendingData":null,"_pendingEncoding":"","_readableState":{"awaitDrainWriters":null,"buffer":[],"bufferIndex":0,"highWaterMark":65536,"length":0,"pipes":[]},"_server":null,"_sockname":null,"_writableState":{"bufferedIndex":0,"corked":0,"highWaterMark":65536,"length":0,"pendingcb":0,"writelen":0},"allowHalfOpen":false,"connecting":false,"server":null,"timeout":0}},"_events":{},"_eventsCount":2,"blocking":true,"capabilities":{"canBlockFor1Ms":true,"canDoubleTimeout":true},"initializing":{},"opts":{"host":"192.168.10.2","maxRetriesPerRequest":null,"port":6379},"shared":false,"skipVersionCheck":false,"status":"ready","version":"7.4.1"},"drained":false,"extendLocksTimer":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_destroyed":false,"_idleNext":{"_idleNext":"[Circular]","_idlePrev":"[Circular]","expiry":93470,"id":-9007199254740355,"msecs":7500,"priorityQueuePosition":2},"_idlePrev":"[Circular]","_idleStart":85970,"_idleTimeout":7500,"_repeat":null},"_idlePrev":"[Circular]","_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idlePrev":"[Circular]","_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idlePrev":"[Circular]","_idleStart":90265,"_idleTimeout":7500,"_repeat":null},"_idlePrev":{"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":{"_destroyed":false,"_idleNext":"[Circular]","_idlePrev":"[Circular]","_idleStart":90265,"_idleTimeout":7500,"_repeat":null},"_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idleStart":89890,"_idleTimeout":7500,"_repeat":null},"_idleStart":85970,"_idleTimeout":7500,"_repeat":null},"expiry":93470,"id":-9007199254740355,"msecs":7500,"priorityQueuePosition":2},"_idleStart":90933,"_idleTimeout":7500,"_repeat":null},"id":"3cb87e42-ec1b-401a-a5c2-de0412b1322b","keys":{"":"bull:tasks:","active":"bull:tasks:active","completed":"bull:tasks:completed","de":"bull:tasks:de","delayed":"bull:tasks:delayed","events":"bull:tasks:events","failed":"bull:tasks:failed","id":"bull:tasks:id","limiter":"bull:tasks:limiter","marker":"bull:tasks:marker","meta":"bull:tasks:meta","paused":"bull:tasks:paused","pc":"bull:tasks:pc","prioritized":"bull:tasks:prioritized","repeat":"bull:tasks:repeat","stalled":"bull:tasks:stalled","stalled-check":"bull:tasks:stalled-check","wait":"bull:tasks:wait","waiting-children":"bull:tasks:waiting-children"},"limitUntil":0,"name":"tasks","opts":{"autorun":true,"blockingConnection":true,"concurrency":1,"connection":{"host":"192.168.10.2","port":6379},"drainDelay":5,"lockDuration":30000,"lockRenewTime":15000,"maxStalledCount":1,"prefix":"bull","runRetryDelay":15000,"stalledInterval":30000},"qualifiedName":"bull:tasks","running":true,"scripts":{"moveToFinishedKeys":["bull:tasks:wait","bull:tasks:active","bull:tasks:prioritized","bull:tasks:events","bull:tasks:stalled","bull:tasks:limiter","bull:tasks:delayed","bull:tasks:paused","bull:tasks:meta","bull:tasks:pc",null,null,null,null],"queue":"[Circular]","version":"5.23.0"},"waiting":null},"version":"5.23.0"},"stacktrace":[],"timestamp":1730783998364,"token":"3cb87e42-ec1b-401a-a5c2-de0412b1322b:11"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T05:19:58.817Z"}
{"level":"verbose","message":"After Procesing Action. Rsult: ","timestamp":"2024-11-05T05:19:59.819Z"}
{"jobId":"21","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T05:19:59.826Z"}
{"jobId":"21","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":null,"timestamp":"2024-11-05T05:19:59.830Z"}
{"level":"info","message":"Completed job 21 065befbf-00a5-4fec-a01c-fe37d6eaf9ff on queue tasks with result undefined","timestamp":"2024-11-05T05:19:59.842Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:19:59.888Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:19:59.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:44:01.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:44:16.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:44:50.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:45:01.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:45:16.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:45:31.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:46:16.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:46:35.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:47:01.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:47:31.418Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:47:32.440Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:47:34.464Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:47:34.747Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:47:34.944Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:47:35.052Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:47:38.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:47:38.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:47:50.582Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T05:47:50.637Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T05:47:50.638Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","timestamp":"2024-11-05T05:47:51.641Z","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.645Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.648Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.652Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.677Z"}
{"level":"info","message":"Completed job 22 e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae on queue tasks with result [object Object]","timestamp":"2024-11-05T05:47:51.682Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.658Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.664Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.668Z"}
{"jobId":"22","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T05:47:50.576Z","error":null,"id":"e90d6a9c-0c7b-4ff7-804d-ecd6db6562ae","job_id":"","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"je;;l there"},"result":null,"status":"waiting","type":"REGULAR","updated_at":"2024-11-05T05:47:50.576Z","user_id":"some-user-id"},"timestamp":"2024-11-05T05:47:51.672Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.697Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.701Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.702Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.710Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.705Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.706Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.707Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T05:47:51.708Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T05:51:37.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:51:48.696Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:51:49.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:51:50.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:51:52.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:51:58.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:51:59.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:02.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:07.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:12.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:17.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:23.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:27.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:32.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:37.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:42.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:48.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:52.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:52:57.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:04.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:08.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:13.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:18.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:24.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:29.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:33.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:38.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:44.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:48.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:53:53.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:54:19.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:54:44.696Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:54:46.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T05:54:47.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:00:24.881Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T08:00:25.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:07:46.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:11:58.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:11:58.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:11:58.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:12:01.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:12:52.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:13:20.241Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T08:13:20.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:13:31.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:13:46.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:03.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:04.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:06.723Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:11.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:16.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:21.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:26.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:31.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:34.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:39.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:45.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:49.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:54.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:14:59.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:15:05.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:15:06.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:15:11.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:16:28.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:16:28.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:16:28.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:16:32.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:14.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:30.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:31.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:33.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:35.723Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:37.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:41.664Z"}
{"level":"error","message":"Failed to retrieve user ID:","timestamp":"2024-11-05T08:17:45.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:46.726Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:51.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:17:56.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:02.018Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:06.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:11.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:16.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:21.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:26.716Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:31.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:37.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:41.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:46.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:51.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:18:57.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:01.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:06.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:11.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:16.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:22.003Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:26.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:31.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:36.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:41.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:19:46.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:20:19.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:21:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:22:19.187Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:23:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:24:19.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:25:18.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:26:19.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:27:18.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:28:19.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:28:46.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:28:51.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:28:54.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:28:56.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:01.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:06.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:07.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:11.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:12.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:16.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:29:17.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:10.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:11.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:16.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:17.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:33.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:35.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:36.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:37.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:46.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:47.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:51.221Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:30:52.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:37:42.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:37:42.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:37:42.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:37:47.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:14.175Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-05T08:39:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:24.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:25.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:26.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:32.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:41.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:43.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:47.299Z"}
{"level":"error","message":"Failed to retrieve user ID:","timestamp":"2024-11-05T08:39:48.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:52.198Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:39:58.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:02.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:07.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:12.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:17.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:22.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:27.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:32.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:37.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:43.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:47.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:40:52.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:41:19.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:42:19.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:18.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:22.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:27.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:31.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:36.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:42.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:46.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:51.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:43:56.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:01.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:06.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:12.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:16.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:19.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:22.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:26.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:32.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:37.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:42.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:47.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:52.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:44:57.221Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:45:02.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:45:07.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:45:12.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:45:19.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:46:19.042Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:47:19.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:48:19.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:49:19.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:50:18.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:51:19.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:52:19.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:53:20.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:54:19.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:55:19.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:56:19.196Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:57:19.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:58:19.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T08:59:19.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:00:19.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:01:19.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:02:19.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:03:20.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:04:19.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:05:19.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:06:19.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:07:19.772Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:08:20.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:09:20.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:10:19.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:11:19.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:12:19.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:13:19.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:14:19.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:15:19.206Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:16:19.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:17:19.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:18:19.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:19:19.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:20:19.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:21:19.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:22:19.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:23:19.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:23:59.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:02.050Z"}
{"level":"error","message":"Failed to retrieve user ID:","timestamp":"2024-11-05T09:24:03.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:07.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:11.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:17.004Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:22.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:27.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:32.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:37.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:42.271Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:47.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:52.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:24:57.055Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:25:02.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:25:07.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:25:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:25:17.042Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:25:19.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:25:22.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:19.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:23.089Z"}
{"level":"error","message":"Failed to retrieve user ID:","timestamp":"2024-11-05T09:26:23.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:26.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:32.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:36.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:41.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:46.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:51.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:26:57.034Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:02.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:07.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:11.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:17.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:18.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:21.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:26.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:31.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:36.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:42.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:46.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:52.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:27:56.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:01.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:07.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:12.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:17.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:19.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:22.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:27.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:32.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:36.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:42.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:47.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:52.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:28:58.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:29:02.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:29:07.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:29:19.209Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:19.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:34.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:37.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:42.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:46.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:52.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:30:57.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:02.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:07.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:12.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:17.281Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:19.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:22.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:26.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:31.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:37.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:49.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:52.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:31:57.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:02.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:07.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:12.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:17.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:18.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:21.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:27.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:31.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:36.994Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:42.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:46.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:51.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:32:57.038Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:01.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:07.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:12.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:17.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:19.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:21.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:27.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:32.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:37.044Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:38.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:41.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:42.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:47.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:51.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:53.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:56.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:33:57.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:01.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:02.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:06.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:07.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:11.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:12.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:17.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:21.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:23.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:34:27.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:35:19.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:36:19.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:37:19.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:18.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:34.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:37.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:41.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:42.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:47.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:52.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:38:57.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:01.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:02.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:07.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:07.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:11.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:12.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:17.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:21.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:22.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:26.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:27.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:32.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:39:51.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:04.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:07.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:07.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:19.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:22.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:26.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:32.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:38.228Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:39.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:42.024Z"}
{"level":"error","message":"Failed to insert task into Supabase:","timestamp":"2024-11-05T09:40:43.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:46.974Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:52.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:57.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:40:57.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:01.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:03.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:06.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:07.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:11.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:12.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:17.003Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:17.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:22.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:28.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:32.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:37.960Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:43.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:41:47.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:42:41.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:42:44.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:43:09.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:43:16.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:43:19.340Z"}
{"level":"error","message":"Failed to insert task into Supabase:, {\"code\":\"22P02\",\"details\":null,\"hint\":null,\"message\":\"invalid input syntax for type uuid: \\\"m@m.com\\\"\"}","timestamp":"2024-11-05T09:43:38.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:43:55.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:43:57.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:02.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:07.029Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:12.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:17.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:22.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:26.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:37.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:38.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:41.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:43.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:47.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:51.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:44:57.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:45:19.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:18.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:21.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:26.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:32.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:37.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:41.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:47.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:51.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:46:57.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:47:02.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:47:21.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:47:23.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:47:26.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:47:29.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T09:47:35.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:06:51.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:06:54.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:06:55.748Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:06:58.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:00.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:02.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:05.023Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:07.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:09.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:11.946Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c3c13550-5670-4dae-b885-377043af6541\",\"job_id\":\"6f6cbc15-5d87-4dd6-b200-182b1ac27742\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"gewkki nt nAuibew!\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:07:14.655Z\",\"updated_at\":\"2024-11-05T10:07:14.655Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:07:14.681Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:07:14.708Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:07:14.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:14.977Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:07:14.655Z","error":null,"id":"c3c13550-5670-4dae-b885-377043af6541","job_id":"6f6cbc15-5d87-4dd6-b200-182b1ac27742","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"gewkki nt nAuibew!"},"result":null,"status":"active","timestamp":"2024-11-05T10:07:15.715Z","type":"REALTIME","updated_at":"2024-11-05T10:07:14.655Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"23","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:07:14.655Z","error":null,"id":"c3c13550-5670-4dae-b885-377043af6541","job_id":"6f6cbc15-5d87-4dd6-b200-182b1ac27742","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"gewkki nt nAuibew!"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:07:14.655Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:07:15.722Z"}
{"level":"info","message":"Completed job 23 c3c13550-5670-4dae-b885-377043af6541 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:07:15.732Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:07:15.738Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:15.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:16.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:19.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:21.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:26.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:31.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:36.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:41.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:47.233Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:52.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:07:56.886Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"35da6e6c-237a-4abb-9bd9-f441ef957721\",\"job_id\":\"b3371ea7-478a-44de-957f-9fdd5d142225\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"gineette\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:08:00.359Z\",\"updated_at\":\"2024-11-05T10:08:00.359Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:08:00.397Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:08:00.421Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:08:00.423Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:08:00.359Z","error":null,"id":"35da6e6c-237a-4abb-9bd9-f441ef957721","job_id":"b3371ea7-478a-44de-957f-9fdd5d142225","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"gineette"},"result":null,"status":"active","timestamp":"2024-11-05T10:08:01.424Z","type":"REALTIME","updated_at":"2024-11-05T10:08:00.359Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"24","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:08:00.359Z","error":null,"id":"35da6e6c-237a-4abb-9bd9-f441ef957721","job_id":"b3371ea7-478a-44de-957f-9fdd5d142225","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"gineette"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:08:00.359Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:08:01.430Z"}
{"level":"info","message":"Completed job 24 35da6e6c-237a-4abb-9bd9-f441ef957721 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:08:01.434Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:08:01.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:01.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:02.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:06.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:16.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:18.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:21.896Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"2de842fd-d617-4789-a5ec-ca5f927f69c7\",\"job_id\":\"ad218937-b184-45e0-8471-dade7c4473b3\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"bob tockettte?\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:08:24.139Z\",\"updated_at\":\"2024-11-05T10:08:24.139Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:08:24.162Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:08:24.183Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:08:24.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:25.179Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:08:24.139Z","error":null,"id":"2de842fd-d617-4789-a5ec-ca5f927f69c7","job_id":"ad218937-b184-45e0-8471-dade7c4473b3","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"bob tockettte?"},"result":null,"status":"active","timestamp":"2024-11-05T10:08:25.187Z","type":"REALTIME","updated_at":"2024-11-05T10:08:24.139Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"25","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:08:24.139Z","error":null,"id":"2de842fd-d617-4789-a5ec-ca5f927f69c7","job_id":"ad218937-b184-45e0-8471-dade7c4473b3","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"bob tockettte?"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:08:24.139Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:08:25.194Z"}
{"level":"info","message":"Completed job 25 2de842fd-d617-4789-a5ec-ca5f927f69c7 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:08:25.199Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:08:25.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:26.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:31.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:33.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:38.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:41.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:47.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:51.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:08:56.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:01.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:07.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:12.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:14.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:16.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:17.239Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:19.196Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:22.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:26.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:32.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:37.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:42.011Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:47.003Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:52.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:09:57.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:10:02.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:10:19.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:11:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:12:19.022Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:05.042Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:07.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:12.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:18.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:18.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:21.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:26.960Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c42a8f4b-0698-41b3-a7b0-d8bc62383be3\",\"job_id\":\"3490cbbc-4663-4782-ac97-a92100957ec0\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"yo jimbo ca rioroule ?>\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:13:27.053Z\",\"updated_at\":\"2024-11-05T10:13:27.053Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:13:27.083Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:13:27.106Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:13:27.110Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:13:27.053Z","error":null,"id":"c42a8f4b-0698-41b3-a7b0-d8bc62383be3","job_id":"3490cbbc-4663-4782-ac97-a92100957ec0","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"yo jimbo ca rioroule ?>"},"result":null,"status":"active","timestamp":"2024-11-05T10:13:28.112Z","type":"REALTIME","updated_at":"2024-11-05T10:13:27.053Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"26","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:13:27.053Z","error":null,"id":"c42a8f4b-0698-41b3-a7b0-d8bc62383be3","job_id":"3490cbbc-4663-4782-ac97-a92100957ec0","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"yo jimbo ca rioroule ?>"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:13:27.053Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:13:28.121Z"}
{"level":"info","message":"Completed job 26 c42a8f4b-0698-41b3-a7b0-d8bc62383be3 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:13:28.125Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:13:28.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:28.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:31.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:36.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:41.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:47.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:51.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:13:56.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:14:02.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:14:06.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:14:19.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:15:19.043Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:16:18.998Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:17:19.051Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"2041fca8-0f0e-4753-830a-493f969cc089\",\"job_id\":\"4bfc51fa-0033-4d4a-8a10-da5c471a5923\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ljkjjkk\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:17:43.070Z\",\"updated_at\":\"2024-11-05T10:17:43.070Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:17:43.116Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:17:43.139Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:17:43.142Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:17:43.070Z","error":null,"id":"2041fca8-0f0e-4753-830a-493f969cc089","job_id":"4bfc51fa-0033-4d4a-8a10-da5c471a5923","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ljkjjkk"},"result":null,"status":"active","timestamp":"2024-11-05T10:17:44.144Z","type":"REALTIME","updated_at":"2024-11-05T10:17:43.070Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"27","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:17:43.070Z","error":null,"id":"2041fca8-0f0e-4753-830a-493f969cc089","job_id":"4bfc51fa-0033-4d4a-8a10-da5c471a5923","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ljkjjkk"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:17:43.070Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:17:44.150Z"}
{"level":"info","message":"Completed job 27 2041fca8-0f0e-4753-830a-493f969cc089 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:17:44.155Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:17:44.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:17:44.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:18:19.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:19:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:20:19.020Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:21:18.969Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:22:19.000Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:23:18.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:24:19.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:25:19.035Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:26:18.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:27:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:27:50.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:27:52.230Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:27:53.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:27:55.087Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"f8da0561-a6db-4987-a80b-f8103910fbb6\",\"job_id\":\"d2e1133c-b755-47ac-825a-9e133058304b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"\\\\\\\\\\\\\\\\bbiob rty beau\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:28:11.428Z\",\"updated_at\":\"2024-11-05T10:28:11.428Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:28:11.483Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:28:11.503Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:28:11.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:28:12.438Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:28:11.428Z","error":null,"id":"f8da0561-a6db-4987-a80b-f8103910fbb6","job_id":"d2e1133c-b755-47ac-825a-9e133058304b","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"\\\\\\\\bbiob rty beau"},"result":null,"status":"active","timestamp":"2024-11-05T10:28:12.505Z","type":"REALTIME","updated_at":"2024-11-05T10:28:11.428Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"28","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:28:11.428Z","error":null,"id":"f8da0561-a6db-4987-a80b-f8103910fbb6","job_id":"d2e1133c-b755-47ac-825a-9e133058304b","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"\\\\\\\\bbiob rty beau"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:28:11.428Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:28:12.510Z"}
{"level":"info","message":"Completed job 28 f8da0561-a6db-4987-a80b-f8103910fbb6 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:28:12.513Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:28:12.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:28:19.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:29:18.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:30:19.012Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:31:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:32:18.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:33:18.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:34:18.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:35:18.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:36:18.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:37:19.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:38:19.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:39:19.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:40:18.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:41:18.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:42:19.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:43:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:44:18.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:45:18.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:46:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:47:19.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:48:19.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:49:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:50:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:51:18.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:52:18.984Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:53:19.023Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:10.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:19.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:24.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:29.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:31.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:34.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:39.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:44.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:50.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:54:55.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:00.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:05.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:09.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:14.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:19.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:25.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:30.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:34.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:39.084Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c5ee3798-86f9-42f3-8817-a41572e59517\",\"job_id\":\"c6e37450-8af9-4b5e-a4a2-9cc779d9c80d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ytoyo\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-05T10:55:39.810Z\",\"updated_at\":\"2024-11-05T10:55:39.810Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-05T10:55:39.847Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-05T10:55:39.865Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-05T10:55:39.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:40.841Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:55:39.810Z","error":null,"id":"c5ee3798-86f9-42f3-8817-a41572e59517","job_id":"c6e37450-8af9-4b5e-a4a2-9cc779d9c80d","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ytoyo"},"result":null,"status":"active","timestamp":"2024-11-05T10:55:40.870Z","type":"REALTIME","updated_at":"2024-11-05T10:55:39.810Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"29","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-05T10:55:39.810Z","error":null,"id":"c5ee3798-86f9-42f3-8817-a41572e59517","job_id":"c6e37450-8af9-4b5e-a4a2-9cc779d9c80d","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ytoyo"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-05T10:55:39.810Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-05T10:55:40.874Z"}
{"level":"info","message":"Completed job 29 c5ee3798-86f9-42f3-8817-a41572e59517 on queue tasks with result [object Object]","timestamp":"2024-11-05T10:55:40.878Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-05T10:55:40.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:44.238Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:48.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:54.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:55:59.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:04.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:09.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:14.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:19.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:24.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:29.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:35.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:39.049Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:44.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:49.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:54.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:56:59.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:04.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:11.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:15.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:19.049Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:20.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:25.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:30.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:31.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:35.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:40.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:45.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:50.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:57:54.992Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:00.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:05.017Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:09.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:14.992Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:19.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:24.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:30.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:45.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:50.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:58:54.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:00.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:04.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:10.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:14.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:18.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:19.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:25.219Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:30.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:35.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:40.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:45.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:50.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T10:59:55.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:00:19.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:01.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:05.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:07.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:10.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:13.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:14.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:19.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:20.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:25.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:30.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:37.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:40.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:45.035Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:50.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:01:55.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:02:00.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:02:05.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:02:10.010Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:02:15.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:02:19.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:02:56.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:00.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:05.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:10.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:15.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:19.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:25.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:30.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:35.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:40.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:45.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:50.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:03:55.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:04:19.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:05:19.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:06:19.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:07:19.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:08:19.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:19.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:33.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:38.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:43.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:48.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:53.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:09:58.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:03.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:08.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:13.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:18.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:23.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:28.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:33.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:38.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:43.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:49.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:54.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:10:59.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:04.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:09.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:14.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:18.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:25.229Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:29.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:34.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:40.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:45.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:49.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:54.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:11:59.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:12:04.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:12:09.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:12:14.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:12:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:12:19.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:13:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:14:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:15:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:16:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:17:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:18:19.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:19:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:20:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:21:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:22:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:23:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:24:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:25:18.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:26:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:27:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:28:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:29:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:30:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:31:18.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:32:18.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:33:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:34:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:35:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:36:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:37:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:38:19.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:39:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:40:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:41:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:42:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:43:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:44:18.974Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:45:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:46:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:47:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:48:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:49:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:50:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:51:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:52:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:53:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:54:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:55:18.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:56:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:57:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:58:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T11:59:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:00:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:01:19.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:02:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:03:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:04:19.027Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:05:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:06:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:07:18.994Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:08:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:09:18.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:10:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:11:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:12:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:13:18.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:14:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:15:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:16:18.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:17:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:18:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:19:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:20:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:21:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:22:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:23:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:24:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:25:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:26:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:27:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:28:18.969Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:29:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:30:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:31:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:32:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:33:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:34:18.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:35:18.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:36:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:37:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:38:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:39:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:40:19.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:41:19.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:42:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:43:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:44:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:45:18.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:46:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:47:18.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:48:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:49:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:50:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:51:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:52:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:53:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:54:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:55:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:56:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:57:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:58:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T12:59:18.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:00:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:01:18.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:02:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:03:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:04:19.035Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:05:18.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:06:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:07:19.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:08:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:09:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:10:18.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:11:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:12:19.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:13:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:14:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:15:18.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:16:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:17:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:18:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:19:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:20:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:21:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:22:18.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:23:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:24:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:25:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:26:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:27:18.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:28:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:29:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:30:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:31:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:32:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:33:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:34:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:35:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:36:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:37:18.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:38:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:39:18.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:40:18.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:41:18.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:42:19.026Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:43:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:44:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:45:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:46:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:47:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:48:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:49:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:50:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:51:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:52:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:53:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:54:19.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:55:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:56:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:57:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:58:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T13:59:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:00:18.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:01:19.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:02:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:03:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:04:19.013Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:05:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:06:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:07:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:08:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:09:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:10:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:11:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:12:18.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:13:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:14:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:15:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:16:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:17:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:18:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:19:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:20:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:21:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:22:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:23:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:24:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:25:18.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:26:18.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:27:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:28:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:29:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:30:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:31:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:32:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:33:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:34:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:35:18.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:36:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:37:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:38:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:39:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:40:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:41:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:42:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:43:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:44:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:45:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:46:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:47:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:48:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:49:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:50:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:51:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:52:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:53:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:54:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:55:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:56:18.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:57:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:58:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T14:59:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:00:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:01:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:02:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:03:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:04:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:05:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:06:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:07:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:08:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:09:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:10:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:11:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:12:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:13:18.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:14:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:15:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:16:18.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:17:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:18:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:19:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:20:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:21:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:22:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:23:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:24:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:25:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:26:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:27:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:28:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:29:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:30:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:31:18.995Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:32:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:33:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:34:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:35:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:36:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:37:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:38:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:39:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:40:18.990Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:41:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:42:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:43:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:44:18.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:45:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:46:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:47:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:48:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:49:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:50:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:51:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:52:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:53:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:54:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:55:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:56:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:57:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:58:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T15:59:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:00:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:01:19.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:02:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:03:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:04:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:05:18.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:06:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:07:18.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:08:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:09:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:10:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:11:18.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:12:18.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:13:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:14:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:15:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:16:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:17:19.000Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:18:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:19:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:20:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:21:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:22:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:23:18.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:24:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:25:19.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:26:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:27:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:28:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:29:19.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:30:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:31:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:32:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:33:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:34:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:35:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:36:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:37:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:38:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:39:18.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:40:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:41:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:42:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:43:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:44:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:45:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:46:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:47:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:48:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:49:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:50:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:51:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:52:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:53:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:54:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:55:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:56:18.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:57:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:58:18.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T16:59:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:00:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:01:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:02:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:03:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:04:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:05:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:06:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:07:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:08:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:09:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:10:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:11:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:12:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:13:19.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:14:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:15:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:16:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:17:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:18:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:19:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:20:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:21:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:22:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:23:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:24:18.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:25:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:26:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:27:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:28:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:29:18.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:30:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:31:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:32:18.967Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:33:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:34:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:35:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:36:18.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:37:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:38:18.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:39:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:40:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:41:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:42:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:43:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:44:19.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:45:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:46:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:47:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:48:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:49:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:50:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:51:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:52:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:53:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:54:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:55:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:56:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:57:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:58:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T17:59:18.995Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:00:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:01:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:02:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:03:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:04:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:05:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:06:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:07:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:08:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:09:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:10:18.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:11:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:12:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:13:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:14:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:15:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:16:18.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:17:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:18:18.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:19:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:20:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:21:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:22:18.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:23:18.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:24:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:25:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:26:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:27:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:28:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:29:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:30:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:31:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:32:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:33:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:34:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:35:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:36:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:37:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:38:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:39:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:40:18.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:41:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:42:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:43:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:44:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:45:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:46:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:47:18.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:48:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:49:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:50:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:51:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:52:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:53:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:54:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:55:18.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:56:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:57:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:58:18.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T18:59:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:00:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:01:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:02:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:03:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:04:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:05:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:06:18.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:07:18.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:08:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:09:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:10:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:11:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:12:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:13:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:14:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:15:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:16:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:17:18.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:18:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:19:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:20:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:21:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:22:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:23:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:24:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:25:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:26:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:27:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:28:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:29:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:30:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:31:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:32:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:33:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:34:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:35:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:36:18.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:37:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:38:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:39:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:40:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:41:18.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:42:19.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:43:18.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:44:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:45:18.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:46:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:47:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:48:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:49:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:50:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:51:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:52:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:53:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:54:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:55:19.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:56:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:57:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:58:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T19:59:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:00:18.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:01:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:02:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:03:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:04:19.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:05:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:06:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:07:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:08:18.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:09:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:10:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:11:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:12:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:13:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:14:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:15:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:16:18.992Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:17:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:18:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:19:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:20:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:21:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:22:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:23:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:24:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:25:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:26:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:27:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:28:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:29:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:30:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:31:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:32:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:33:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:34:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:35:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:36:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:37:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:38:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:39:18.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:40:19.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:41:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:42:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:43:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:44:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:45:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:46:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:47:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:48:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:49:18.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:50:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:51:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:52:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:53:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:54:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:55:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:56:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:57:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:58:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T20:59:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:00:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:01:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:02:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:03:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:04:18.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:05:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:06:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:07:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:08:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:09:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:10:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:11:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:12:18.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:13:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:14:18.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:15:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:16:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:17:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:18:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:19:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:20:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:21:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:22:18.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:23:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:24:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:25:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:26:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:27:19.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:28:18.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:29:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:30:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:31:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:32:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:33:18.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:34:19.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:35:18.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:36:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:37:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:38:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:39:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:40:18.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:41:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:42:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:43:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:44:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:45:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:46:18.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:47:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:48:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:49:18.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:50:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:51:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:52:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:53:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:54:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:55:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:56:18.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:57:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:58:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T21:59:19.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:00:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:01:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:02:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:03:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:04:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:05:18.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:06:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:07:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:08:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:09:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:10:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:11:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:12:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:13:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:14:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:15:19.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:16:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:17:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:18:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:19:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:20:18.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:21:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:22:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:23:18.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:24:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:25:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:26:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:27:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:28:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:29:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:30:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:31:18.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:32:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:33:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:34:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:35:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:36:18.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:37:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:38:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:39:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:40:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:41:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:42:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:43:18.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:44:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:45:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:46:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:47:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:48:18.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:49:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:50:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:51:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:52:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:53:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:54:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:55:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:56:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:57:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:58:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T22:59:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:00:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:01:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:02:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:03:18.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:04:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:05:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:06:18.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:07:18.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:08:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:09:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:10:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:11:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:12:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:13:18.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:14:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:15:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:16:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:17:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:18:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:19:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:20:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:21:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:22:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:23:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:24:18.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:25:18.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:26:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:27:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:28:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:29:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:30:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:31:18.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:32:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:33:18.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:34:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:35:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:36:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:37:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:38:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:39:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:40:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:41:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:42:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:43:18.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:44:18.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:45:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:46:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:47:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:48:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:49:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:50:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:51:18.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:52:19.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:53:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:54:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:55:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:56:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:57:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:58:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-05T23:59:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:00:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:01:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:02:18.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:03:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:04:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:05:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:06:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:07:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:08:18.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:09:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:10:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:11:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:12:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:13:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:14:19.043Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:15:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:16:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:17:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:18:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:19:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:20:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:21:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:22:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:23:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:24:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:25:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:26:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:27:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:28:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:29:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:30:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:31:19.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:32:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:33:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:34:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:35:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:36:19.035Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:37:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:38:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:39:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:40:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:41:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:42:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:43:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:44:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:45:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:46:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:47:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:48:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:49:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:50:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:51:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:52:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:53:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:54:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:55:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:56:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:57:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:58:19.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T00:59:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:00:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:01:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:02:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:03:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:04:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:05:18.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:06:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:07:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:08:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:09:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:10:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:11:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:12:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:13:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:14:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:15:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:16:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:17:19.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:18:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:19:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:20:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:21:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:22:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:23:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:24:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:25:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:26:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:27:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:28:18.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:29:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:30:19.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:31:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:32:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:33:18.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:34:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:35:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:36:18.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:37:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:38:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:39:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:40:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:41:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:42:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:43:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:44:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:45:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:46:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:47:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:48:18.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:49:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:50:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:51:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:52:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:53:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:54:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:55:18.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:56:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:57:18.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:58:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T01:59:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:00:18.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:01:18.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:02:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:03:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:04:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:05:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:06:18.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:07:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:08:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:09:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:10:18.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:11:19.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:12:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:13:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:14:18.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:15:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:16:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:17:18.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:18:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:19:19.008Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:20:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:21:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:22:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:23:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:24:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:25:18.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:26:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:27:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:28:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:29:18.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:30:18.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:31:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:32:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:33:19.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:34:19.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:35:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:36:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:37:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:38:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:39:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:40:19.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:41:19.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:42:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:43:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:44:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:45:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:46:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:47:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:48:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:49:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:50:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:51:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:52:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:53:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:54:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:55:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:56:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:57:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:58:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T02:59:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:00:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:01:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:02:18.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:03:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:04:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:05:18.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:06:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:07:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:08:18.998Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:09:18.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:10:18.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:11:18.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:12:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:13:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:14:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:15:18.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:16:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:17:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:18:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:19:19.050Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:20:18.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:21:18.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:22:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:23:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:24:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:25:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:26:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:27:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:28:18.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:29:18.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:30:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:31:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:32:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:33:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:34:18.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:35:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:36:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:37:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:38:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:39:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:40:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:41:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:42:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:43:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:44:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:45:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:46:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:47:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:48:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:49:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:50:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:51:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:52:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:53:18.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:54:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:55:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:56:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:57:19.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:58:18.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T03:59:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:00:18.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:01:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:02:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:03:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:04:18.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:05:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:06:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:07:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:08:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:09:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:10:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:11:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:12:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:13:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:14:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:15:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:16:18.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:17:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:18:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:19:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:20:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:21:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:22:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:23:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:24:18.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:25:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:26:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:27:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:28:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:29:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:30:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:31:19.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:32:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:33:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:34:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:35:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:36:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:37:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:38:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:39:19.173Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:40:18.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:41:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:42:18.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:43:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:44:18.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:45:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:46:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:47:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:48:18.969Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:49:18.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:50:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:51:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:52:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:53:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:54:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:55:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:56:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:57:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:58:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T04:59:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:00:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:01:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:02:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:03:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:04:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:05:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:06:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:07:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:08:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:09:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:10:18.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:11:19.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:12:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:13:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:14:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:15:18.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:16:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:17:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:18:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:19:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:20:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:21:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:22:18.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:23:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:24:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:25:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:26:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:27:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:28:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:29:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:30:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:31:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:32:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:33:18.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:34:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:35:18.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:36:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:37:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:38:18.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:39:18.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:40:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:41:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:42:19.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:43:18.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:44:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:45:18.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:46:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:47:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:48:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:49:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:50:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:51:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:52:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:53:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:54:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:55:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:56:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:57:19.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:58:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T05:59:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:00:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:01:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:02:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:03:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:04:19.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:05:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:06:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:07:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:08:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:09:18.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:10:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:11:19.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:12:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:13:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:14:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:15:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:16:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:17:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:18:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:19:19.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:20:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:21:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:22:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:23:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:24:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:25:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:26:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:27:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:28:18.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:29:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:30:19.010Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:31:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:32:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:33:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:34:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:35:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:36:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:37:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:38:18.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:39:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:40:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:41:18.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:42:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:43:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:44:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:45:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:46:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:47:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:48:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:49:19.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:50:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:51:18.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:52:18.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:53:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:54:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:55:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:56:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:57:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:58:18.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T06:59:18.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:00:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:01:18.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:02:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:03:19.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:04:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:05:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:06:18.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:07:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:08:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:09:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:10:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:11:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:12:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:13:18.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:14:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:15:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:16:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:17:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:18:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:19:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:20:18.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:21:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:22:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:23:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:24:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:25:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:26:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:27:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:28:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:29:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:30:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:31:18.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:32:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:33:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:34:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:35:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:36:18.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:37:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:38:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:39:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:40:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:41:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:42:19.035Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:43:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:44:18.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:45:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:46:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:47:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:48:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:49:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:50:18.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:51:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:52:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:53:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:54:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:55:18.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:56:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:57:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:58:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T07:59:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:00:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:01:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:02:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:03:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:04:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:05:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:06:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:07:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:08:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:09:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:10:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:11:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:12:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:13:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:14:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:15:18.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:16:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:17:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:18:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:19:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:20:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:21:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:22:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:23:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:24:18.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:25:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:26:18.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:27:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:28:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:29:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:30:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:31:18.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:32:18.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:33:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:34:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:35:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:36:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:37:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:38:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:39:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:40:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:41:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:42:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:43:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:44:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:45:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:46:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:47:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:48:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:49:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:50:18.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:51:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:52:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:53:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:54:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:55:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:56:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:57:19.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:58:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T08:59:18.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:00:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:01:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:02:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:03:18.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:04:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:05:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:06:21.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:07:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:08:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:09:18.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:10:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:11:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:12:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:13:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:14:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:15:18.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:16:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:17:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:18:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:19:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:20:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:21:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:22:18.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:23:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:24:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:25:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:26:18.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:27:18.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:28:18.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:29:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:30:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:31:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:32:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:33:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:34:18.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:35:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:36:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:37:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:38:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:39:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:40:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:41:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:42:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:43:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:44:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:45:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:46:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:47:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:48:18.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:49:18.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:50:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:51:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:52:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:53:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:54:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:55:18.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:56:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:57:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:58:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T09:59:18.998Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:00:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:01:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:02:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:03:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:04:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:05:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:06:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:07:18.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:08:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:09:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:10:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:11:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:12:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:13:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:14:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:15:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:16:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:17:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:18:19.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:19:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:20:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:21:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:22:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:23:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:24:19.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:25:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:26:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:27:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:28:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:29:19.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:30:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:31:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:32:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:33:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:34:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:35:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:36:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:37:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:38:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:39:18.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:40:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:41:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:42:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:43:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:44:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:45:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:46:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:47:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:48:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:49:19.024Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:50:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:51:18.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:52:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:53:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:54:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:55:18.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:56:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:57:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:58:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T10:59:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:00:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:01:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:02:18.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:03:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:04:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:05:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:06:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:07:19.031Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:08:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:09:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:10:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:11:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:12:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:13:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:14:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:15:18.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:16:18.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:17:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:18:19.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:19:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:20:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:21:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:22:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:23:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:24:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:25:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:26:18.963Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:27:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:28:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:29:19.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:30:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:31:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:32:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:33:18.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:34:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:35:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:36:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:37:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:38:18.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:39:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:40:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:41:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:42:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:43:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:44:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:45:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:46:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:47:18.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:48:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:49:18.960Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:50:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:51:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:52:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:53:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:54:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:55:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:56:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:57:18.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:58:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T11:59:18.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:00:18.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:01:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:02:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:03:18.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:04:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:05:18.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:06:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:07:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:08:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:09:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:10:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:11:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:12:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:13:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:14:18.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:15:18.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:16:18.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:17:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:18:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:19:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:20:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:21:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:22:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:23:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:24:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:25:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:26:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:27:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:28:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:29:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:30:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:31:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:32:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:33:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:34:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:35:18.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:36:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:37:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:38:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:39:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:40:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:41:18.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:42:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:43:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:44:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:45:19.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:46:19.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:47:18.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:48:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:49:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:50:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:51:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:52:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:53:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:54:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:55:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:56:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:57:19.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:58:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T12:59:18.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:00:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:01:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:02:18.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:03:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:04:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:05:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:06:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:07:18.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:08:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:09:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:10:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:11:18.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:12:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:13:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:14:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:15:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:16:18.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:17:18.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:18:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:19:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:20:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:21:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:22:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:23:18.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:24:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:25:18.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:26:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:27:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:28:18.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:29:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:30:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:31:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:32:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:33:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:34:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:35:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:36:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:37:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:38:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:39:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:40:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:41:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:42:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:43:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:44:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:45:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:46:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:47:18.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:48:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:49:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:50:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:51:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:52:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:53:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:54:18.994Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:55:18.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:56:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:57:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:58:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T13:59:18.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:00:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:01:18.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:02:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:03:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:04:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:05:18.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:06:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:07:18.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:08:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:09:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:10:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:11:18.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:12:18.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:13:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:14:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:15:18.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:16:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:17:18.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:18:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:19:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:20:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:21:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:22:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:23:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:24:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:25:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:26:18.967Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:27:18.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:28:18.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:29:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:30:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:31:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:32:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:33:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:34:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:35:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:36:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:37:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:38:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:39:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:40:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:41:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:42:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:43:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:44:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:45:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:46:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:47:18.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:48:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:49:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:50:18.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:51:18.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:52:18.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:53:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:54:18.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:55:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:56:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:57:18.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:58:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T14:59:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:00:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:01:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:02:18.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:03:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:04:18.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:05:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:06:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:07:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:08:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:09:18.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:10:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:11:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:12:18.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:13:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:14:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:15:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:16:18.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:17:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:18:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:19:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:20:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:21:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:22:18.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:23:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:24:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:25:19.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:26:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:27:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:28:18.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:29:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:30:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:31:18.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:32:19.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:33:18.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:34:18.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:35:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:36:18.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:37:19.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:38:18.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:39:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:40:18.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:41:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:42:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:43:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:44:18.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:45:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:46:18.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:47:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:48:18.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:49:18.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:50:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:51:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:52:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:53:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:54:18.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:55:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:56:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:57:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:58:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T15:59:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:00:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:01:18.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:02:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:03:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:04:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:05:18.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:06:18.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:07:18.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:08:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:09:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:10:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:11:19.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:12:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:13:18.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:14:19.038Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:15:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:16:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:17:19.004Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:18:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:19:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:20:18.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:21:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:22:18.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:23:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:24:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:25:18.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:26:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:27:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:28:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:29:18.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:30:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:31:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:32:18.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:33:18.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:34:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:35:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:36:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:37:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:38:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:39:18.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:40:18.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:41:18.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:42:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:43:18.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:44:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:45:18.969Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:46:18.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:47:18.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:48:18.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:49:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:50:18.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:51:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:52:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:53:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:54:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:55:18.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:56:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:57:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:58:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T16:59:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:00:18.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:01:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:02:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:03:18.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:04:19.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:05:18.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:06:18.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:07:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:08:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:09:18.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:10:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:11:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:12:18.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:13:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:14:18.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:15:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:16:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:17:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:18:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:19:18.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:20:18.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:21:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:22:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:23:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:24:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:25:18.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:26:18.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:27:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:28:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:29:18.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:30:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:31:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:32:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:33:18.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:34:18.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:35:18.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:36:18.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:37:18.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:38:18.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:39:18.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:40:18.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:41:18.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:42:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:43:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:44:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:45:18.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:46:18.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:47:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:48:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:49:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:50:18.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:51:18.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:52:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:53:18.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:54:19.002Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:55:18.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:56:18.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:57:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:58:18.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T17:59:18.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:00:18.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:01:18.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:02:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:03:18.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:04:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:05:18.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:06:18.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:07:18.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:08:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:09:18.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:10:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:11:18.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:12:18.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:13:18.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:14:18.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:15:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:16:19.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:17:18.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:18:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:19:18.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:20:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:21:18.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:22:18.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:23:18.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:24:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:25:18.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:26:18.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:27:18.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:28:18.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:29:18.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:30:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:31:18.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:32:18.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:33:18.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:34:18.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:35:18.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:36:18.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:37:18.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:38:18.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:39:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:40:18.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:41:18.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:42:18.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:43:18.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:44:19.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:45:18.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:46:18.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:47:18.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:48:18.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:49:18.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:50:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:51:18.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:52:18.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:53:18.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:54:18.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:55:18.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:56:18.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:57:18.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:58:18.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T18:59:18.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:00:18.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:01:18.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:02:18.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:03:19.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:04:18.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:05:15.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:06:15.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:07:15.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:08:15.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:09:15.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:10:15.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:11:15.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:12:15.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:13:15.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:14:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:15:15.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:16:15.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:17:15.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:18:15.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:19:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:20:15.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:21:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:22:15.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:23:15.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:24:15.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:25:15.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:26:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:27:15.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:28:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:29:16.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:30:15.534Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:31:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:32:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:33:15.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:34:15.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:35:15.699Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:36:15.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:37:15.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:38:15.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:39:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:40:15.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:41:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:42:15.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:43:15.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:44:15.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:45:15.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:46:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:47:15.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:48:15.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:49:15.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:50:15.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:51:15.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:52:15.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:53:15.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:54:15.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:55:15.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:56:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:57:15.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:58:15.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T19:59:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:00:15.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:01:15.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:02:15.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:03:15.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:04:15.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:05:15.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:06:15.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:07:16.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:08:15.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:09:15.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:10:15.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:11:15.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:15.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:20.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:25.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:30.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:35.629Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"4d0221aa-600e-447b-a84f-4906ef3bc36f\",\"job_id\":\"81f0c2fb-f1d0-480c-9f98-9003e5d11ebb\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi there\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:12:36.396Z\",\"updated_at\":\"2024-11-06T20:12:36.396Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:12:36.437Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:12:36.453Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:12:36.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:37.280Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:12:36.396Z","error":null,"id":"4d0221aa-600e-447b-a84f-4906ef3bc36f","job_id":"81f0c2fb-f1d0-480c-9f98-9003e5d11ebb","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","timestamp":"2024-11-06T20:12:37.457Z","type":"REALTIME","updated_at":"2024-11-06T20:12:36.396Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"30","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:12:36.396Z","error":null,"id":"4d0221aa-600e-447b-a84f-4906ef3bc36f","job_id":"81f0c2fb-f1d0-480c-9f98-9003e5d11ebb","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:12:36.396Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:12:37.461Z"}
{"level":"info","message":"Completed job 30 4d0221aa-600e-447b-a84f-4906ef3bc36f on queue tasks with result [object Object]","timestamp":"2024-11-06T20:12:37.464Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:12:37.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:40.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:45.663Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"aba75ba6-7de5-418c-977b-1f6dd5edd673\",\"job_id\":\"47bce188-9b92-4881-aa2c-d0053692e7af\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi there\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:12:48.086Z\",\"updated_at\":\"2024-11-06T20:12:48.086Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:12:48.099Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:12:48.109Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:12:48.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:48.957Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:12:48.086Z","error":null,"id":"aba75ba6-7de5-418c-977b-1f6dd5edd673","job_id":"47bce188-9b92-4881-aa2c-d0053692e7af","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","timestamp":"2024-11-06T20:12:49.111Z","type":"REALTIME","updated_at":"2024-11-06T20:12:48.086Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"31","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:12:48.086Z","error":null,"id":"aba75ba6-7de5-418c-977b-1f6dd5edd673","job_id":"47bce188-9b92-4881-aa2c-d0053692e7af","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:12:48.086Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:12:49.114Z"}
{"level":"info","message":"Completed job 31 aba75ba6-7de5-418c-977b-1f6dd5edd673 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:12:49.117Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:12:49.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:50.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:55.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:57.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:12:58.001Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"52094252-07e2-4cf7-b1cf-3c959ab01b02\",\"job_id\":\"3ce69efc-d103-4b72-b9ff-7b2dc66f3e44\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi there\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:12:59.188Z\",\"updated_at\":\"2024-11-06T20:12:59.188Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:12:59.203Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:12:59.216Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:12:59.217Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:00.075Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:12:59.188Z","error":null,"id":"52094252-07e2-4cf7-b1cf-3c959ab01b02","job_id":"3ce69efc-d103-4b72-b9ff-7b2dc66f3e44","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","timestamp":"2024-11-06T20:13:00.219Z","type":"REALTIME","updated_at":"2024-11-06T20:12:59.188Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"32","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:12:59.188Z","error":null,"id":"52094252-07e2-4cf7-b1cf-3c959ab01b02","job_id":"3ce69efc-d103-4b72-b9ff-7b2dc66f3e44","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:12:59.188Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:13:00.221Z"}
{"level":"info","message":"Completed job 32 52094252-07e2-4cf7-b1cf-3c959ab01b02 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:13:00.223Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:13:00.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:02.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:07.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:10.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:12.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:15.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:17.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:22.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:27.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:32.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:38.003Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:43.027Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:47.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:52.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:13:57.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:02.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:07.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:15.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:17.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:22.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:27.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:33.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:36.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:37.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:38.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:42.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:47.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:52.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:54.219Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:54.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:55.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:57.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:14:57.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:01.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:03.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:03.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:04.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:05.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:07.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:07.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:12.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:15.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:17.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:22.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:35.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:36.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:37.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:37.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:38.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:39.020Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:41.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:42.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:44.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:46.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:47.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:50.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:51.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:53.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:53.214Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d60e4bbf-cf51-409c-b453-47f7ac9463eb\",\"job_id\":\"cd7bfb64-a62f-4ddc-b448-5836075f0fc9\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi there\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:15:56.390Z\",\"updated_at\":\"2024-11-06T20:15:56.390Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:15:56.426Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:15:56.444Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:15:56.444Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:15:56.390Z","error":null,"id":"d60e4bbf-cf51-409c-b453-47f7ac9463eb","job_id":"cd7bfb64-a62f-4ddc-b448-5836075f0fc9","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","timestamp":"2024-11-06T20:15:57.447Z","type":"REALTIME","updated_at":"2024-11-06T20:15:56.390Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"33","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:15:56.390Z","error":null,"id":"d60e4bbf-cf51-409c-b453-47f7ac9463eb","job_id":"cd7bfb64-a62f-4ddc-b448-5836075f0fc9","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:15:56.390Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:15:57.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:57.452Z"}
{"level":"info","message":"Completed job 33 d60e4bbf-cf51-409c-b453-47f7ac9463eb on queue tasks with result [object Object]","timestamp":"2024-11-06T20:15:57.459Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:15:57.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:15:57.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:02.192Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:07.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:10.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:12.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:15.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:17.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:18.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:20.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:22.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:27.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:32.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:34.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:37.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:16:42.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:25.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:26.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:28.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:32.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:37.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:42.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:47.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:52.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:17:57.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:02.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:07.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:12.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:15.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:17.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:22.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:32.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:34.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:34.230Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:35.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:35.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:36.121Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"50ff12d6-d62e-436c-a674-ac97127ed932\",\"job_id\":\"03c2fa64-c4e5-42a4-8cb6-4fd4e2515dd1\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi there\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:18:36.551Z\",\"updated_at\":\"2024-11-06T20:18:36.551Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:18:36.657Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:18:36.705Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:18:36.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:37.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:37.515Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:18:36.551Z","error":null,"id":"50ff12d6-d62e-436c-a674-ac97127ed932","job_id":"03c2fa64-c4e5-42a4-8cb6-4fd4e2515dd1","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","timestamp":"2024-11-06T20:18:37.716Z","type":"REALTIME","updated_at":"2024-11-06T20:18:36.551Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"34","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:18:36.551Z","error":null,"id":"50ff12d6-d62e-436c-a674-ac97127ed932","job_id":"03c2fa64-c4e5-42a4-8cb6-4fd4e2515dd1","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:18:36.551Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:18:37.720Z"}
{"level":"info","message":"Completed job 34 50ff12d6-d62e-436c-a674-ac97127ed932 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:18:37.723Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:18:37.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:38.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:40.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:45.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:50.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:18:55.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:00.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:05.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:10.247Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:15.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:20.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:25.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:30.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:35.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:40.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:45.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:50.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:19:55.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:00.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:05.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:10.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:15.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:20.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:25.209Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:30.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:35.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:43.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:44.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:45.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:45.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:46.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:46.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:50.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:20:55.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:02.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:03.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:03.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:04.719Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:05.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:06.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:10.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:15.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:20.230Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:25.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:30.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:35.234Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"7ee04b12-5698-49ce-b48b-f0982e622678\",\"job_id\":\"50b44882-84a0-423a-8dd3-448047b99da6\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi there\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:21:36.074Z\",\"updated_at\":\"2024-11-06T20:21:36.074Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:21:36.108Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:21:36.130Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:21:36.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:37.032Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:21:36.074Z","error":null,"id":"7ee04b12-5698-49ce-b48b-f0982e622678","job_id":"50b44882-84a0-423a-8dd3-448047b99da6","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","timestamp":"2024-11-06T20:21:37.134Z","type":"REALTIME","updated_at":"2024-11-06T20:21:36.074Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"35","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:21:36.074Z","error":null,"id":"7ee04b12-5698-49ce-b48b-f0982e622678","job_id":"50b44882-84a0-423a-8dd3-448047b99da6","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi there"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:21:36.074Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:21:37.142Z"}
{"level":"info","message":"Completed job 35 7ee04b12-5698-49ce-b48b-f0982e622678 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:21:37.147Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:21:37.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:40.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:45.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:46.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:50.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:21:55.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:00.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:05.261Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:10.267Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:15.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:20.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:25.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:30.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:35.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:40.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:45.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:50.267Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:22:55.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:00.247Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:05.188Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:20.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:21.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:21.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:23.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:25.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:34.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:36.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:37.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:39.055Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:42.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:47.191Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d0af3810-077e-412b-91ca-1651c9b1723a\",\"job_id\":\"8d8704eb-4620-42ad-a888-72cde335faab\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:23:52.461Z\",\"updated_at\":\"2024-11-06T20:23:52.461Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:23:52.473Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:23:52.496Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:23:52.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:52.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:53.414Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:23:52.461Z","error":null,"id":"d0af3810-077e-412b-91ca-1651c9b1723a","job_id":"8d8704eb-4620-42ad-a888-72cde335faab","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:23:53.504Z","type":"REALTIME","updated_at":"2024-11-06T20:23:52.461Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"36","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:23:52.461Z","error":null,"id":"d0af3810-077e-412b-91ca-1651c9b1723a","job_id":"8d8704eb-4620-42ad-a888-72cde335faab","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:23:52.461Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:23:53.508Z"}
{"level":"info","message":"Completed job 36 d0af3810-077e-412b-91ca-1651c9b1723a on queue tasks with result [object Object]","timestamp":"2024-11-06T20:23:53.511Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:23:53.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:23:57.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:02.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:07.131Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"b5dff0d8-a1fc-4c65-a4a0-82988aa66faf\",\"job_id\":\"88cc3b49-b989-4cba-be00-b710bdd743a4\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:24:09.337Z\",\"updated_at\":\"2024-11-06T20:24:09.337Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:24:09.370Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:24:09.485Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:24:09.493Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"35503707-b685-442c-a578-db08cd76213c\",\"job_id\":\"199e5aa5-97d2-45de-8ea5-54d587679d36\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:24:09.868Z\",\"updated_at\":\"2024-11-06T20:24:09.868Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:24:09.889Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:24:09.923Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:24:09.927Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"718860e1-9a6d-466c-b177-9967270c660c\",\"job_id\":\"74bcbb55-4ccb-44e5-9946-ad9932af9a09\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:24:10.025Z\",\"updated_at\":\"2024-11-06T20:24:10.025Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:24:10.068Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:24:10.082Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:24:10.084Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:24:09.337Z","error":null,"id":"b5dff0d8-a1fc-4c65-a4a0-82988aa66faf","job_id":"88cc3b49-b989-4cba-be00-b710bdd743a4","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:24:10.494Z","type":"REALTIME","updated_at":"2024-11-06T20:24:09.337Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"37","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:24:09.337Z","error":null,"id":"b5dff0d8-a1fc-4c65-a4a0-82988aa66faf","job_id":"88cc3b49-b989-4cba-be00-b710bdd743a4","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:24:09.337Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:24:10.499Z"}
{"level":"info","message":"Completed job 37 b5dff0d8-a1fc-4c65-a4a0-82988aa66faf on queue tasks with result [object Object]","timestamp":"2024-11-06T20:24:10.502Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:24:10.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:10.554Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:24:09.868Z","error":null,"id":"35503707-b685-442c-a578-db08cd76213c","job_id":"199e5aa5-97d2-45de-8ea5-54d587679d36","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:24:10.929Z","type":"REALTIME","updated_at":"2024-11-06T20:24:09.868Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"38","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:24:09.868Z","error":null,"id":"35503707-b685-442c-a578-db08cd76213c","job_id":"199e5aa5-97d2-45de-8ea5-54d587679d36","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:24:09.868Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:24:10.933Z"}
{"level":"info","message":"Completed job 38 35503707-b685-442c-a578-db08cd76213c on queue tasks with result [object Object]","timestamp":"2024-11-06T20:24:10.936Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:24:10.945Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:24:10.025Z","error":null,"id":"718860e1-9a6d-466c-b177-9967270c660c","job_id":"74bcbb55-4ccb-44e5-9946-ad9932af9a09","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:24:11.085Z","type":"REALTIME","updated_at":"2024-11-06T20:24:10.025Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"39","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:24:10.025Z","error":null,"id":"718860e1-9a6d-466c-b177-9967270c660c","job_id":"74bcbb55-4ccb-44e5-9946-ad9932af9a09","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:24:10.025Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:24:11.088Z"}
{"level":"info","message":"Completed job 39 718860e1-9a6d-466c-b177-9967270c660c on queue tasks with result [object Object]","timestamp":"2024-11-06T20:24:11.091Z"}
{"level":"info","message":"updateState successful!","timestamp":"2024-11-06T20:24:11.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:12.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:15.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:17.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:22.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:27.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:32.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:37.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:42.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:47.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:52.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:24:57.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:02.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:07.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:15.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:17.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:22.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:27.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:32.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:37.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:42.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:47.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:52.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:25:57.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:02.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:07.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:12.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:15.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:17.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:22.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:27.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:32.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:37.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:42.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:47.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:52.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:26:57.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:02.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:07.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:12.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:15.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:17.239Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:22.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:27.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:32.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:37.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:42.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:47.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:52.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:27:57.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:02.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:07.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:12.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:15.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:17.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:22.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:27.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:49.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:51.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:28:58.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:03.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:08.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:13.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:16.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:41.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:44.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:45.882Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"54b680a0-6410-49fd-9415-a7dcc20cd089\",\"job_id\":\"932b747a-ef67-47f8-a27b-a491d5a0e4b4\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:29:46.024Z\",\"updated_at\":\"2024-11-06T20:29:46.024Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:29:46.076Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:29:46.109Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:29:46.133Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d0bab37d-69ad-4e3f-8c8b-f1232fb46602\",\"job_id\":\"cc5028e0-20f2-4fb1-966f-de70dcc5355a\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:29:46.468Z\",\"updated_at\":\"2024-11-06T20:29:46.468Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:29:46.487Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:29:46.530Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:29:46.539Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:29:46.024Z","error":null,"id":"54b680a0-6410-49fd-9415-a7dcc20cd089","job_id":"932b747a-ef67-47f8-a27b-a491d5a0e4b4","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:29:47.149Z","type":"REALTIME","updated_at":"2024-11-06T20:29:46.024Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 40 54b680a0-6410-49fd-9415-a7dcc20cd089 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:29:47.163Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:29:46.468Z","error":null,"id":"d0bab37d-69ad-4e3f-8c8b-f1232fb46602","job_id":"cc5028e0-20f2-4fb1-966f-de70dcc5355a","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:29:47.542Z","type":"REALTIME","updated_at":"2024-11-06T20:29:46.468Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 41 d0bab37d-69ad-4e3f-8c8b-f1232fb46602 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:29:47.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:49.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:49.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:53.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:29:58.267Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:03.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:08.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:16.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:23.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:28.193Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:33.219Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:38.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:43.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:48.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:53.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:30:58.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:03.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:08.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:13.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:16.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:23.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:28.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:33.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:38.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:43.247Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:48.230Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:53.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:31:58.573Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"efdc02c7-1818-465a-a61a-d1573a9f16d3\",\"job_id\":\"f3505fdf-70fa-492c-9f00-2cbce0b6b875\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:32:00.909Z\",\"updated_at\":\"2024-11-06T20:32:00.909Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:32:00.947Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:32:00.963Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:32:00.968Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:32:00.909Z","error":null,"id":"efdc02c7-1818-465a-a61a-d1573a9f16d3","job_id":"f3505fdf-70fa-492c-9f00-2cbce0b6b875","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:32:01.970Z","type":"REALTIME","updated_at":"2024-11-06T20:32:00.909Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 42 efdc02c7-1818-465a-a61a-d1573a9f16d3 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:32:01.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:03.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:03.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:08.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:21.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:22.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:27.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:38.749Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:40.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:40.490Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"70f81ef3-c77e-4f78-81b9-ff1f1e39f02e\",\"job_id\":\"bae3fed9-f6a2-4c9a-998a-4a6578cae7c6\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:32:40.555Z\",\"updated_at\":\"2024-11-06T20:32:40.555Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:32:40.603Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:32:40.624Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:32:40.631Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:32:40.555Z","error":null,"id":"70f81ef3-c77e-4f78-81b9-ff1f1e39f02e","job_id":"bae3fed9-f6a2-4c9a-998a-4a6578cae7c6","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:32:41.633Z","type":"REALTIME","updated_at":"2024-11-06T20:32:40.555Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 43 70f81ef3-c77e-4f78-81b9-ff1f1e39f02e on queue tasks with result [object Object]","timestamp":"2024-11-06T20:32:41.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:42.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:47.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:52.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:32:57.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:02.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:07.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:12.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:15.534Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:17.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:22.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:27.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:32.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:37.509Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"bb948660-465d-482a-9ebd-11b1a04d545f\",\"job_id\":\"c7eecd07-0996-4b53-bd70-9810a832277a\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:33:37.670Z\",\"updated_at\":\"2024-11-06T20:33:37.670Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:33:37.716Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:33:37.738Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:33:37.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:38.638Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:33:37.670Z","error":null,"id":"bb948660-465d-482a-9ebd-11b1a04d545f","job_id":"c7eecd07-0996-4b53-bd70-9810a832277a","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:33:38.749Z","type":"REALTIME","updated_at":"2024-11-06T20:33:37.670Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 44 bb948660-465d-482a-9ebd-11b1a04d545f on queue tasks with result [object Object]","timestamp":"2024-11-06T20:33:38.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:42.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:47.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:52.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:33:57.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:02.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:07.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:12.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:15.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:17.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:22.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:27.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:33.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:37.280Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"a5ad32ee-bcf9-48d8-9739-f8f10e5640f6\",\"job_id\":\"83f841c3-c635-4246-95d0-9097cdffaf94\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:34:41.169Z\",\"updated_at\":\"2024-11-06T20:34:41.169Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:34:41.199Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:34:41.206Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:34:41.210Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:34:41.169Z","error":null,"id":"a5ad32ee-bcf9-48d8-9739-f8f10e5640f6","job_id":"83f841c3-c635-4246-95d0-9097cdffaf94","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:34:42.212Z","type":"REALTIME","updated_at":"2024-11-06T20:34:41.169Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 45 a5ad32ee-bcf9-48d8-9739-f8f10e5640f6 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:34:42.215Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:42.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:42.699Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:47.204Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:52.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:34:57.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:02.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:07.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:12.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:15.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:17.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:22.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:27.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:32.120Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:35:34.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:34.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:36.734Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:35:36.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:37.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:44.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:45.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:47.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:52.157Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"98ed7476-d2cd-4c87-892a-cd4aad7d3da6\",\"job_id\":\"7ec2eecc-6286-49ea-8ac0-52cf20d93300\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:35:55.076Z\",\"updated_at\":\"2024-11-06T20:35:55.076Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:35:55.117Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:35:55.129Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:35:55.139Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:35:55.149Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:35:55.158Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:35:55.165Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:35:55.174Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:35:55.180Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:35:55.192Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:35:55.198Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:35:55.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:56.122Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:35:55.076Z","error":null,"id":"98ed7476-d2cd-4c87-892a-cd4aad7d3da6","job_id":"7ec2eecc-6286-49ea-8ac0-52cf20d93300","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:35:56.184Z","type":"REALTIME","updated_at":"2024-11-06T20:35:55.076Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:35:56.188Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:35:56.189Z"}
{"level":"info","message":"Completed job 46 98ed7476-d2cd-4c87-892a-cd4aad7d3da6 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:35:56.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:35:57.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:02.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:07.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:15.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:17.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:22.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:36.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:38.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:41.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:42.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:47.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:52.158Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:36:52.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:36:57.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:02.142Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"f28a9871-903b-4411-9478-ebc3c28f9d3b\",\"job_id\":\"1a05e864-cdcd-4295-a65f-687bdddac853\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:37:07.125Z\",\"updated_at\":\"2024-11-06T20:37:07.125Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:37:07.149Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:37:07.155Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:37:07.158Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:37:07.164Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:37:07.170Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:37:07.174Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:37:07.179Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:37:07.186Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:07.188Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:37:07.193Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:07.212Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:07.214Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:07.216Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:07.221Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:07.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:08.149Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:37:07.125Z","error":null,"id":"f28a9871-903b-4411-9478-ebc3c28f9d3b","job_id":"1a05e864-cdcd-4295-a65f-687bdddac853","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:37:08.195Z","type":"REALTIME","updated_at":"2024-11-06T20:37:07.125Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"47","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:37:07.125Z","error":null,"id":"f28a9871-903b-4411-9478-ebc3c28f9d3b","job_id":"1a05e864-cdcd-4295-a65f-687bdddac853","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:37:07.125Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:37:08.199Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:37:08.203Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:37:08.205Z"}
{"level":"info","message":"Completed job 47 f28a9871-903b-4411-9478-ebc3c28f9d3b on queue tasks with result [object Object]","timestamp":"2024-11-06T20:37:08.206Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:37:08.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:08.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:12.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:15.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:17.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:22.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:27.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:32.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:37.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:42.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:53.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:54.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:56.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:37:58.002Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:02.181Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:38:02.806Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:38:04.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:07.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:12.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:14.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:15.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:17.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:22.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:23.471Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"bdfd0f24-3dfd-4592-b972-f5eabf6d7212\",\"job_id\":\"c8a93f99-c689-427d-90e0-91e3dd9af40e\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:38:23.464Z\",\"updated_at\":\"2024-11-06T20:38:23.464Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:38:23.496Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:38:23.508Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:38:23.512Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:38:23.517Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:38:23.521Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:38:23.533Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:38:23.549Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:38:23.557Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:38:23.563Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:38:23.587Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:38:23.540Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:38:23.573Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.590Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:38:23.598Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.625Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.634Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.637Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.652Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.641Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.639Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.656Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.660Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:23.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:24.483Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:38:23.464Z","error":null,"id":"bdfd0f24-3dfd-4592-b972-f5eabf6d7212","job_id":"c8a93f99-c689-427d-90e0-91e3dd9af40e","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:38:24.613Z","type":"REALTIME","updated_at":"2024-11-06T20:38:23.464Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"48","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:38:23.464Z","error":null,"id":"bdfd0f24-3dfd-4592-b972-f5eabf6d7212","job_id":"c8a93f99-c689-427d-90e0-91e3dd9af40e","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:38:23.464Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:38:24.616Z"}
{"jobId":"48","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:38:23.464Z","error":null,"id":"bdfd0f24-3dfd-4592-b972-f5eabf6d7212","job_id":"c8a93f99-c689-427d-90e0-91e3dd9af40e","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:38:23.464Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:38:24.618Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:38:24.621Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:38:24.622Z"}
{"level":"info","message":"Completed job 48 bdfd0f24-3dfd-4592-b972-f5eabf6d7212 on queue tasks with result [object Object]","timestamp":"2024-11-06T20:38:24.626Z"}
{"jobId":"48","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:38:23.464Z","error":null,"id":"bdfd0f24-3dfd-4592-b972-f5eabf6d7212","job_id":"c8a93f99-c689-427d-90e0-91e3dd9af40e","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","type":"REALTIME","updated_at":"2024-11-06T20:38:23.464Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"},"timestamp":"2024-11-06T20:38:24.623Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:24.630Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:24.633Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:38:24.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:27.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:32.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:37.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:42.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:47.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:52.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:38:57.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:02.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:07.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:12.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:15.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:17.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:22.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:27.196Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:32.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:37.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:42.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:47.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:52.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:39:57.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:02.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:07.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:17.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:22.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:27.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:32.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:36.725Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:37.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:42.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:47.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:52.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:40:57.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:16.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:17.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:22.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:27.141Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:41:31.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:32.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:36.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:37.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:42.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:47.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:51.192Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"781acffe-050e-4d14-9c48-f3792a8f941f\",\"job_id\":\"81c3254f-b365-4743-9ecf-287f42c6da85\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:41:51.186Z\",\"updated_at\":\"2024-11-06T20:41:51.186Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:41:51.225Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:41:51.232Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:41:51.240Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:41:51.244Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:41:51.249Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:41:51.252Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:41:51.236Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:41:51.265Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:41:51.269Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:41:51.275Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:41:51.283Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:41:51.290Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:41:51.259Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:41:51.262Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.295Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:41:51.309Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.322Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.338Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.346Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.393Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.421Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.502Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.505Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.506Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.507Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.510Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:51.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:52.191Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:41:51.186Z","error":null,"id":"781acffe-050e-4d14-9c48-f3792a8f941f","job_id":"81c3254f-b365-4743-9ecf-287f42c6da85","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:41:52.313Z","type":"REALTIME","updated_at":"2024-11-06T20:41:51.186Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:41:52.320Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:41:52.322Z"}
{"jobId":"49","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"781acffe-050e-4d14-9c48-f3792a8f941f\",\"job_id\":\"81c3254f-b365-4743-9ecf-287f42c6da85\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:41:51.186Z\",\"updated_at\":\"2024-11-06T20:41:51.186Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:41:52.323Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:41:52.326Z"}
{"jobId":"49","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"781acffe-050e-4d14-9c48-f3792a8f941f\",\"job_id\":\"81c3254f-b365-4743-9ecf-287f42c6da85\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:41:51.186Z\",\"updated_at\":\"2024-11-06T20:41:51.186Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:41:52.328Z"}
{"level":"info","message":"Completed job 49 781acffe-050e-4d14-9c48-f3792a8f941f on queue tasks with result {\"id\":\"781acffe-050e-4d14-9c48-f3792a8f941f\",\"job_id\":\"81c3254f-b365-4743-9ecf-287f42c6da85\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:41:51.186Z\",\"updated_at\":\"2024-11-06T20:41:51.186Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:41:52.336Z"}
{"jobId":"49","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"781acffe-050e-4d14-9c48-f3792a8f941f\",\"job_id\":\"81c3254f-b365-4743-9ecf-287f42c6da85\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:41:51.186Z\",\"updated_at\":\"2024-11-06T20:41:51.186Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:41:52.331Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:52.343Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:52.344Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:41:52.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:52.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:41:57.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:02.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:07.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:12.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:15.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:17.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:22.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:27.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:32.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:37.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:42.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:47.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:50.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:42:55.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:00.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:05.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:10.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:15.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:20.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:25.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:30.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:35.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:40.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:45.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:50.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:43:55.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:00.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:05.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:09.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:10.716Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:15.250Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:20.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:25.321Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:44:28.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:30.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:31.478Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:44:32.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:35.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:36.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:40.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:45.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:50.276Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:44:53.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:53.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:55.743Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:44:58.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:44:58.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:00.386Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:45:04.699Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:05.526Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:45:06.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:10.445Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:15.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:19.416Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:19.442Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.453Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.456Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.480Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.485Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.495Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.520Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.532Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.537Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.555Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.460Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.463Z"}
{"level":"verbose","message":"queueEvents event on waiting with jobId: ","timestamp":"2024-11-06T20:45:19.491Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.568Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.592Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.603Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.606Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.614Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.619Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.621Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:45:19.627Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.578Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.582Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.587Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.597Z"}
{"level":"verbose","message":"queueEvents event on active with jobId: ","timestamp":"2024-11-06T20:45:19.600Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.631Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:45:19.671Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.692Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.694Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.696Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.698Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.701Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.704Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.709Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.711Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.716Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.717Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.720Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.723Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.726Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.729Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.713Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.736Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.739Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.738Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.746Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.744Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.764Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.766Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:19.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:20.519Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:45:19.410Z","error":null,"id":"6f4e8f7f-71d3-4947-95aa-efe48a3bd067","job_id":"26657f71-02fa-403b-9b90-d9c7f01ef44b","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:45:20.676Z","type":"REALTIME","updated_at":"2024-11-06T20:45:19.410Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:45:20.679Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.680Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:45:20.682Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.683Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:45:20.686Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.691Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:45:20.700Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.701Z"}
{"level":"error","message":"Failed to updateState with folowing error::  Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)","stack":"SyntaxError: Unexpected non-whitespace character after JSON at position 13 (line 1 column 14)\n    at JSON.parse (<anonymous>)\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:23:33)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:45:20.711Z"}
{"level":"info","message":"Completed job 50 6f4e8f7f-71d3-4947-95aa-efe48a3bd067 on queue tasks with result {\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.712Z"}
{"level":"error","message":"Failed to updateState with folowing error::  id is not defined","stack":"ReferenceError: id is not defined\n    at QueueEvents.eval (webpack-internal:///(rsc)/./lib/features/task-manager/persistent.ts:26:46)\n    at QueueEvents.emit (node:events:520:28)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-base.js:94:26)\n    at QueueEvents.emit (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:35:22)\n    at QueueEvents.consumeEvents (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:107:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async QueueEvents.run (webpack-internal:///(rsc)/./node_modules/bullmq/dist/esm/classes/queue-events.js:67:17)","timestamp":"2024-11-06T20:45:20.681Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.696Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.704Z"}
{"jobId":"50","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"{\"id\":\"6f4e8f7f-71d3-4947-95aa-efe48a3bd067\",\"job_id\":\"26657f71-02fa-403b-9b90-d9c7f01ef44b\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:45:19.410Z\",\"updated_at\":\"2024-11-06T20:45:19.410Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:45:20.707Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:20.725Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:20.727Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:20.730Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:20.729Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:20.731Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:45:20.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:20.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:25.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:30.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:35.219Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:40.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:45.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:50.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:45:55.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:00.242Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:05.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:10.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:15.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:21.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:25.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:30.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:35.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:39.699Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:40.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:46:45.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:05.461Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:47:05.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:06.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:07.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:08.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:13.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:14.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:15.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:18.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:23.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:28.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:33.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:35.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:42.445Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:43.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:43.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:48.406Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d4c4ecf4-60ff-4c8b-a16c-7bc62434c375\",\"job_id\":\"1b99c8c8-ea9f-49a2-81b7-3b88fbcc1538\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:47:51.815Z\",\"updated_at\":\"2024-11-06T20:47:51.815Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:47:51.846Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:47:51.860Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:47:51.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:52.714Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:47:51.815Z","error":null,"id":"d4c4ecf4-60ff-4c8b-a16c-7bc62434c375","job_id":"1b99c8c8-ea9f-49a2-81b7-3b88fbcc1538","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello"},"result":null,"status":"active","timestamp":"2024-11-06T20:47:52.868Z","type":"REALTIME","updated_at":"2024-11-06T20:47:51.815Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"51","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"d4c4ecf4-60ff-4c8b-a16c-7bc62434c375","timestamp":"2024-11-06T20:47:52.874Z"}
{"level":"info","message":"Completed job 51 d4c4ecf4-60ff-4c8b-a16c-7bc62434c375 on queue tasks with result d4c4ecf4-60ff-4c8b-a16c-7bc62434c375","timestamp":"2024-11-06T20:47:52.886Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:47:52.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:53.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:47:58.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:03.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:08.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:12.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:13.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:15.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:18.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:23.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:28.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:33.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:38.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:43.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:48.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:53.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:48:58.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:03.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:08.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:15.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:18.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:23.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:28.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:33.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:38.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:43.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:48.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:53.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:49:58.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:03.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:08.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:13.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:15.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:18.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:23.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:28.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:33.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:38.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:43.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:48.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:53.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:50:58.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:06.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:08.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:09.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:12.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:13.591Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:51:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:15.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:17.834Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:51:18.677Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:18.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:22.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:23.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:28.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:32.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:33.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:38.343Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"0119677d-33bf-415c-9438-9acc06de48d4\",\"job_id\":\"4f692788-0d90-4687-a6f3-85cf44d3b632\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:51:40.854Z\",\"updated_at\":\"2024-11-06T20:51:40.854Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:51:40.886Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:51:40.905Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:51:40.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:41.754Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:51:40.854Z","error":null,"id":"0119677d-33bf-415c-9438-9acc06de48d4","job_id":"4f692788-0d90-4687-a6f3-85cf44d3b632","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fffff"},"result":null,"status":"active","timestamp":"2024-11-06T20:51:41.911Z","type":"REALTIME","updated_at":"2024-11-06T20:51:40.854Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"52","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"0119677d-33bf-415c-9438-9acc06de48d4","timestamp":"2024-11-06T20:51:41.914Z"}
{"jobId":"52","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"0119677d-33bf-415c-9438-9acc06de48d4","timestamp":"2024-11-06T20:51:41.922Z"}
{"jobId":"52","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"0119677d-33bf-415c-9438-9acc06de48d4","timestamp":"2024-11-06T20:51:41.928Z"}
{"level":"info","message":"Completed job 52 0119677d-33bf-415c-9438-9acc06de48d4 on queue tasks with result 0119677d-33bf-415c-9438-9acc06de48d4","timestamp":"2024-11-06T20:51:41.932Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:51:41.947Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:51:41.970Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:51:41.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:43.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:48.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:53.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:51:58.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:03.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:08.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:13.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:15.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:18.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:23.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:28.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:33.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:38.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:43.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:48.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:53.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:52:58.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:03.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:08.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:16.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:19.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:20.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:23.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:27.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:28.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:33.389Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:53:36.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:38.665Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:53:41.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:41.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:44.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:45.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:48.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:49.310Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"3c8edad8-736f-40db-b565-fe2fd4fc040b\",\"job_id\":\"81152223-f441-48e2-ab16-c07ea9e81d71\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"gg\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:53:49.927Z\",\"updated_at\":\"2024-11-06T20:53:49.927Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:53:49.965Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:53:49.982Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:53:49.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:50.857Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:53:49.927Z","error":null,"id":"3c8edad8-736f-40db-b565-fe2fd4fc040b","job_id":"81152223-f441-48e2-ab16-c07ea9e81d71","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"gg"},"result":null,"status":"active","timestamp":"2024-11-06T20:53:50.990Z","type":"REALTIME","updated_at":"2024-11-06T20:53:49.927Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"53","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"3c8edad8-736f-40db-b565-fe2fd4fc040b","timestamp":"2024-11-06T20:53:50.994Z"}
{"jobId":"53","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"3c8edad8-736f-40db-b565-fe2fd4fc040b","timestamp":"2024-11-06T20:53:50.997Z"}
{"jobId":"53","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"3c8edad8-736f-40db-b565-fe2fd4fc040b","timestamp":"2024-11-06T20:53:51.004Z"}
{"jobId":"53","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"3c8edad8-736f-40db-b565-fe2fd4fc040b","timestamp":"2024-11-06T20:53:51.011Z"}
{"jobId":"53","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"3c8edad8-736f-40db-b565-fe2fd4fc040b","timestamp":"2024-11-06T20:53:51.019Z"}
{"level":"info","message":"Completed job 53 3c8edad8-736f-40db-b565-fe2fd4fc040b on queue tasks with result 3c8edad8-736f-40db-b565-fe2fd4fc040b","timestamp":"2024-11-06T20:53:51.022Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:53:51.028Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:53:51.064Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:53:51.066Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:53:51.068Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:53:51.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:53.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:53:58.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:03.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:08.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:15.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:18.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:22.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:23.711Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:28.043Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:29.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:31.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:34.010Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:41.023Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:42.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:42.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:43.845Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:54:45.150Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:54:45.232Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:54:47.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:48.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:53.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:55.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:54:58.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:03.361Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"edd37f60-62c0-4a23-848b-2ba17c8e5ba7\",\"job_id\":\"21e2858c-36c6-4533-847e-256df6c5b04c\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"dddddd\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:55:05.801Z\",\"updated_at\":\"2024-11-06T20:55:05.801Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:55:05.840Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:55:05.854Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:55:05.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:06.761Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:55:05.801Z","error":null,"id":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","job_id":"21e2858c-36c6-4533-847e-256df6c5b04c","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"dddddd"},"result":null,"status":"active","timestamp":"2024-11-06T20:55:06.860Z","type":"REALTIME","updated_at":"2024-11-06T20:55:05.801Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.864Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.867Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.870Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.874Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.877Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.881Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.884Z"}
{"jobId":"54","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.887Z"}
{"level":"info","message":"Completed job 54 edd37f60-62c0-4a23-848b-2ba17c8e5ba7 on queue tasks with result edd37f60-62c0-4a23-848b-2ba17c8e5ba7","timestamp":"2024-11-06T20:55:06.897Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.904Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.925Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.960Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.962Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.965Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.973Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.976Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:55:06.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:08.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:13.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:15.542Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:18.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:23.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:28.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:33.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:38.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:43.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:48.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:53.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:55:58.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:03.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:19.353Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:56:19.916Z"}
{"level":"info","message":"Task Persistcy Initialized Successfully.","timestamp":"2024-11-06T20:56:20.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:20.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:22.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:23.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:30.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:31.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:31.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:33.854Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"79040eef-b021-42da-89b6-5ac8349e95e1\",\"job_id\":\"513dafb5-70bc-45d2-9a5e-d40f56619ffd\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T20:56:35.173Z\",\"updated_at\":\"2024-11-06T20:56:35.173Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T20:56:35.205Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T20:56:35.221Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T20:56:35.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:36.188Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T20:56:35.173Z","error":null,"id":"79040eef-b021-42da-89b6-5ac8349e95e1","job_id":"513dafb5-70bc-45d2-9a5e-d40f56619ffd","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fff"},"result":null,"status":"active","timestamp":"2024-11-06T20:56:36.228Z","type":"REALTIME","updated_at":"2024-11-06T20:56:35.173Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"jobId":"55","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"79040eef-b021-42da-89b6-5ac8349e95e1","timestamp":"2024-11-06T20:56:36.232Z"}
{"level":"info","message":"Completed job 55 79040eef-b021-42da-89b6-5ac8349e95e1 on queue tasks with result 79040eef-b021-42da-89b6-5ac8349e95e1","timestamp":"2024-11-06T20:56:36.243Z"}
{"jobId":"55","level":"verbose","message":"queueEvents event on completed with args: ","returnvalue":"79040eef-b021-42da-89b6-5ac8349e95e1","timestamp":"2024-11-06T20:56:36.239Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:56:36.266Z"}
{"level":"verbose","message":"updateState successful! Result: ","timestamp":"2024-11-06T20:56:36.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:38.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:43.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:48.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:53.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:56:58.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:03.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:08.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:13.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:15.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:18.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:23.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:28.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:33.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:38.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:43.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:48.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:53.281Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:57:58.275Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:03.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:08.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:13.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:15.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:18.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:23.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:28.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:33.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:38.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:43.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:48.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:53.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:58:58.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:03.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:08.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:13.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:18.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:23.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:28.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:33.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:38.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:43.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:48.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:53.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T20:59:58.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:03.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:08.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:13.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:15.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:18.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:23.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:28.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:33.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:38.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:43.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:48.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:53.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:00:58.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:03.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:08.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:13.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:15.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:18.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:23.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:28.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:33.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:38.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:43.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:48.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:53.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:01:58.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:03.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:08.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:15.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:18.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:23.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:28.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:33.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:38.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:43.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:48.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:53.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:02:58.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:03.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:08.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:15.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:18.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:23.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:28.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:33.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:38.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:43.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:48.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:53.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:03:58.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:03.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:08.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:13.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:15.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:18.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:23.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:28.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:33.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:38.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:43.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:48.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:53.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:04:58.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:03.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:08.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:15.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:18.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:23.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:28.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:33.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:38.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:43.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:48.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:53.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:05:59.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:00.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:03.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:08.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:13.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:15.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:18.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:23.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:28.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:33.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:38.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:43.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:48.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:53.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:06:58.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:03.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:08.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:13.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:15.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:18.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:23.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:28.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:33.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:38.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:43.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:48.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:53.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:07:58.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:03.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:08.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:15.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:18.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:23.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:28.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:33.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:38.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:43.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:48.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:53.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:08:58.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:03.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:08.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:15.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:18.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:23.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:28.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:33.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:38.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:43.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:48.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:53.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:09:58.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:03.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:08.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:15.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:18.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:23.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:28.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:33.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:38.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:43.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:48.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:53.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:10:58.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:03.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:08.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:13.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:15.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:18.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:23.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:28.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:33.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:38.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:43.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:48.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:53.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:11:58.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:03.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:08.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:13.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:18.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:23.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:28.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:33.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:38.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:43.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:48.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:53.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:12:58.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:03.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:08.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:13.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:15.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:18.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:23.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:13:28.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:31.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:32.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:35.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:38.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:49.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:50.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:50.924Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d2033372-b07d-4225-88d5-bc5c1907bed0\",\"job_id\":\"57059507-04c2-4b45-b075-70aa1d66180d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:44:50.993Z\",\"updated_at\":\"2024-11-06T21:44:50.993Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:44:51.043Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:44:51.063Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:44:51.068Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:44:50.993Z","error":null,"id":"d2033372-b07d-4225-88d5-bc5c1907bed0","job_id":"57059507-04c2-4b45-b075-70aa1d66180d","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fff"},"result":null,"status":"active","timestamp":"2024-11-06T21:44:52.072Z","type":"REALTIME","updated_at":"2024-11-06T21:44:50.993Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 56 d2033372-b07d-4225-88d5-bc5c1907bed0 on queue tasks with result d2033372-b07d-4225-88d5-bc5c1907bed0","timestamp":"2024-11-06T21:44:52.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:53.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:44:58.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:03.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:08.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:13.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:15.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:18.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:23.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:28.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:33.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:38.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:43.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:48.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:53.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:45:58.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:03.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:08.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:15.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:18.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:23.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:28.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:33.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:38.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:43.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:48.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:53.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:46:58.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:03.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:08.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:18.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:23.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:28.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:33.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:38.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:43.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:48.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:53.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:47:58.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:03.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:08.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:13.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:15.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:18.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:23.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:28.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:33.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:38.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:43.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:48.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:53.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:48:58.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:03.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:08.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:13.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:18.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:23.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:28.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:33.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:38.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:43.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:48.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:53.313Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"b5a9e4fb-3db9-44d5-891a-2d7148ba2745\",\"job_id\":\"fcb58112-0d91-46dd-a911-c40f31385640\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:49:54.719Z\",\"updated_at\":\"2024-11-06T21:49:54.719Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:49:54.751Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:49:54.761Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:49:54.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:55.564Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:49:54.719Z","error":null,"id":"b5a9e4fb-3db9-44d5-891a-2d7148ba2745","job_id":"fcb58112-0d91-46dd-a911-c40f31385640","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fff"},"result":null,"status":"active","timestamp":"2024-11-06T21:49:55.766Z","type":"REALTIME","updated_at":"2024-11-06T21:49:54.719Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 57 b5a9e4fb-3db9-44d5-891a-2d7148ba2745 on queue tasks with result b5a9e4fb-3db9-44d5-891a-2d7148ba2745","timestamp":"2024-11-06T21:49:55.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:49:58.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:03.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:08.306Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"eb92c0cb-7409-4246-a40d-280a00cf9dfc\",\"job_id\":\"1a363f2b-b070-47e5-9ac2-cfb97b69d7ad\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:50:09.192Z\",\"updated_at\":\"2024-11-06T21:50:09.192Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:50:09.201Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:50:09.210Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:50:09.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:10.154Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:50:09.192Z","error":null,"id":"eb92c0cb-7409-4246-a40d-280a00cf9dfc","job_id":"1a363f2b-b070-47e5-9ac2-cfb97b69d7ad","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fff"},"result":null,"status":"active","timestamp":"2024-11-06T21:50:10.212Z","type":"REALTIME","updated_at":"2024-11-06T21:50:09.192Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 58 eb92c0cb-7409-4246-a40d-280a00cf9dfc on queue tasks with result eb92c0cb-7409-4246-a40d-280a00cf9dfc","timestamp":"2024-11-06T21:50:10.214Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:15.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:18.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:23.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:28.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:33.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:37.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:39.001Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:42.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:44.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:46.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:48.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:51.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:54.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:55.633Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c85ac29f-930b-499c-b143-4d35c9347d8e\",\"job_id\":\"eeec8b46-698e-4bef-bddd-8cfcadc99c67\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"dfffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:50:57.236Z\",\"updated_at\":\"2024-11-06T21:50:57.236Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:50:57.258Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:50:57.270Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:50:57.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:58.234Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:50:57.236Z","error":null,"id":"c85ac29f-930b-499c-b143-4d35c9347d8e","job_id":"eeec8b46-698e-4bef-bddd-8cfcadc99c67","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"dfffff"},"result":null,"status":"active","timestamp":"2024-11-06T21:50:58.277Z","type":"REALTIME","updated_at":"2024-11-06T21:50:57.236Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 59 c85ac29f-930b-499c-b143-4d35c9347d8e on queue tasks with result c85ac29f-930b-499c-b143-4d35c9347d8e","timestamp":"2024-11-06T21:50:58.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:50:58.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:03.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:08.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:15.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:18.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:23.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:28.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:33.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:38.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:43.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:48.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:53.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:51:58.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:03.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:08.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:15.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:18.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:23.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:28.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:33.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:38.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:43.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:48.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:53.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:52:58.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:03.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:08.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:13.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:18.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:23.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:28.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:33.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:38.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:43.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:48.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:53.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:53:58.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:03.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:08.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:13.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:15.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:18.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:23.402Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"34b9c6f3-643a-41e9-9292-c5c341ac82ba\",\"job_id\":\"7d52fe03-a1f8-4a5c-ba33-0ac2388bef06\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"dfffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:54:24.559Z\",\"updated_at\":\"2024-11-06T21:54:24.559Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:54:24.597Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:54:24.610Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:54:24.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:25.488Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:54:24.559Z","error":null,"id":"34b9c6f3-643a-41e9-9292-c5c341ac82ba","job_id":"7d52fe03-a1f8-4a5c-ba33-0ac2388bef06","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"dfffff"},"result":null,"status":"active","timestamp":"2024-11-06T21:54:25.620Z","type":"REALTIME","updated_at":"2024-11-06T21:54:24.559Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 60 34b9c6f3-643a-41e9-9292-c5c341ac82ba on queue tasks with result 34b9c6f3-643a-41e9-9292-c5c341ac82ba","timestamp":"2024-11-06T21:54:25.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:28.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:33.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:38.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:43.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:48.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:53.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:54:58.609Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c050fd07-9d05-40c4-991b-ee5166ebb6ee\",\"job_id\":\"f2eec6f2-0dae-4e47-be7d-a7a31162e4f2\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"dfffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:55:02.628Z\",\"updated_at\":\"2024-11-06T21:55:02.628Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:55:02.664Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:55:02.676Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:55:02.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:03.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:03.642Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:55:02.628Z","error":null,"id":"c050fd07-9d05-40c4-991b-ee5166ebb6ee","job_id":"f2eec6f2-0dae-4e47-be7d-a7a31162e4f2","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"dfffff"},"result":null,"status":"active","timestamp":"2024-11-06T21:55:03.680Z","type":"REALTIME","updated_at":"2024-11-06T21:55:02.628Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 61 c050fd07-9d05-40c4-991b-ee5166ebb6ee on queue tasks with result c050fd07-9d05-40c4-991b-ee5166ebb6ee","timestamp":"2024-11-06T21:55:03.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:08.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:13.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:15.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:18.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:23.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:28.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:33.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:38.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:43.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:48.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:53.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:55:58.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:03.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:08.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:15.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:18.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:23.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:28.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:33.495Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"5f63c7bb-b5d9-46eb-87f2-d0ccdda32c6d\",\"job_id\":\"28ee9647-62b0-4f8d-bb1f-10acc13e7305\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"dfffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T21:56:34.778Z\",\"updated_at\":\"2024-11-06T21:56:34.778Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T21:56:34.811Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T21:56:34.825Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T21:56:34.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:35.653Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T21:56:34.778Z","error":null,"id":"5f63c7bb-b5d9-46eb-87f2-d0ccdda32c6d","job_id":"28ee9647-62b0-4f8d-bb1f-10acc13e7305","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"dfffff"},"result":null,"status":"active","timestamp":"2024-11-06T21:56:35.829Z","type":"REALTIME","updated_at":"2024-11-06T21:56:34.778Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 62 5f63c7bb-b5d9-46eb-87f2-d0ccdda32c6d on queue tasks with result 5f63c7bb-b5d9-46eb-87f2-d0ccdda32c6d","timestamp":"2024-11-06T21:56:35.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:38.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:43.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:47.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:49.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:53.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:56:58.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:03.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:08.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:13.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:15.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:18.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:23.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:28.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:33.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:38.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:43.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:49.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:53.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:57:58.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:03.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:08.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:13.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:18.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:23.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:28.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:33.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:38.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:43.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:48.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:53.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:58:58.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:03.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:08.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:13.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:18.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:23.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:28.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:33.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:38.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:43.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:48.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:53.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T21:59:58.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:04.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:08.738Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:13.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:15.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:18.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:23.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:28.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:31.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:33.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:36.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:38.653Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"2a5bb122-83ed-4f4c-95f4-39bd000553e9\",\"job_id\":\"b513b212-8c63-4b48-bf74-911e1a16ca6f\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:00:40.381Z\",\"updated_at\":\"2024-11-06T22:00:40.381Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:00:40.395Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:00:40.408Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:00:40.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:41.351Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:00:40.381Z","error":null,"id":"2a5bb122-83ed-4f4c-95f4-39bd000553e9","job_id":"b513b212-8c63-4b48-bf74-911e1a16ca6f","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T22:00:41.416Z","type":"REALTIME","updated_at":"2024-11-06T22:00:40.381Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 63 2a5bb122-83ed-4f4c-95f4-39bd000553e9 on queue tasks with result 2a5bb122-83ed-4f4c-95f4-39bd000553e9","timestamp":"2024-11-06T22:00:41.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:43.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:48.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:53.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:00:58.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:03.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:08.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:13.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:15.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:18.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:23.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:28.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:33.600Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"7693708b-a24c-435c-a08a-eeca633207f2\",\"job_id\":\"c9dc63f4-c384-4a55-b713-9ab0d2c9cabd\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:01:34.702Z\",\"updated_at\":\"2024-11-06T22:01:34.702Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:01:34.738Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:01:34.750Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:01:34.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:35.641Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:01:34.702Z","error":null,"id":"7693708b-a24c-435c-a08a-eeca633207f2","job_id":"c9dc63f4-c384-4a55-b713-9ab0d2c9cabd","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ffff"},"result":null,"status":"active","timestamp":"2024-11-06T22:01:35.756Z","type":"REALTIME","updated_at":"2024-11-06T22:01:34.702Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 64 7693708b-a24c-435c-a08a-eeca633207f2 on queue tasks with result 7693708b-a24c-435c-a08a-eeca633207f2","timestamp":"2024-11-06T22:01:35.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:38.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:43.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:48.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:53.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:01:58.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:03.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:08.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:13.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:15.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:18.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:23.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:28.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:33.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:38.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:43.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:48.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:53.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:02:58.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:03.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:08.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:13.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:15.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:18.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:23.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:28.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:33.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:38.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:43.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:48.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:53.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:03:58.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:03.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:08.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:13.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:15.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:18.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:23.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:28.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:33.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:38.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:43.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:48.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:53.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:04:58.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:03.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:08.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:13.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:18.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:23.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:28.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:33.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:38.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:43.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:48.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:53.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:05:58.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:03.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:08.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:13.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:15.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:18.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:23.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:28.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:33.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:38.730Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:43.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:48.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:53.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:06:58.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:03.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:08.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:13.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:15.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:18.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:23.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:28.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:33.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:38.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:43.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:48.739Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:53.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:07:58.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:03.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:08.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:13.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:15.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:18.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:23.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:28.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:33.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:38.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:43.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:48.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:53.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:08:58.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:09:03.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:09:08.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:09:13.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:09:15.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:14.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:16.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:16.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:18.698Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"fe8a8dad-9311-4b30-a16b-814644f7ff21\",\"job_id\":\"b7fb2263-eda3-4b8a-a0fb-a72f092d8c48\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:11:20.829Z\",\"updated_at\":\"2024-11-06T22:11:20.829Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:11:20.843Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:11:20.860Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:11:20.863Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:11:20.829Z","error":null,"id":"fe8a8dad-9311-4b30-a16b-814644f7ff21","job_id":"b7fb2263-eda3-4b8a-a0fb-a72f092d8c48","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fffff"},"result":null,"status":"active","timestamp":"2024-11-06T22:11:21.864Z","type":"REALTIME","updated_at":"2024-11-06T22:11:20.829Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:21.861Z"}
{"level":"info","message":"Completed job fe8a8dad-9311-4b30-a16b-814644f7ff21 fe8a8dad-9311-4b30-a16b-814644f7ff21 on queue tasks with result fe8a8dad-9311-4b30-a16b-814644f7ff21","timestamp":"2024-11-06T22:11:21.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:23.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:28.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:33.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:38.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:43.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:48.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:53.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:11:58.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:03.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:08.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:13.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:15.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:18.746Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:23.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:28.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:33.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:38.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:43.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:48.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:53.688Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"ab87477c-49fa-44e4-bb2c-7655f06e3043\",\"job_id\":\"174010e7-b9a8-4a99-9ac5-427e9ed43b5d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:12:57.296Z\",\"updated_at\":\"2024-11-06T22:12:57.296Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:12:57.329Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:12:57.349Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:12:57.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:58.218Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:12:57.296Z","error":null,"id":"ab87477c-49fa-44e4-bb2c-7655f06e3043","job_id":"174010e7-b9a8-4a99-9ac5-427e9ed43b5d","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fffff"},"result":null,"status":"active","timestamp":"2024-11-06T22:12:58.353Z","type":"REALTIME","updated_at":"2024-11-06T22:12:57.296Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job ab87477c-49fa-44e4-bb2c-7655f06e3043 ab87477c-49fa-44e4-bb2c-7655f06e3043 on queue tasks with result ab87477c-49fa-44e4-bb2c-7655f06e3043","timestamp":"2024-11-06T22:12:58.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:12:58.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:03.689Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:08.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:13.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:15.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:18.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:24.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:28.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:33.791Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"9ec0111c-6d41-47a4-b020-abc2f6877539\",\"job_id\":\"494d7928-bb38-4216-88c0-51915df7db34\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:13:34.214Z\",\"updated_at\":\"2024-11-06T22:13:34.214Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:13:34.232Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:13:34.247Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:13:34.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:35.194Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:13:34.214Z","error":null,"id":"9ec0111c-6d41-47a4-b020-abc2f6877539","job_id":"494d7928-bb38-4216-88c0-51915df7db34","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fffff"},"result":null,"status":"active","timestamp":"2024-11-06T22:13:35.252Z","type":"REALTIME","updated_at":"2024-11-06T22:13:34.214Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 9ec0111c-6d41-47a4-b020-abc2f6877539 9ec0111c-6d41-47a4-b020-abc2f6877539 on queue tasks with result 9ec0111c-6d41-47a4-b020-abc2f6877539","timestamp":"2024-11-06T22:13:35.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:39.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:44.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:49.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:54.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:13:59.581Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e9bc1f05-92b9-441b-b17a-c29536b4444c\",\"job_id\":\"49aa709e-6de9-4901-a719-14e3af699c5f\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fffff\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:02.682Z\",\"updated_at\":\"2024-11-06T22:14:02.682Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:02.700Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:02.713Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:02.719Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:02.682Z","error":null,"id":"e9bc1f05-92b9-441b-b17a-c29536b4444c","job_id":"49aa709e-6de9-4901-a719-14e3af699c5f","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fffff"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:03.719Z","type":"REALTIME","updated_at":"2024-11-06T22:14:02.682Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job e9bc1f05-92b9-441b-b17a-c29536b4444c e9bc1f05-92b9-441b-b17a-c29536b4444c on queue tasks with result e9bc1f05-92b9-441b-b17a-c29536b4444c","timestamp":"2024-11-06T22:14:03.722Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:03.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:03.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:09.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:13.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:15.596Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"f82c56e5-fc41-4ccf-831c-7cfc3591012f\",\"job_id\":\"ee4554f7-4c63-4115-8757-da382b5e2bb0\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:15.872Z\",\"updated_at\":\"2024-11-06T22:14:15.872Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:15.886Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:15.903Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:15.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:16.883Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:15.872Z","error":null,"id":"f82c56e5-fc41-4ccf-831c-7cfc3591012f","job_id":"ee4554f7-4c63-4115-8757-da382b5e2bb0","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:16.910Z","type":"REALTIME","updated_at":"2024-11-06T22:14:15.872Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job f82c56e5-fc41-4ccf-831c-7cfc3591012f f82c56e5-fc41-4ccf-831c-7cfc3591012f on queue tasks with result f82c56e5-fc41-4ccf-831c-7cfc3591012f","timestamp":"2024-11-06T22:14:16.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:18.773Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d142b883-4c06-4879-aa11-df5dcce5d647\",\"job_id\":\"c732421b-fa03-4cba-a8a7-92631bef92a0\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:23.578Z\",\"updated_at\":\"2024-11-06T22:14:23.578Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:23.590Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:23.603Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:23.609Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"5901c3e6-13a7-4f6a-abe0-e7b64f8aac1c\",\"job_id\":\"a236dd83-3981-424b-a172-7621b59db92a\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:23.681Z\",\"updated_at\":\"2024-11-06T22:14:23.681Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:23.715Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:23.727Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:23.729Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"9123a89a-81c8-41e1-9e08-45dff420ecb4\",\"job_id\":\"a1150e4e-afca-475a-a828-9c5e8739ad32\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:23.787Z\",\"updated_at\":\"2024-11-06T22:14:23.787Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:23.811Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:23.820Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:23.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:23.847Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"56044f7f-73e3-4d3f-a2a3-8253042e17a7\",\"job_id\":\"83b8d5bd-be30-4f44-b6a4-b1bac03d1013\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:23.939Z\",\"updated_at\":\"2024-11-06T22:14:23.939Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:23.954Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:23.965Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:23.969Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:23.578Z","error":null,"id":"d142b883-4c06-4879-aa11-df5dcce5d647","job_id":"c732421b-fa03-4cba-a8a7-92631bef92a0","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:24.610Z","type":"REALTIME","updated_at":"2024-11-06T22:14:23.578Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job d142b883-4c06-4879-aa11-df5dcce5d647 d142b883-4c06-4879-aa11-df5dcce5d647 on queue tasks with result d142b883-4c06-4879-aa11-df5dcce5d647","timestamp":"2024-11-06T22:14:24.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:24.721Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:23.681Z","error":null,"id":"5901c3e6-13a7-4f6a-abe0-e7b64f8aac1c","job_id":"a236dd83-3981-424b-a172-7621b59db92a","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:24.730Z","type":"REALTIME","updated_at":"2024-11-06T22:14:23.681Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 5901c3e6-13a7-4f6a-abe0-e7b64f8aac1c 5901c3e6-13a7-4f6a-abe0-e7b64f8aac1c on queue tasks with result 5901c3e6-13a7-4f6a-abe0-e7b64f8aac1c","timestamp":"2024-11-06T22:14:24.732Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:23.787Z","error":null,"id":"9123a89a-81c8-41e1-9e08-45dff420ecb4","job_id":"a1150e4e-afca-475a-a828-9c5e8739ad32","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:24.834Z","type":"REALTIME","updated_at":"2024-11-06T22:14:23.787Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 9123a89a-81c8-41e1-9e08-45dff420ecb4 9123a89a-81c8-41e1-9e08-45dff420ecb4 on queue tasks with result 9123a89a-81c8-41e1-9e08-45dff420ecb4","timestamp":"2024-11-06T22:14:24.837Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:23.939Z","error":null,"id":"56044f7f-73e3-4d3f-a2a3-8253042e17a7","job_id":"83b8d5bd-be30-4f44-b6a4-b1bac03d1013","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:24.970Z","type":"REALTIME","updated_at":"2024-11-06T22:14:23.939Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 56044f7f-73e3-4d3f-a2a3-8253042e17a7 56044f7f-73e3-4d3f-a2a3-8253042e17a7 on queue tasks with result 56044f7f-73e3-4d3f-a2a3-8253042e17a7","timestamp":"2024-11-06T22:14:24.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:28.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:32.043Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"32463092-596c-46fc-8b33-4678bc4ec7f3\",\"job_id\":\"5f86a62d-40ac-4faa-805f-c8aaf7f6cbd3\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:36.370Z\",\"updated_at\":\"2024-11-06T22:14:36.370Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:36.383Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:36.390Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:36.395Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"ba2a1977-2d79-48e8-855b-9e0754d14323\",\"job_id\":\"78fab4e8-72e6-4f26-927b-0878c02d06ab\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:36.506Z\",\"updated_at\":\"2024-11-06T22:14:36.506Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:36.526Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:36.549Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:36.558Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"09d48382-1c29-4126-9954-10b059933c5b\",\"job_id\":\"2c329219-fc53-4f61-a5f3-2717f6bb8fda\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:36.625Z\",\"updated_at\":\"2024-11-06T22:14:36.625Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:36.639Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:36.659Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:36.661Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"581b7ad3-f5ec-4b58-b716-d243e5839846\",\"job_id\":\"62314e98-4bfe-418d-8b65-189ad4cbb50a\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:36.752Z\",\"updated_at\":\"2024-11-06T22:14:36.752Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:36.778Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:36.804Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:36.814Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d4a54652-ec3f-4ed8-9aec-3394b7c55851\",\"job_id\":\"3d42aed6-6925-44c0-b8a0-64f9c7a0b511\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:36.872Z\",\"updated_at\":\"2024-11-06T22:14:36.872Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:36.890Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:36.898Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:36.901Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"ce9173ad-86a5-438b-92e0-f6388630b215\",\"job_id\":\"31b00122-ff5d-499c-84a3-ac8342627d4c\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:36.990Z\",\"updated_at\":\"2024-11-06T22:14:36.990Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:37.004Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:37.017Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:37.021Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"3404176a-5b15-48eb-b05f-c8bd2c598f29\",\"job_id\":\"4ac768be-ad1c-4722-aede-29ff1fc645c3\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf\"},\"status\":\"active\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-06T22:14:37.069Z\",\"updated_at\":\"2024-11-06T22:14:37.069Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-06T22:14:37.085Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-06T22:14:37.096Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-06T22:14:37.100Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:36.370Z","error":null,"id":"32463092-596c-46fc-8b33-4678bc4ec7f3","job_id":"5f86a62d-40ac-4faa-805f-c8aaf7f6cbd3","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:37.396Z","type":"REALTIME","updated_at":"2024-11-06T22:14:36.370Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 32463092-596c-46fc-8b33-4678bc4ec7f3 32463092-596c-46fc-8b33-4678bc4ec7f3 on queue tasks with result 32463092-596c-46fc-8b33-4678bc4ec7f3","timestamp":"2024-11-06T22:14:37.398Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:36.506Z","error":null,"id":"ba2a1977-2d79-48e8-855b-9e0754d14323","job_id":"78fab4e8-72e6-4f26-927b-0878c02d06ab","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:37.559Z","type":"REALTIME","updated_at":"2024-11-06T22:14:36.506Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job ba2a1977-2d79-48e8-855b-9e0754d14323 ba2a1977-2d79-48e8-855b-9e0754d14323 on queue tasks with result ba2a1977-2d79-48e8-855b-9e0754d14323","timestamp":"2024-11-06T22:14:37.566Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:36.625Z","error":null,"id":"09d48382-1c29-4126-9954-10b059933c5b","job_id":"2c329219-fc53-4f61-a5f3-2717f6bb8fda","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:37.663Z","type":"REALTIME","updated_at":"2024-11-06T22:14:36.625Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 09d48382-1c29-4126-9954-10b059933c5b 09d48382-1c29-4126-9954-10b059933c5b on queue tasks with result 09d48382-1c29-4126-9954-10b059933c5b","timestamp":"2024-11-06T22:14:37.665Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:36.752Z","error":null,"id":"581b7ad3-f5ec-4b58-b716-d243e5839846","job_id":"62314e98-4bfe-418d-8b65-189ad4cbb50a","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:37.816Z","type":"REALTIME","updated_at":"2024-11-06T22:14:36.752Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 581b7ad3-f5ec-4b58-b716-d243e5839846 581b7ad3-f5ec-4b58-b716-d243e5839846 on queue tasks with result 581b7ad3-f5ec-4b58-b716-d243e5839846","timestamp":"2024-11-06T22:14:37.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:37.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:37.847Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:36.872Z","error":null,"id":"d4a54652-ec3f-4ed8-9aec-3394b7c55851","job_id":"3d42aed6-6925-44c0-b8a0-64f9c7a0b511","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:37.901Z","type":"REALTIME","updated_at":"2024-11-06T22:14:36.872Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job d4a54652-ec3f-4ed8-9aec-3394b7c55851 d4a54652-ec3f-4ed8-9aec-3394b7c55851 on queue tasks with result d4a54652-ec3f-4ed8-9aec-3394b7c55851","timestamp":"2024-11-06T22:14:37.903Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:36.990Z","error":null,"id":"ce9173ad-86a5-438b-92e0-f6388630b215","job_id":"31b00122-ff5d-499c-84a3-ac8342627d4c","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:38.022Z","type":"REALTIME","updated_at":"2024-11-06T22:14:36.990Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job ce9173ad-86a5-438b-92e0-f6388630b215 ce9173ad-86a5-438b-92e0-f6388630b215 on queue tasks with result ce9173ad-86a5-438b-92e0-f6388630b215","timestamp":"2024-11-06T22:14:38.024Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-06T22:14:37.069Z","error":null,"id":"3404176a-5b15-48eb-b05f-c8bd2c598f29","job_id":"4ac768be-ad1c-4722-aede-29ff1fc645c3","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fdgsdffdsgdfsgdsfgdfsgdsfgdfsgdsfgsdfgdsfgsdf"},"result":null,"status":"active","timestamp":"2024-11-06T22:14:38.101Z","type":"REALTIME","updated_at":"2024-11-06T22:14:37.069Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 3404176a-5b15-48eb-b05f-c8bd2c598f29 3404176a-5b15-48eb-b05f-c8bd2c598f29 on queue tasks with result 3404176a-5b15-48eb-b05f-c8bd2c598f29","timestamp":"2024-11-06T22:14:38.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:41.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:46.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:51.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:14:56.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:01.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:06.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:11.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:15.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:16.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:21.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:26.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:31.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:36.967Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:42.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:47.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:52.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:15:56.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:02.016Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:07.017Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:11.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:15.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:17.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:22.003Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:27.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:32.052Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:37.020Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:41.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:47.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:51.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:16:56.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:01.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:07.000Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:11.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:15.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:16.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:21.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:26.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:31.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:36.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:41.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:46.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:51.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:17:56.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:01.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:06.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:11.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:15.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:16.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:21.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:26.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:31.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:36.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:42.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:46.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:51.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:18:56.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:02.188Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:06.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:11.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:15.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:16.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:21.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:26.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:31.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:36.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:42.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:46.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:52.026Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:19:56.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:01.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:06.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:11.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:15.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:16.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:22.026Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:26.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:31.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:37.005Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:41.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:46.992Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:52.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:20:56.960Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:01.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:06.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:11.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:15.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:17.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:21.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:26.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:31.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:36.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:41.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:46.990Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:51.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:21:57.025Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:01.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:06.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:15.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:16.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:22.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:26.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:31.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:37.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:41.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:46.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:51.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:22:56.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:02.029Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:07.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:12.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:15.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:17.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:22.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:27.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:30.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:31.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:32.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:36.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:41.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:46.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:51.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:23:56.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:01.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:06.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:12.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:15.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:16.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:21.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:26.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:32.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:37.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:41.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:47.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:51.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:24:57.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:02.007Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:07.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:12.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:15.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:17.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:22.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:26.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:31.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:36.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:41.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:46.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:51.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:25:56.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:01.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:07.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:11.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:16.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:22.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:26.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:31.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:36.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:41.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:46.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:51.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:26:57.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:04.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:04.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:07.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:07.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:11.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:12.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:13.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:14.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:14.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:14.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:15.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:16.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:16.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:27:16.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:10.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:10.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:10.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:10.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:12.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:15.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:15.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:15.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:16.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:16.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:21.214Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:26.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:31.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:31.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:36.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:41.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:46.214Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:46.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:51.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:28:56.206Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:01.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:01.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:06.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:11.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:14.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:14.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:17.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:17.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:21.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:26.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:31.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:31.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:36.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:41.188Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:46.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:46.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:51.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:29:56.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:02.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:02.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:04.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:06.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:10.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:16.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:18.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:18.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:18.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:19.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:21.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:24.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:26.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:28.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:31.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:31.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:36.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:41.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:46.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:46.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:51.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:30:56.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:01.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:01.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:06.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:11.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:14.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:14.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:16.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:16.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:21.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:26.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:31.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:31.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:36.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:41.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:46.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:46.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:51.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:31:56.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:01.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:01.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:06.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:11.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:14.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:14.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:16.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:16.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:32:21.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T22:33:56.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-06T23:08:50.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T01:55:04.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T01:55:16.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T01:55:17.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:18.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:19.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:36.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:38.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:47.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:58.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:59.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:14:59.738Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:03.534Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"2d2be7db-c7e4-4ea3-8442-77baf4ea539d\",\"job_id\":\"38ccb4c2-cd06-4591-9b78-eb92b75c0783\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:15:04.037Z\",\"updated_at\":\"2024-11-07T02:15:04.037Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:15:04.054Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:15:04.068Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:15:04.074Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:15:04.037Z","error":"WebSocket is not connected","id":"2d2be7db-c7e4-4ea3-8442-77baf4ea539d","job_id":"38ccb4c2-cd06-4591-9b78-eb92b75c0783","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"result":null,"status":"failed","timestamp":"2024-11-07T02:15:04.148Z","type":"REALTIME","updated_at":"2024-11-07T02:15:04.037Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 2d2be7db-c7e4-4ea3-8442-77baf4ea539d 2d2be7db-c7e4-4ea3-8442-77baf4ea539d on queue tasks with result 2d2be7db-c7e4-4ea3-8442-77baf4ea539d","timestamp":"2024-11-07T02:15:04.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:04.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:08.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:13.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:15.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:18.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:23.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:28.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:33.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:38.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:43.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:48.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:53.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:15:58.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:03.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:08.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:13.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:18.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:23.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:16:28.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:17:16.129Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"02cc5615-d8b3-460f-9350-53e5c8675a54\",\"job_id\":\"69a09f99-2c1f-41a9-ab44-b0b9bcf949a0\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:17:40.054Z\",\"updated_at\":\"2024-11-07T02:17:40.054Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:17:40.090Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:17:40.111Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:17:40.115Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:17:40.054Z","error":"WebSocket is not connected","id":"02cc5615-d8b3-460f-9350-53e5c8675a54","job_id":"69a09f99-2c1f-41a9-ab44-b0b9bcf949a0","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"result":null,"status":"failed","timestamp":"2024-11-07T02:17:40.190Z","type":"REALTIME","updated_at":"2024-11-07T02:17:40.054Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 02cc5615-d8b3-460f-9350-53e5c8675a54 02cc5615-d8b3-460f-9350-53e5c8675a54 on queue tasks with result 02cc5615-d8b3-460f-9350-53e5c8675a54","timestamp":"2024-11-07T02:17:40.193Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:17:41.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:18:15.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:05.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:16.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:17.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:29.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:29.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:46.590Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"da892b9c-d824-425b-a3e6-4633192a7916\",\"job_id\":\"7d6c5f82-9bf0-4680-a7c2-ab3fb91ab209\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:19:47.113Z\",\"updated_at\":\"2024-11-07T02:19:47.113Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:19:47.143Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:19:47.163Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:19:47.168Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:19:47.113Z","error":"WebSocket is not connected","id":"da892b9c-d824-425b-a3e6-4633192a7916","job_id":"7d6c5f82-9bf0-4680-a7c2-ab3fb91ab209","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"result":null,"status":"failed","timestamp":"2024-11-07T02:19:47.257Z","type":"REALTIME","updated_at":"2024-11-07T02:19:47.113Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job da892b9c-d824-425b-a3e6-4633192a7916 da892b9c-d824-425b-a3e6-4633192a7916 on queue tasks with result da892b9c-d824-425b-a3e6-4633192a7916","timestamp":"2024-11-07T02:19:47.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:19:47.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:20:15.602Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"dd88dd07-c279-45d0-a2d8-75481a6b90c7\",\"job_id\":\"b9e552a8-aa39-4595-9815-9d2af127ddb5\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"trrt\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:20:20.778Z\",\"updated_at\":\"2024-11-07T02:20:20.778Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:20:20.809Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:20:20.826Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:20:20.832Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:20:20.778Z","error":"WebSocket is not connected","id":"dd88dd07-c279-45d0-a2d8-75481a6b90c7","job_id":"b9e552a8-aa39-4595-9815-9d2af127ddb5","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"trrt"},"result":null,"status":"failed","timestamp":"2024-11-07T02:20:20.895Z","type":"REALTIME","updated_at":"2024-11-07T02:20:20.778Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job dd88dd07-c279-45d0-a2d8-75481a6b90c7 dd88dd07-c279-45d0-a2d8-75481a6b90c7 on queue tasks with result dd88dd07-c279-45d0-a2d8-75481a6b90c7","timestamp":"2024-11-07T02:20:20.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:20:21.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:21:15.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:21:41.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:21:43.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:21:48.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:21:53.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:21:58.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:03.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:08.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:13.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:15.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:18.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:23.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:28.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:33.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:38.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:22:43.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:23:16.020Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:23.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:24.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:25.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:26.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:29.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:30.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:30.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:40.744Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:24:41.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:18.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:19.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:20.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:21.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:25.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:26.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:32.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:25:33.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:19.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:19.696Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:20.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:27.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:28.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:33.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:34.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:36.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:36.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:48.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:49.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:54.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:26:55.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:03.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:04.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:10.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:11.002Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:15.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:21.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:22.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:36.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:58.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:27:58.523Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"a5d19562-3fc5-4fc7-a88c-fd16855ff34a\",\"job_id\":\"a78d3f7f-f4f0-439e-b9e3-93f2c1b74c05\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hu\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:27:58.497Z\",\"updated_at\":\"2024-11-07T02:27:58.497Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:27:58.550Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:27:58.582Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:27:58.592Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:27:58.497Z","error":null,"id":"a5d19562-3fc5-4fc7-a88c-fd16855ff34a","job_id":"a78d3f7f-f4f0-439e-b9e3-93f2c1b74c05","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hu"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hu"},"status":"completed","timestamp":"2024-11-07T02:27:58.608Z","type":"REALTIME","updated_at":"2024-11-07T02:27:58.497Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job a5d19562-3fc5-4fc7-a88c-fd16855ff34a a5d19562-3fc5-4fc7-a88c-fd16855ff34a on queue tasks with result a5d19562-3fc5-4fc7-a88c-fd16855ff34a","timestamp":"2024-11-07T02:27:58.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:28:16.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:28:17.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:29:01.528Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"fedf4d4b-f0a6-4c42-859b-686977151e52\",\"job_id\":\"2fce44c8-4eb7-4913-9605-8234ab517fda\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ji\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:29:06.950Z\",\"updated_at\":\"2024-11-07T02:29:06.950Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:29:06.999Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:29:07.020Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:29:07.024Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:29:06.950Z","error":null,"id":"fedf4d4b-f0a6-4c42-859b-686977151e52","job_id":"2fce44c8-4eb7-4913-9605-8234ab517fda","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ji"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ji"},"status":"completed","timestamp":"2024-11-07T02:29:07.041Z","type":"REALTIME","updated_at":"2024-11-07T02:29:06.950Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job fedf4d4b-f0a6-4c42-859b-686977151e52 fedf4d4b-f0a6-4c42-859b-686977151e52 on queue tasks with result fedf4d4b-f0a6-4c42-859b-686977151e52","timestamp":"2024-11-07T02:29:07.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:29:07.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:29:15.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:30:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:31:24.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:31:25.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:31:25.576Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c8b1bf0c-8ab4-4336-93e7-b0f7a01fc532\",\"job_id\":\"75f9095e-d5f7-4bf7-a4e2-ff3672e98213\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:31:25.644Z\",\"updated_at\":\"2024-11-07T02:31:25.644Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:31:25.687Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:31:25.707Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:31:25.713Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:31:25.644Z","error":null,"id":"c8b1bf0c-8ab4-4336-93e7-b0f7a01fc532","job_id":"75f9095e-d5f7-4bf7-a4e2-ff3672e98213","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"status":"completed","timestamp":"2024-11-07T02:31:25.754Z","type":"REALTIME","updated_at":"2024-11-07T02:31:25.644Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job c8b1bf0c-8ab4-4336-93e7-b0f7a01fc532 c8b1bf0c-8ab4-4336-93e7-b0f7a01fc532 on queue tasks with result c8b1bf0c-8ab4-4336-93e7-b0f7a01fc532","timestamp":"2024-11-07T02:31:25.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:32:15.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:33:15.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:34:15.576Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e6307b9e-b7ea-4494-bd7c-e1cd4b35c993\",\"job_id\":\"4fdd7a4e-d89c-4e0e-92fd-bb904c4d7b10\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"uytuyt\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:34:18.285Z\",\"updated_at\":\"2024-11-07T02:34:18.285Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:34:18.317Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:34:18.326Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:34:18.330Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:34:18.285Z","error":null,"id":"e6307b9e-b7ea-4494-bd7c-e1cd4b35c993","job_id":"4fdd7a4e-d89c-4e0e-92fd-bb904c4d7b10","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"uytuyt"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"uytuyt"},"status":"completed","timestamp":"2024-11-07T02:34:18.371Z","type":"REALTIME","updated_at":"2024-11-07T02:34:18.285Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job e6307b9e-b7ea-4494-bd7c-e1cd4b35c993 e6307b9e-b7ea-4494-bd7c-e1cd4b35c993 on queue tasks with result e6307b9e-b7ea-4494-bd7c-e1cd4b35c993","timestamp":"2024-11-07T02:34:18.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:34:19.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:35:16.294Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"50789905-cf09-4b1a-b50c-9ae90dd6413a\",\"job_id\":\"8a9c81a1-a277-49d7-9e4c-512afc2e4f31\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hhh\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:36:10.354Z\",\"updated_at\":\"2024-11-07T02:36:10.354Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:36:10.415Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:36:10.429Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:36:10.432Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:36:10.354Z","error":null,"id":"50789905-cf09-4b1a-b50c-9ae90dd6413a","job_id":"8a9c81a1-a277-49d7-9e4c-512afc2e4f31","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hhh"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hhh"},"status":"completed","timestamp":"2024-11-07T02:36:10.449Z","type":"REALTIME","updated_at":"2024-11-07T02:36:10.354Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 50789905-cf09-4b1a-b50c-9ae90dd6413a 50789905-cf09-4b1a-b50c-9ae90dd6413a on queue tasks with result 50789905-cf09-4b1a-b50c-9ae90dd6413a","timestamp":"2024-11-07T02:36:10.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:36:12.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:36:15.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:37:15.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:38:15.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:39:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:40:15.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:41:15.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:42:15.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:43:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:44:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:45:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:46:15.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:47:15.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:48:15.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:49:15.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:49:16.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:49:31.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:49:46.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:50:01.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:50:15.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:51:03.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:51:21.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:51:22.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:51:22.422Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e393900e-19b8-48e8-a53a-49514caf73a8\",\"job_id\":\"c15521f5-7ddf-4a00-87da-447f05def507\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello \"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:51:22.495Z\",\"updated_at\":\"2024-11-07T02:51:22.495Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:51:22.541Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:51:22.565Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:51:22.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:52:15.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:52:16.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:52:31.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:52:44.010Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"2fa523b2-9405-44a4-ae8e-f548f2e4c735\",\"job_id\":\"0ed36f32-4ff2-48de-9d65-d604de7a005d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:52:43.999Z\",\"updated_at\":\"2024-11-07T02:52:43.999Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:52:44.036Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:52:44.050Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:52:44.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:52:44.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:53:19.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:53:19.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:53:42.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:53:42.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:53:46.639Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"8b438c39-52fc-49bf-9401-9bd3ae9e86cf\",\"job_id\":\"04d578e3-63a1-4842-8c0c-8f28b010a7cc\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:53:49.914Z\",\"updated_at\":\"2024-11-07T02:53:49.914Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:53:49.963Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:53:49.980Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:53:49.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:53:50.761Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:53:49.914Z","error":null,"id":"8b438c39-52fc-49bf-9401-9bd3ae9e86cf","job_id":"04d578e3-63a1-4842-8c0c-8f28b010a7cc","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"status":"completed","timestamp":"2024-11-07T02:54:10.809Z","type":"REALTIME","updated_at":"2024-11-07T02:53:49.914Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 8b438c39-52fc-49bf-9401-9bd3ae9e86cf 8b438c39-52fc-49bf-9401-9bd3ae9e86cf on queue tasks with result 8b438c39-52fc-49bf-9401-9bd3ae9e86cf","timestamp":"2024-11-07T02:54:10.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:16.037Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:54:16.667Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:54:16.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:20.065Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:51:22.495Z","error":null,"id":"e393900e-19b8-48e8-a53a-49514caf73a8","job_id":"c15521f5-7ddf-4a00-87da-447f05def507","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello "},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello "},"status":"completed","timestamp":"2024-11-07T02:54:20.579Z","type":"REALTIME","updated_at":"2024-11-07T02:51:22.495Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job e393900e-19b8-48e8-a53a-49514caf73a8 e393900e-19b8-48e8-a53a-49514caf73a8 on queue tasks with result e393900e-19b8-48e8-a53a-49514caf73a8","timestamp":"2024-11-07T02:54:20.587Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:54:20.589Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:54:20.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:23.954Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:52:43.999Z","error":null,"id":"2fa523b2-9405-44a4-ae8e-f548f2e4c735","job_id":"0ed36f32-4ff2-48de-9d65-d604de7a005d","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello"},"status":"completed","timestamp":"2024-11-07T02:54:24.054Z","type":"REALTIME","updated_at":"2024-11-07T02:52:43.999Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 2fa523b2-9405-44a4-ae8e-f548f2e4c735 2fa523b2-9405-44a4-ae8e-f548f2e4c735 on queue tasks with result 2fa523b2-9405-44a4-ae8e-f548f2e4c735","timestamp":"2024-11-07T02:54:24.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:28.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:33.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:38.275Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:43.275Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:48.302Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"fdd77d0a-7740-479b-b16c-367b24cdac08\",\"job_id\":\"78fefc2b-46fd-4b54-9335-fe75bcf6be80\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:54:52.571Z\",\"updated_at\":\"2024-11-07T02:54:52.571Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:54:52.621Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:54:52.638Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:54:52.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:53.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:54.022Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:54:59.134Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:54:52.571Z","error":null,"id":"fdd77d0a-7740-479b-b16c-367b24cdac08","job_id":"78fefc2b-46fd-4b54-9335-fe75bcf6be80","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"status":"completed","timestamp":"2024-11-07T02:55:03.465Z","type":"REALTIME","updated_at":"2024-11-07T02:54:52.571Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job fdd77d0a-7740-479b-b16c-367b24cdac08 fdd77d0a-7740-479b-b16c-367b24cdac08 on queue tasks with result fdd77d0a-7740-479b-b16c-367b24cdac08","timestamp":"2024-11-07T02:55:03.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:03.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:08.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:13.275Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:15.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:18.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:23.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:28.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:33.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:38.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:43.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:48.264Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:53.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:55:58.260Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"a4df3030-9ee4-4f3d-b235-bb99e9036ec9\",\"job_id\":\"a923f970-2f4d-486d-b4dd-0090ee11d207\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T02:56:02.781Z\",\"updated_at\":\"2024-11-07T02:56:02.781Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T02:56:02.835Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T02:56:02.843Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T02:56:02.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:03.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:04.261Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T02:56:02.781Z","error":null,"id":"a4df3030-9ee4-4f3d-b235-bb99e9036ec9","job_id":"a923f970-2f4d-486d-b4dd-0090ee11d207","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"status":"completed","timestamp":"2024-11-07T02:56:05.825Z","type":"REALTIME","updated_at":"2024-11-07T02:56:02.781Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job a4df3030-9ee4-4f3d-b235-bb99e9036ec9 a4df3030-9ee4-4f3d-b235-bb99e9036ec9 on queue tasks with result a4df3030-9ee4-4f3d-b235-bb99e9036ec9","timestamp":"2024-11-07T02:56:05.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:08.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:13.271Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:18.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:23.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:28.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:33.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:38.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:43.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:48.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:53.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:56:58.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:03.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:08.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:13.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:15.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:18.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:23.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:28.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:33.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:39.187Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:40.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:40.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:43.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:48.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:53.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:57:58.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:03.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:08.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:13.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:15.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:18.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:23.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:28.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:33.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:38.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:43.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:48.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:53.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:58:58.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:03.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:08.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:13.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:15.457Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:18.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:23.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:28.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:33.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:38.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:43.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:48.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:53.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T02:59:58.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:03.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:08.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:13.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:18.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:23.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:28.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:29.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:30.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:30.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:31.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:33.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:38.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:42.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:43.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:44.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:45.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:48.264Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:52.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:53.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:57.677Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:00:58.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:03.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:08.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:13.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:18.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:23.239Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:28.228Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:33.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:38.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:43.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:48.250Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:53.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:01:58.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:03.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:08.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:13.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:15.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:18.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:23.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:28.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:29.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:30.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:33.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:38.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:43.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:48.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:53.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:02:58.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:02.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:03.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:07.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:08.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:15.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:18.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:23.296Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"9064931f-2364-4ee6-a88e-b95833801735\",\"job_id\":\"a71eccf5-6039-420d-aef7-7fbb87064767\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T03:03:25.350Z\",\"updated_at\":\"2024-11-07T03:03:25.350Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T03:03:25.396Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T03:03:25.408Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T03:03:25.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:26.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:28.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:33.444Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:38.714Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T03:03:25.350Z","error":null,"id":"9064931f-2364-4ee6-a88e-b95833801735","job_id":"a71eccf5-6039-420d-aef7-7fbb87064767","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"status":"completed","timestamp":"2024-11-07T03:03:43.945Z","type":"REALTIME","updated_at":"2024-11-07T03:03:25.350Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 9064931f-2364-4ee6-a88e-b95833801735 9064931f-2364-4ee6-a88e-b95833801735 on queue tasks with result 9064931f-2364-4ee6-a88e-b95833801735","timestamp":"2024-11-07T03:03:43.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:44.005Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:48.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:53.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:03:58.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:04.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:08.250Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:13.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:15.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:17.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:18.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:23.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:28.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:33.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:38.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:42.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:43.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:44.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:48.300Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"84b9882c-097b-49c9-ba39-09730ea7cb59\",\"job_id\":\"ed60c324-39a9-4840-b9be-d3e9d3920f0c\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T03:04:52.723Z\",\"updated_at\":\"2024-11-07T03:04:52.723Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T03:04:52.759Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T03:04:52.779Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T03:04:52.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:53.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:54.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:04:59.232Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T03:04:52.723Z","error":null,"id":"84b9882c-097b-49c9-ba39-09730ea7cb59","job_id":"ed60c324-39a9-4840-b9be-d3e9d3920f0c","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello"},"status":"completed","timestamp":"2024-11-07T03:05:00.955Z","type":"REALTIME","updated_at":"2024-11-07T03:04:52.723Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 84b9882c-097b-49c9-ba39-09730ea7cb59 84b9882c-097b-49c9-ba39-09730ea7cb59 on queue tasks with result 84b9882c-097b-49c9-ba39-09730ea7cb59","timestamp":"2024-11-07T03:05:00.965Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:03.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:08.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:13.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:18.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:23.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:28.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:33.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:38.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:43.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:48.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:53.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:05:58.264Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:03.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:08.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:13.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:15.682Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:18.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:23.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:28.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:33.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:38.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:43.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:48.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:53.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:57.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:06:59.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:00.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:01.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:02.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:04.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:05.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:09.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:10.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:13.280Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"be4fefcf-4405-4650-bae1-6958e6f94d8f\",\"job_id\":\"c2d42ae7-4e17-44c9-bb8d-b3a41484f2d2\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"helllo\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T03:07:14.880Z\",\"updated_at\":\"2024-11-07T03:07:14.880Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T03:07:14.897Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T03:07:14.907Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T03:07:14.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:15.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:16.296Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T03:07:14.880Z","error":null,"id":"be4fefcf-4405-4650-bae1-6958e6f94d8f","job_id":"c2d42ae7-4e17-44c9-bb8d-b3a41484f2d2","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"helllo"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"helllo"},"status":"completed","timestamp":"2024-11-07T03:07:18.973Z","type":"REALTIME","updated_at":"2024-11-07T03:07:14.880Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job be4fefcf-4405-4650-bae1-6958e6f94d8f be4fefcf-4405-4650-bae1-6958e6f94d8f on queue tasks with result be4fefcf-4405-4650-bae1-6958e6f94d8f","timestamp":"2024-11-07T03:07:18.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:19.015Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:23.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:28.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:33.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:38.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:42.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:43.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:44.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:46.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:46.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:48.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:50.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:50.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:53.384Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"0d6e599a-ff91-400f-b7c2-d9741a53d3a1\",\"job_id\":\"24cd7c3a-78db-4e85-8244-ffd8cee54cc1\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fjhhg\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T03:07:54.181Z\",\"updated_at\":\"2024-11-07T03:07:54.181Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T03:07:54.221Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T03:07:54.243Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T03:07:54.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:55.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:07:59.036Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:04.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:08.964Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T03:07:54.181Z","error":null,"id":"0d6e599a-ff91-400f-b7c2-d9741a53d3a1","job_id":"24cd7c3a-78db-4e85-8244-ffd8cee54cc1","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fjhhg"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fjhhg"},"status":"completed","timestamp":"2024-11-07T03:08:12.996Z","type":"REALTIME","updated_at":"2024-11-07T03:07:54.181Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 0d6e599a-ff91-400f-b7c2-d9741a53d3a1 0d6e599a-ff91-400f-b7c2-d9741a53d3a1 on queue tasks with result 0d6e599a-ff91-400f-b7c2-d9741a53d3a1","timestamp":"2024-11-07T03:08:13.002Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:13.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:15.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:18.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:23.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:24.048Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c27d186e-fede-4675-b18c-cfc70c169d10\",\"job_id\":\"7e45332a-8b83-442a-9636-7a99a35d0e3d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"kkghjkhj\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T03:08:24.714Z\",\"updated_at\":\"2024-11-07T03:08:24.714Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T03:08:24.751Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T03:08:24.769Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T03:08:24.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:26.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:28.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:34.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:39.157Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T03:08:24.714Z","error":null,"id":"c27d186e-fede-4675-b18c-cfc70c169d10","job_id":"7e45332a-8b83-442a-9636-7a99a35d0e3d","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"kkghjkhj"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"kkghjkhj"},"status":"completed","timestamp":"2024-11-07T03:08:41.753Z","type":"REALTIME","updated_at":"2024-11-07T03:08:24.714Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job c27d186e-fede-4675-b18c-cfc70c169d10 c27d186e-fede-4675-b18c-cfc70c169d10 on queue tasks with result c27d186e-fede-4675-b18c-cfc70c169d10","timestamp":"2024-11-07T03:08:41.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:43.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:48.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:53.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:08:58.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:03.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:08.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:15.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:18.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:23.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:28.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:33.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:38.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:43.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:48.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:53.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:09:58.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:03.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:08.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:13.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:18.281Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:23.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:28.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:33.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:38.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:43.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:48.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:53.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:10:58.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:03.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:08.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:13.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:15.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:18.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:23.268Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:28.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:33.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:38.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:43.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:48.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:53.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:11:58.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:03.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:08.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:13.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:15.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:18.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:23.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:28.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:35.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:36.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:36.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:38.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:43.267Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:48.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:53.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:12:58.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:03.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:08.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:13.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:15.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:18.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:21.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:23.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:23.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:25.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:26.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:28.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:30.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:31.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:34.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:37.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:38.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:43.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:44.645Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"7ebaf902-f74b-44dc-90bc-98270e151d13\",\"job_id\":\"b7eab7e3-c573-4ee8-8898-ebe9eac5c639\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hrllo\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T03:13:46.550Z\",\"updated_at\":\"2024-11-07T03:13:46.550Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T03:13:46.570Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T03:13:46.605Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T03:13:46.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:47.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:48.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:53.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:13:58.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:04.105Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T03:13:46.550Z","error":null,"id":"7ebaf902-f74b-44dc-90bc-98270e151d13","job_id":"b7eab7e3-c573-4ee8-8898-ebe9eac5c639","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hrllo"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hrllo"},"status":"completed","timestamp":"2024-11-07T03:14:07.176Z","type":"REALTIME","updated_at":"2024-11-07T03:13:46.550Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 7ebaf902-f74b-44dc-90bc-98270e151d13 7ebaf902-f74b-44dc-90bc-98270e151d13 on queue tasks with result 7ebaf902-f74b-44dc-90bc-98270e151d13","timestamp":"2024-11-07T03:14:07.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:08.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:13.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:15.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:18.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:23.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:28.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:33.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:38.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:43.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:48.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:53.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:14:58.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:03.248Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:08.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:13.271Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:18.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:23.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:28.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:33.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:38.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:43.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:48.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:53.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:15:58.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:03.233Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:08.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:13.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:18.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:23.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:28.248Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:33.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:38.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:43.264Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:48.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:53.243Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:16:58.239Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:03.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:08.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:13.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:18.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:23.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:28.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:33.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:38.308Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:43.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:48.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:53.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:17:58.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:03.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:08.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:13.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:15.444Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:18.261Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:23.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:28.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:33.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:38.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:43.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:48.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:53.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:18:58.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:03.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:08.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:13.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:15.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:18.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:23.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:28.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:33.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:38.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:43.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:48.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:53.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:19:58.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:03.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:08.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:13.266Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:15.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:18.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:23.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:28.275Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:33.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:38.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:43.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:48.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:53.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:20:58.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:03.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:08.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:18.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:23.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:28.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:33.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:38.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:43.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:48.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:53.299Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:21:58.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:03.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:08.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:13.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:15.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:18.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:23.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:28.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:33.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:38.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:43.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:48.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:53.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:22:58.244Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:03.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:08.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:13.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:18.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:23.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:28.247Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:33.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:38.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:43.271Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:48.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:53.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:23:58.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:03.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:08.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:13.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:15.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:18.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:23.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:28.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:33.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:38.445Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:43.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:48.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:53.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:24:58.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:25:03.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:25:08.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:25:15.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:26:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:27:15.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:28:15.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:29:15.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:30:15.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:31:15.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:32:15.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:33:15.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:34:15.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:35:15.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:36:15.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:37:15.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:38:15.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:39:15.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:40:15.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:41:15.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:42:15.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:43:15.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:44:15.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:45:15.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:46:15.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:47:15.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:48:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:49:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:15.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:18.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:23.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:28.242Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:33.261Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:38.248Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:43.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:48.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:53.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:50:58.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:03.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:08.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:13.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:15.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:18.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:23.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:28.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:33.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:38.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:43.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:48.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:53.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:51:58.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:52:03.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:52:08.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:52:13.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:52:15.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:52:18.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:53:16.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:54:15.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:55:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:15.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:42.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:43.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:49.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:49.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:53.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:56:58.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:03.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:08.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:13.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:18.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:23.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:28.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:33.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:38.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:43.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:48.251Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:53.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:57:58.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:03.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:08.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:13.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:15.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:18.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:23.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:28.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:33.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:38.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:43.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:48.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:53.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:58:58.278Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:03.244Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:08.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:13.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:18.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:23.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:28.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:33.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:38.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:43.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:48.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:50.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:50.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:53.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T03:59:58.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:03.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:06.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:07.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:08.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:13.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:15.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:18.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:23.243Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:28.264Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:33.346Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"67ca3dd2-ac3f-471d-9d80-4d542ee81e67\",\"job_id\":\"3dff2a1e-eb08-423b-a023-8923de643eba\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:00:38.279Z\",\"updated_at\":\"2024-11-07T04:00:38.279Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:00:38.317Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:00:38.339Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:00:38.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:38.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:39.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:43.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:48.790Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:00:38.279Z","error":null,"id":"67ca3dd2-ac3f-471d-9d80-4d542ee81e67","job_id":"3dff2a1e-eb08-423b-a023-8923de643eba","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"status":"completed","timestamp":"2024-11-07T04:00:51.250Z","type":"REALTIME","updated_at":"2024-11-07T04:00:38.279Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 67ca3dd2-ac3f-471d-9d80-4d542ee81e67 67ca3dd2-ac3f-471d-9d80-4d542ee81e67 on queue tasks with result 67ca3dd2-ac3f-471d-9d80-4d542ee81e67","timestamp":"2024-11-07T04:00:51.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:53.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:00:58.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:03.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:08.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:13.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:15.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:18.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:23.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:28.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:33.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:38.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:43.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:46.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:48.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:48.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:53.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:54.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:01:55.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:01.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:02.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:03.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:03.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:07.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:08.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:08.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:13.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:15.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:18.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:23.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:28.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:29.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:33.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:34.296Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"890d8184-0f16-4a04-ba24-8268407c5a06\",\"job_id\":\"c08dd1b9-0ece-4c06-9aa1-136e5f658980\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello how are you today?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:02:35.954Z\",\"updated_at\":\"2024-11-07T04:02:35.954Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:02:35.993Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:02:36.008Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:02:36.012Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:37.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:38.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:44.234Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:02:35.954Z","error":null,"id":"890d8184-0f16-4a04-ba24-8268407c5a06","job_id":"c08dd1b9-0ece-4c06-9aa1-136e5f658980","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello how are you today?"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello how are you today?"},"status":"completed","timestamp":"2024-11-07T04:02:46.579Z","type":"REALTIME","updated_at":"2024-11-07T04:02:35.954Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 890d8184-0f16-4a04-ba24-8268407c5a06 890d8184-0f16-4a04-ba24-8268407c5a06 on queue tasks with result 890d8184-0f16-4a04-ba24-8268407c5a06","timestamp":"2024-11-07T04:02:46.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:48.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:53.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:02:58.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:03.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:08.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:13.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:15.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:18.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:23.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:28.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:33.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:38.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:43.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:48.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:53.260Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:03:58.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:03.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:08.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:13.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:18.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:25.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:27.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:27.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:28.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:29.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:29.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:30.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:30.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:33.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:04:38.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:10.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:12.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:13.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:15.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:24.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:25.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:25.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:29.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:33.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:38.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:39.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:43.359Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"5f1efa48-5a3e-41d3-961e-ed6907c70f63\",\"job_id\":\"da51b949-a73f-44f6-b23d-a498dfe7dbc2\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:05:47.016Z\",\"updated_at\":\"2024-11-07T04:05:47.016Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:05:47.060Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:05:47.080Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:05:47.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:48.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:49.232Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:05:47.016Z","error":null,"id":"5f1efa48-5a3e-41d3-961e-ed6907c70f63","job_id":"da51b949-a73f-44f6-b23d-a498dfe7dbc2","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hello there"},"status":"completed","timestamp":"2024-11-07T04:05:51.342Z","type":"REALTIME","updated_at":"2024-11-07T04:05:47.016Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 5f1efa48-5a3e-41d3-961e-ed6907c70f63 5f1efa48-5a3e-41d3-961e-ed6907c70f63 on queue tasks with result 5f1efa48-5a3e-41d3-961e-ed6907c70f63","timestamp":"2024-11-07T04:05:51.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:53.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:05:58.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:03.288Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e547d28f-2afd-47ca-8546-ab2f26fd9b34\",\"job_id\":\"66d678c4-5618-46f1-8ad0-28e2b97d99d0\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"my name uis martiun you?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:06:07.931Z\",\"updated_at\":\"2024-11-07T04:06:07.931Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:06:07.955Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:06:07.970Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:06:07.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:08.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:09.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:14.224Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:06:07.931Z","error":null,"id":"e547d28f-2afd-47ca-8546-ab2f26fd9b34","job_id":"66d678c4-5618-46f1-8ad0-28e2b97d99d0","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"my name uis martiun you?"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"my name uis martiun you?"},"status":"completed","timestamp":"2024-11-07T04:06:14.761Z","type":"REALTIME","updated_at":"2024-11-07T04:06:07.931Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job e547d28f-2afd-47ca-8546-ab2f26fd9b34 e547d28f-2afd-47ca-8546-ab2f26fd9b34 on queue tasks with result e547d28f-2afd-47ca-8546-ab2f26fd9b34","timestamp":"2024-11-07T04:06:14.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:15.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:18.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:23.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:28.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:33.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:38.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:43.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:48.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:53.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:06:58.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:03.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:08.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:16.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:18.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:23.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:28.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:33.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:38.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:43.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:48.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:53.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:07:58.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:03.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:08.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:13.279Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:15.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:18.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:23.308Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:28.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:33.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:38.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:43.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:48.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:53.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:08:58.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:03.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:08.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:13.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:15.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:18.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:23.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:28.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:33.276Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:38.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:43.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:48.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:53.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:09:58.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:03.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:08.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:13.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:18.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:23.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:28.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:33.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:38.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:43.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:48.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:53.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:10:58.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:03.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:08.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:13.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:15.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:18.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:25.020Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:26.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:26.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:28.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:33.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:38.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:43.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:48.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:52.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:53.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:53.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:11:58.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:03.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:08.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:13.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:15.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:18.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:23.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:28.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:33.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:38.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:43.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:48.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:53.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:12:58.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:03.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:08.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:13.254Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:15.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:18.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:23.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:28.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:33.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:38.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:43.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:48.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:53.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:13:58.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:03.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:08.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:13.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:18.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:23.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:28.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:33.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:38.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:43.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:48.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:53.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:14:58.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:03.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:08.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:13.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:18.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:23.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:28.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:33.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:38.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:43.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:48.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:53.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:15:58.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:03.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:08.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:13.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:15.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:18.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:23.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:28.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:33.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:38.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:43.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:48.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:53.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:16:58.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:03.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:08.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:15.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:18.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:23.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:28.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:33.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:38.273Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:43.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:48.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:53.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:17:58.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:03.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:08.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:13.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:15.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:18.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:23.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:28.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:33.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:38.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:43.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:48.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:53.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:18:58.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:03.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:08.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:13.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:15.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:18.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:23.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:28.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:33.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:38.262Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:43.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:44.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:47.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:49.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:54.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:19:56.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:01.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:06.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:11.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:15.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:16.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:21.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:26.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:30.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:31.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:36.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:41.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:46.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:51.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:20:56.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:01.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:06.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:11.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:15.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:16.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:21.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:26.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:31.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:36.444Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:41.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:46.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:51.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:21:56.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:01.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:06.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:11.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:15.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:16.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:21.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:26.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:31.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:36.394Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"d25c2f6b-68ff-4da6-9120-7760462ef6f6\",\"job_id\":\"3ba3f887-c825-4edd-96bb-0b76520569d9\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:22:39.365Z\",\"updated_at\":\"2024-11-07T04:22:39.365Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:22:39.407Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:22:39.428Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:22:39.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:40.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:41.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:46.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:52.397Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:22:39.365Z","error":null,"id":"d25c2f6b-68ff-4da6-9120-7760462ef6f6","job_id":"3ba3f887-c825-4edd-96bb-0b76520569d9","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"status":"completed","timestamp":"2024-11-07T04:22:56.146Z","type":"REALTIME","updated_at":"2024-11-07T04:22:39.365Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job d25c2f6b-68ff-4da6-9120-7760462ef6f6 d25c2f6b-68ff-4da6-9120-7760462ef6f6 on queue tasks with result d25c2f6b-68ff-4da6-9120-7760462ef6f6","timestamp":"2024-11-07T04:22:56.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:22:56.689Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:01.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:06.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:11.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:15.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:16.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:21.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:26.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:31.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:36.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:41.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:46.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:51.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:23:56.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:01.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:06.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:11.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:16.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:21.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:26.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:31.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:36.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:41.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:43.229Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:46.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:51.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:24:56.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:01.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:06.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:11.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:15.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:16.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:21.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:26.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:31.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:36.452Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e25ffc72-7d8e-4581-a3cf-9f0a13e528c1\",\"job_id\":\"dcfdb385-cdf8-4ffd-8be3-e7bf204fa2af\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"fff\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:25:40.677Z\",\"updated_at\":\"2024-11-07T04:25:40.677Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:25:40.726Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:25:40.743Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:25:40.748Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:41.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:42.099Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:25:40.677Z","error":null,"id":"e25ffc72-7d8e-4581-a3cf-9f0a13e528c1","job_id":"dcfdb385-cdf8-4ffd-8be3-e7bf204fa2af","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fff"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"fff"},"status":"completed","timestamp":"2024-11-07T04:25:44.783Z","type":"REALTIME","updated_at":"2024-11-07T04:25:40.677Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job e25ffc72-7d8e-4581-a3cf-9f0a13e528c1 e25ffc72-7d8e-4581-a3cf-9f0a13e528c1 on queue tasks with result e25ffc72-7d8e-4581-a3cf-9f0a13e528c1","timestamp":"2024-11-07T04:25:44.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:46.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:51.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:25:56.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:01.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:06.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:11.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:15.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:21.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:26.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:31.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:36.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:41.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:46.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:51.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:26:56.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:01.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:06.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:11.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:15.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:16.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:21.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:26.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:31.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:36.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:41.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:46.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:51.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:27:56.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:01.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:06.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:11.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:15.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:21.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:26.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:31.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:36.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:41.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:46.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:51.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:28:56.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:01.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:06.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:11.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:15.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:16.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:16.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:21.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:26.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:31.366Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"07443cb7-3288-4bc5-b330-c84a8e38d42b\",\"job_id\":\"73fa0ff8-df16-4563-815b-1ba893df56f1\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:29:35.481Z\",\"updated_at\":\"2024-11-07T04:29:35.481Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:29:35.513Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:29:35.519Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:29:35.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:36.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:36.912Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:29:35.481Z","error":null,"id":"07443cb7-3288-4bc5-b330-c84a8e38d42b","job_id":"73fa0ff8-df16-4563-815b-1ba893df56f1","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hi"},"status":"completed","timestamp":"2024-11-07T04:29:39.237Z","type":"REALTIME","updated_at":"2024-11-07T04:29:35.481Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 07443cb7-3288-4bc5-b330-c84a8e38d42b 07443cb7-3288-4bc5-b330-c84a8e38d42b on queue tasks with result 07443cb7-3288-4bc5-b330-c84a8e38d42b","timestamp":"2024-11-07T04:29:39.242Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:41.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:46.055Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:46.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:51.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:29:56.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:01.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:06.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:11.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:15.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:16.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:21.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:26.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:31.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:36.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:41.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:46.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:51.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:30:56.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:01.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:06.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:11.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:15.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:16.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:21.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:26.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:31.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:36.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:41.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:46.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:51.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:31:56.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:01.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:06.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:08.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:09.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:13.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:14.246Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:14.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:16.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:17.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:17.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:21.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:22.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:24.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:24.228Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:26.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:30.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:31.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:32.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:33.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:34.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:34.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:36.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:41.388Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"88726bc5-39d4-4263-80b4-cde94030f56d\",\"job_id\":\"fbc27cee-9c45-47c7-8435-16ec093bc647\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"eeee\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:32:46.156Z\",\"updated_at\":\"2024-11-07T04:32:46.156Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:32:46.195Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:32:46.222Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:32:46.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:46.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:47.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:52.149Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:32:46.156Z","error":null,"id":"88726bc5-39d4-4263-80b4-cde94030f56d","job_id":"fbc27cee-9c45-47c7-8435-16ec093bc647","level":"verbose","message":"\n\nAfter Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"eeee"},"result":"Hello! It seems like you're typing \"eeee\" multiple times. How can I assist you today?","status":"completed","timestamp":"2024-11-07T04:32:53.211Z","type":"REALTIME","updated_at":"2024-11-07T04:32:46.156Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:32:46.156Z","error":null,"id":"88726bc5-39d4-4263-80b4-cde94030f56d","job_id":"fbc27cee-9c45-47c7-8435-16ec093bc647","level":"verbose","message":"\n\nd.result = ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"eeee"},"result":"Hello! It seems like you're typing \"eeee\" multiple times. How can I assist you today?","status":"completed","timestamp":"2024-11-07T04:32:53.212Z","type":"REALTIME","updated_at":"2024-11-07T04:32:46.156Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 88726bc5-39d4-4263-80b4-cde94030f56d 88726bc5-39d4-4263-80b4-cde94030f56d on queue tasks with result Hello! It seems like you're typing \"eeee\" multiple times. How can I assist you today?","timestamp":"2024-11-07T04:32:53.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:32:56.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:01.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:06.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:11.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:16.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:21.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:26.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:31.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:36.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:41.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:46.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:51.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:33:56.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:01.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:06.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:11.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:15.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:16.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:21.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:26.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:31.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:36.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:41.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:46.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:51.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:34:56.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:01.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:06.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:11.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:16.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:21.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:26.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:31.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:36.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:41.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:46.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:51.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:35:56.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:01.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:06.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:11.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:15.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:16.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:21.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:26.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:31.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:36.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:41.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:46.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:51.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:52.967Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:53.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:36:56.753Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"bfaeb7b1-910b-434b-a3d7-6829c7f19a5e\",\"job_id\":\"d9a7271e-0239-44c9-8c15-219d64696a6a\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ih\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:36:59.186Z\",\"updated_at\":\"2024-11-07T04:36:59.186Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:36:59.220Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:36:59.263Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:36:59.268Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:00.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:02.309Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:36:59.186Z","error":null,"id":"bfaeb7b1-910b-434b-a3d7-6829c7f19a5e","job_id":"d9a7271e-0239-44c9-8c15-219d64696a6a","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ih"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"ih"},"status":"completed","timestamp":"2024-11-07T04:37:03.339Z","type":"REALTIME","updated_at":"2024-11-07T04:36:59.186Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job bfaeb7b1-910b-434b-a3d7-6829c7f19a5e bfaeb7b1-910b-434b-a3d7-6829c7f19a5e on queue tasks with result bfaeb7b1-910b-434b-a3d7-6829c7f19a5e","timestamp":"2024-11-07T04:37:03.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:06.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:11.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:15.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:16.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:21.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:23.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:27.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:28.326Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"5d215621-a23d-401a-8580-10d884e50c27\",\"job_id\":\"12fb0491-7dc5-4d93-a5c7-ec20698cbe87\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"jo\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:37:29.964Z\",\"updated_at\":\"2024-11-07T04:37:29.964Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:37:29.986Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:37:29.998Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:37:30.004Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:31.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:32.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:37.156Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:37:29.964Z","error":null,"id":"5d215621-a23d-401a-8580-10d884e50c27","job_id":"12fb0491-7dc5-4d93-a5c7-ec20698cbe87","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"jo"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"jo"},"status":"completed","timestamp":"2024-11-07T04:37:41.059Z","type":"REALTIME","updated_at":"2024-11-07T04:37:29.964Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 5d215621-a23d-401a-8580-10d884e50c27 5d215621-a23d-401a-8580-10d884e50c27 on queue tasks with result 5d215621-a23d-401a-8580-10d884e50c27","timestamp":"2024-11-07T04:37:41.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:41.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:46.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:51.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:37:56.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:01.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:06.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:11.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:11.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:15.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:31.011Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:32.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:33.034Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:33.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:36.563Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"0d1ce5ef-4baa-45dd-9e1f-dd41638a0d17\",\"job_id\":\"4ad334b1-822f-48b2-b5c3-6a24d5fa4fb5\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hgfhg\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:38:39.644Z\",\"updated_at\":\"2024-11-07T04:38:39.644Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:38:39.681Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:38:39.701Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:38:39.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:40.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:42.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:47.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:52.034Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:38:57.112Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:38:39.644Z","error":null,"id":"0d1ce5ef-4baa-45dd-9e1f-dd41638a0d17","job_id":"4ad334b1-822f-48b2-b5c3-6a24d5fa4fb5","level":"verbose","message":"After Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hgfhg"},"result":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"hgfhg"},"status":"completed","timestamp":"2024-11-07T04:39:00.415Z","type":"REALTIME","updated_at":"2024-11-07T04:38:39.644Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 0d1ce5ef-4baa-45dd-9e1f-dd41638a0d17 0d1ce5ef-4baa-45dd-9e1f-dd41638a0d17 on queue tasks with result 0d1ce5ef-4baa-45dd-9e1f-dd41638a0d17","timestamp":"2024-11-07T04:39:00.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:01.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:07.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:10.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:11.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:15.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:19.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:20.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:25.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:30.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:36.234Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:40.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:45.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:50.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:55.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:58.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:39:59.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:01.018Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:05.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:10.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:12.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:20.932Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"0c89ea1a-dc8e-498e-a47a-269ce87b2228\",\"job_id\":\"519a2ceb-0235-494d-8d86-d8d47b0ef9f2\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"vbv\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:40:22.055Z\",\"updated_at\":\"2024-11-07T04:40:22.055Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:40:22.095Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:40:22.108Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:40:22.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:23.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:26.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:31.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:36.534Z"}
{"action":"SEND_MESSAGE","created_at":"2024-11-07T04:40:22.055Z","error":null,"id":"0c89ea1a-dc8e-498e-a47a-269ce87b2228","job_id":"519a2ceb-0235-494d-8d86-d8d47b0ef9f2","level":"verbose","message":"\n\nAfter Procesing Action. Rsult: ","payload":{"conversationId":"7a8b68cf-ccbc-4230-81c2-1924ff383382","message":"vbv"},"result":"I'm sorry, but \"vbv\" is not a recognized term or acronym in any language I know. Could you please provide more context or clarify what you mean? Are you referring to a specific topic, organization, or something else? Once I have more information, I'll be better able to assist you.","status":"completed","timestamp":"2024-11-07T04:40:41.525Z","type":"REALTIME","updated_at":"2024-11-07T04:40:22.055Z","user_id":"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea"}
{"level":"info","message":"Completed job 0c89ea1a-dc8e-498e-a47a-269ce87b2228 0c89ea1a-dc8e-498e-a47a-269ce87b2228 on queue tasks with result I'm sorry, but \"vbv\" is not a recognized term or acronym in any language I know. Could you please provide more context or clarify what you mean? Are you referring to a specific topic, organization, or something else? Once I have more information, I'll be better able to assist you.","timestamp":"2024-11-07T04:40:41.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:41.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:46.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:49.247Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:50.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:40:55.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:00.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:05.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:10.749Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:20.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:25.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:30.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:41:35.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:02.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:03.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:06.011Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:10.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:11.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:11.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:16.057Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"44098c3b-2fda-4565-9241-5ee24a089140\",\"job_id\":\"e389ebad-fef4-4743-84b8-e4e10d073399\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:42:19.309Z\",\"updated_at\":\"2024-11-07T04:42:19.309Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:42:19.328Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:42:19.342Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:42:19.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:20.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:21.767Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T04:42:23.702Z"}
{"level":"info","message":"Completed job 44098c3b-2fda-4565-9241-5ee24a089140 44098c3b-2fda-4565-9241-5ee24a089140 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T04:42:23.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:25.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:30.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:35.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:40.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:45.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:50.782Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:42:55.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:00.782Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:05.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:11.022Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:15.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:20.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:25.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:30.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:35.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:40.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:45.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:50.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:43:55.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:00.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:05.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:15.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:20.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:25.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:30.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:35.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:40.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:45.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:50.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:44:55.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:00.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:05.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:15.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:20.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:25.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:30.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:35.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:40.782Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:46.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:51.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:45:56.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:01.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:06.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:11.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:15.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:16.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:21.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:26.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:31.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:36.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:46:41.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:47:15.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:48:15.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:00.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:01.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:05.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:07.736Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:11.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:12.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:12.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:15.978Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"6f218827-c810-4da0-a19d-4440297bbbf5\",\"job_id\":\"1f566e72-f8c5-4326-9b73-690ac65538be\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello how are you ?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:49:18.334Z\",\"updated_at\":\"2024-11-07T04:49:18.334Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:49:18.350Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:49:18.364Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:49:18.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:19.214Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:20.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:25.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:31.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:36.588Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T04:49:40.247Z"}
{"level":"info","message":"Completed job 6f218827-c810-4da0-a19d-4440297bbbf5 6f218827-c810-4da0-a19d-4440297bbbf5 on queue tasks with result Hello! I'm just a computer program, so I don't have feelings, but I'm here and ready to help you. How can I assist you today?","timestamp":"2024-11-07T04:49:40.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:40.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:45.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:50.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:49:55.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:01.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:06.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:11.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:15.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:16.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:21.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:26.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:31.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:36.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:41.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:46.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:50:51.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:04.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:13.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:14.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:19.034Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:20.542Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:25.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:25.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:30.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:34.990Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:36.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:36.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:40.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:45.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:50.764Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"a69421d0-1a66-4476-b16f-6903351a4828\",\"job_id\":\"160bb56c-0ae7-4635-9dc3-1407ddb81120\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:51:51.442Z\",\"updated_at\":\"2024-11-07T04:51:51.442Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:51:51.472Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:51:51.482Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:51:51.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:52.718Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T04:51:55.050Z"}
{"level":"info","message":"Completed job a69421d0-1a66-4476-b16f-6903351a4828 a69421d0-1a66-4476-b16f-6903351a4828 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T04:51:55.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:51:55.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:00.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:06.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:16.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:16.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:21.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:25.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:30.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:35.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:40.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:45.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:50.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:52:55.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:01.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:05.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:15.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:20.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:25.746Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:30.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:35.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:40.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:45.783Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:50.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:53:55.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:00.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:05.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:10.772Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:15.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:20.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:25.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:30.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:35.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:40.783Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:45.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:50.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:54:57.027Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:01.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:05.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:10.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:15.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:20.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:25.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:30.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:35.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:40.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:45.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:50.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:55:55.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:00.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:05.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:10.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:15.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:20.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:25.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:30.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:35.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:40.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:45.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:50.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:56:55.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:00.975Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:05.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:15.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:38.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:39.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:42.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:45.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:46.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:49.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:50.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:52.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:55.802Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"3028ae46-b97b-42dc-848e-edbf569113c1\",\"job_id\":\"14f9e87a-42f4-4125-8bd7-7bb00e6fbcfe\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:57:55.944Z\",\"updated_at\":\"2024-11-07T04:57:55.944Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:57:55.960Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:57:55.975Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:57:55.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:57:56.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:01.275Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T04:58:06.205Z"}
{"level":"info","message":"Completed job 3028ae46-b97b-42dc-848e-edbf569113c1 3028ae46-b97b-42dc-848e-edbf569113c1 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T04:58:06.209Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:06.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:10.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:15.635Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"16d9fdbc-7821-4975-8cc2-27b423d28419\",\"job_id\":\"72c7a580-fdc6-4d0a-ae0c-2ab46358d1fa\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"well\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T04:58:18.651Z\",\"updated_at\":\"2024-11-07T04:58:18.651Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T04:58:18.666Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T04:58:18.683Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T04:58:18.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:19.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:21.588Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T04:58:22.533Z"}
{"level":"info","message":"Completed job 16d9fdbc-7821-4975-8cc2-27b423d28419 16d9fdbc-7821-4975-8cc2-27b423d28419 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T04:58:22.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:25.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:30.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:35.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:41.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:46.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:51.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:58:56.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:01.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:05.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:10.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:15.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:20.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:25.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:30.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:35.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:40.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:45.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:50.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T04:59:55.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:00.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:06.256Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:08.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:11.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:15.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:20.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:25.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:26.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:27.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:32.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:36.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:37.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:42.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:47.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:52.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:00:57.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:02.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:07.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:12.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:15.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:18.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:22.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:27.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:32.711Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:37.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:42.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:47.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:52.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:01:57.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:02.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:07.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:12.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:15.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:17.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:23.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:28.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:33.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:38.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:43.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:48.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:53.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:02:58.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:03:03.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:03:08.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:03:13.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:03:15.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:03:18.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:04:15.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:05:15.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:06:15.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:07:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:08:15.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:15.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:31.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:32.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:33.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:37.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:50.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:51.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:52.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:53.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:09:57.772Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"862d6856-7de6-410d-a579-96e29fd6a824\",\"job_id\":\"2bd35173-1853-4a14-bc2f-d22f71bd869f\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:10:02.512Z\",\"updated_at\":\"2024-11-07T05:10:02.512Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:10:02.547Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:10:02.565Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:10:02.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:02.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:03.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:08.242Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:10:13.174Z"}
{"level":"info","message":"Completed job 862d6856-7de6-410d-a579-96e29fd6a824 862d6856-7de6-410d-a579-96e29fd6a824 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T05:10:13.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:15.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:17.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:22.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:27.725Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:32.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:38.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:43.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:48.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:53.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:10:58.696Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:03.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:08.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:13.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:15.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:18.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:23.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:28.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:11:33.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:12:15.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:13:15.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:14:15.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:15:15.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:16:15.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:17:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:18:15.542Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:19:15.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:15.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:22.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:28.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:32.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:37.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:43.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:47.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:52.747Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:20:57.738Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:02.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:07.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:12.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:15.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:17.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:22.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:27.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:32.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:37.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:42.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:47.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:52.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:21:57.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:02.736Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:07.719Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:12.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:15.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:17.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:22.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:27.722Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:32.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:37.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:42.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:47.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:52.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:22:57.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:02.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:07.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:12.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:15.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:17.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:22.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:27.736Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:32.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:37.747Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:42.747Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:47.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:52.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:23:57.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:02.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:08.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:13.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:15.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:17.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:22.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:27.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:32.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:37.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:42.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:47.719Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:52.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:24:57.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:02.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:07.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:12.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:15.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:17.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:22.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:27.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:32.782Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:37.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:42.979Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:47.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:52.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:25:57.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:02.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:07.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:12.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:15.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:17.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:22.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:27.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:33.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:37.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:42.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:47.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:52.723Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:26:57.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:02.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:07.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:12.711Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:15.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:17.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:22.730Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:27.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:32.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:37.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:42.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:47.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:52.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:27:57.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:02.716Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:07.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:12.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:17.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:22.739Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:27.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:32.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:37.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:42.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:44.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:45.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:46.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:48.031Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:48.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:51.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:52.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:52.998Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:28:57.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:03.017Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:16.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:17.281Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:18.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:20.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:20.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:22.003Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:22.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:23.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:23.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:24.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:24.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:29.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:34.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:39.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:40.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:42.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:44.018Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:44.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:45.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:46.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:47.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:48.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:49.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:49.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:50.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:52.000Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:52.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:53.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:29:58.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:08.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:09.534Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:12.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:15.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:17.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:19.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:24.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:25.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:28.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:33.998Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:34.968Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:35.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:38.450Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"064a2455-f76e-4809-8975-4dd3c5079ab3\",\"job_id\":\"ce2a30d2-ac70-48ba-9295-fe5f2b005419\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:30:41.520Z\",\"updated_at\":\"2024-11-07T05:30:41.520Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:30:41.532Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:30:41.553Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:30:41.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:42.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:43.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:48.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:53.716Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:30:54.436Z"}
{"level":"info","message":"Completed job 064a2455-f76e-4809-8975-4dd3c5079ab3 064a2455-f76e-4809-8975-4dd3c5079ab3 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T05:30:54.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:30:57.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:01.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:03.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:07.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:12.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:18.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:20.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:21.246Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:22.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:26.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:27.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:28.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:28.739Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:29.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:30.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:31.292Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:33.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:35.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:37.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:41.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:43.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:43.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:48.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:48.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:50.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:50.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:54.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:55.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:56.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:57.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:31:59.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:00.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:00.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:01.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:02.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:10.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:11.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:12.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:15.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:17.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:18.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:27.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:28.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:34.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:35.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:36.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:38.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:42.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:48.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:52.728Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"f8e65da6-a7b2-4055-89b5-88af82e30525\",\"job_id\":\"0d6ed17e-4f24-4073-8701-fee4fe482734\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hello my name is  martin. nice to meet you!\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:32:53.442Z\",\"updated_at\":\"2024-11-07T05:32:53.442Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:32:53.457Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:32:53.486Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:32:53.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:55.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:32:58.610Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:33:02.016Z"}
{"level":"info","message":"Completed job f8e65da6-a7b2-4055-89b5-88af82e30525 f8e65da6-a7b2-4055-89b5-88af82e30525 on queue tasks with result Hello Martin! It's nice to meet you too. How can I assist you today?","timestamp":"2024-11-07T05:33:02.021Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:02.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:07.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:12.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:15.620Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"fd45c5c9-e87d-4004-a4dc-2583018bfb6b\",\"job_id\":\"342f6da1-3af5-42c0-9dd4-d666cf1648b5\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"what can you tell me about th esky?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:33:17.210Z\",\"updated_at\":\"2024-11-07T05:33:17.210Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:33:17.220Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:33:17.253Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:33:17.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:18.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:18.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:23.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:28.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:33.571Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:33:38.357Z"}
{"level":"info","message":"Completed job fd45c5c9-e87d-4004-a4dc-2583018bfb6b fd45c5c9-e87d-4004-a4dc-2583018bfb6b on queue tasks with result The sky is the atmosphere of Earth as seen from the surface, and it appears blue due to Rayleigh scattering caused by the molecules in the air. It's often associated with various weather phenomena such as clouds, rain, snow, and thunderstorms. The study of the sky includes meteorology, astronomy, and environmental science.","timestamp":"2024-11-07T05:33:38.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:38.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:42.790Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"f98ef34a-4646-4c3f-883a-81fe23751fe1\",\"job_id\":\"3af9cbba-100b-431e-87ce-c9e24221dd56\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ok thanks\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:33:45.586Z\",\"updated_at\":\"2024-11-07T05:33:45.586Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:33:45.603Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:33:45.637Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:33:45.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:46.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:48.639Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:33:50.996Z"}
{"level":"info","message":"Completed job f98ef34a-4646-4c3f-883a-81fe23751fe1 f98ef34a-4646-4c3f-883a-81fe23751fe1 on queue tasks with result You're welcome! Is there anything else I can assist you with?","timestamp":"2024-11-07T05:33:50.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:52.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:33:57.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:02.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:07.748Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:12.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:17.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:22.724Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"624e5336-57f2-4ca7-840f-79fcf44748aa\",\"job_id\":\"a6d525e0-bf37-4d23-a595-c5b955e5d279\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"do you have  a name?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:34:22.755Z\",\"updated_at\":\"2024-11-07T05:34:22.755Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:34:22.785Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:34:22.815Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:34:22.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:23.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:28.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:33.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:38.477Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:34:39.905Z"}
{"level":"info","message":"Completed job 624e5336-57f2-4ca7-840f-79fcf44748aa 624e5336-57f2-4ca7-840f-79fcf44748aa on queue tasks with result I am Qwen, a pre-trained language model developed by Alibaba Cloud. My purpose is to assist users in generating various types of text, such as articles, stories, poems, and answering questions by using the natural language processing techniques. How can I assist you today?","timestamp":"2024-11-07T05:34:39.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:42.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:47.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:52.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:34:57.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:02.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:07.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:12.838Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"31661087-1861-4ae3-97fb-bbb4e9df0751\",\"job_id\":\"23d4e230-1e1f-4bd0-9f2a-970b5b502be8\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"do you dpoeak french ?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:35:14.728Z\",\"updated_at\":\"2024-11-07T05:35:14.728Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:35:14.763Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:35:14.782Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:35:14.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:16.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:16.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:18.525Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:35:21.384Z"}
{"level":"info","message":"Completed job 31661087-1861-4ae3-97fb-bbb4e9df0751 31661087-1861-4ae3-97fb-bbb4e9df0751 on queue tasks with result Oui, je parle français. Comment puis-je vous aider aujourd'hui ?","timestamp":"2024-11-07T05:35:21.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:22.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:27.716Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:32.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:37.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:42.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:47.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:52.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:35:57.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:02.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:07.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:12.934Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:15.504Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"cdb0f31a-4d52-4c57-a2ce-c071f3362fe3\",\"job_id\":\"9f2c99e3-ff87-4717-ae47-bb24ee50fa29\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"can you generate a react todolist component\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:36:17.781Z\",\"updated_at\":\"2024-11-07T05:36:17.781Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:36:17.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:17.822Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:36:17.832Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:36:17.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:19.052Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:23.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:28.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:33.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:38.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:43.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:48.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:53.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:36:58.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:03.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:07.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:09.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:11.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:16.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:18.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:23.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:28.696Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:31.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:44.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:46.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:48.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:53.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:37:58.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:03.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:08.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:14.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:18.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:23.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:28.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:33.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:38.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:43.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:48.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:53.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:38:58.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:03.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:08.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:13.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:18.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:23.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:28.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:33.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:39.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:44.318Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:39:47.156Z"}
{"level":"info","message":"Completed job cdb0f31a-4d52-4c57-a2ce-c071f3362fe3 cdb0f31a-4d52-4c57-a2ce-c071f3362fe3 on queue tasks with result Sure! Below is a simple example of a React to-do list component:\n\n```jsx\nimport React, { useState } from 'react';\n\nconst TodoList = () => {\n    // State to hold the list of todos and the new todo input value\n    const [todos, setTodos] = useState([]);\n    const [newTodo, setNewTodo] = useState('');\n\n    // Function to handle changes in the new todo input\n    const handleChange = (e) => {\n        setNewTodo(e.target.value);\n    };\n\n    // Function to add a new todo item\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (newTodo.trim() !== '') {\n            setTodos([...todos, { text: newTodo, completed: false }]);\n            setNewTodo('');\n        }\n    };\n\n    // Function to toggle the completion status of a todo\n    const toggleComplete = (index) => {\n        const updatedTodos = [...todos];\n        updatedTodos[index].completed = !updatedTodos[index].completed;\n        setTodos(updatedTodos);\n    };\n\n    // Function to remove a todo item\n    const handleDelete = (index) => {\n        const updatedTodos = todos.filter((_, i) => i !== index);\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <div>\n            <h1>Todo List</h1>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" value={newTodo} onChange={handleChange} placeholder=\"Add new todo...\" />\n                <button type=\"submit\">Add</button>\n            </form>\n\n            <ul>\n                {todos.map((todo, index) => (\n                    <li key={index} style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n                        <span onClick={() => toggleComplete(index)}>\n                            {todo.text}\n                        </span>\n                        <button onClick={() => handleDelete(index)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList;\n```\n\n### Explanation:\n\n1. **State Management**:\n   - `todos`: Holds the list of all todos.\n   - `newTodo`: Holds the value of the input field for adding new todos.\n\n2. **Event Handlers**:\n   - `handleChange`: Updates the `newTodo` state as the user types into the input field.\n   - `handleSubmit`: Prevents the form from submitting, adds a new todo to the list, and clears the input field.\n   - `toggleComplete`: Toggles the completion status of a todo item by marking it as completed or not.\n   - `handleDelete`: Removes a todo item from the list.\n\n3. **Rendering**:\n   - A form with an input field and a submit button for adding new todos.\n   - An unordered list (`ul`) that renders each todo item.\n     - Each todo item displays its text and has options to toggle completion or delete it.\n\nThis is a basic implementation, and you can extend it further by adding features such as persisting the todo list to local storage, filtering completed/uncompleted tasks, or improving the user interface.","timestamp":"2024-11-07T05:39:47.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:47.746Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:52.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:39:57.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:02.567Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"4b5171bd-af4b-4754-8dfc-d1d9e0401272\",\"job_id\":\"a203be00-b9e7-4b4a-a444-2459b29dd43d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"thanks\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T05:40:02.898Z\",\"updated_at\":\"2024-11-07T05:40:02.898Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T05:40:02.909Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T05:40:02.949Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T05:40:02.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:04.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:08.445Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T05:40:10.703Z"}
{"level":"info","message":"Completed job 4b5171bd-af4b-4754-8dfc-d1d9e0401272 4b5171bd-af4b-4754-8dfc-d1d9e0401272 on queue tasks with result You're welcome! If you have any more questions, feel free to ask. I'm here to help!","timestamp":"2024-11-07T05:40:10.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:12.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:17.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:22.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:27.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:31.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:38.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:42.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:47.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:52.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:40:57.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:02.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:07.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:12.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:17.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:22.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:27.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:32.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:37.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:42.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:47.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:53.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:41:57.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:02.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:07.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:12.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:17.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:23.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:28.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:33.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:38.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:43.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:47.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:53.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:42:58.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:03.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:08.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:13.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:18.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:23.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:28.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:32.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:37.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:43.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:48.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:53.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:43:58.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:03.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:08.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:13.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:18.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:23.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:28.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:33.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:44:38.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:45:16.026Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:46:15.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:46:49.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:46:52.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:46:57.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:03.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:07.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:12.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:17.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:23.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:28.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:33.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:38.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:43.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:48.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:53.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:47:58.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:48:03.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:48:08.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:48:13.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:48:18.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:49:15.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:50:15.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:51:15.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:15.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:34.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:37.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:42.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:47.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:52.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:52:57.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:02.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:08.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:13.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:18.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:23.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:27.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:32.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:37.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:44.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:48.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:53.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:53:58.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:03.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:08.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:13.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:18.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:23.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:28.542Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:54:33.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:55:15.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:56:15.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:57:15.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:58:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:15.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:17.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:22.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:27.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:32.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:37.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:42.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:47.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:52.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T05:59:57.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:02.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:07.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:12.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:17.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:22.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:27.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:32.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:37.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:42.531Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e69d5da4-fd87-4213-b6a1-fa95cc531fb3\",\"job_id\":\"a553cd35-a7b7-44ff-a9b1-5433a841146e\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"generate a markdown table exampel\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:00:43.852Z\",\"updated_at\":\"2024-11-07T06:00:43.852Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:00:43.878Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:00:43.900Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:00:43.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:44.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:47.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:52.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:00:58.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:03.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:08.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:13.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:18.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:23.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:28.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:33.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:38.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:43.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:48.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:53.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:01:58.246Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:01:59.419Z"}
{"level":"info","message":"Completed job e69d5da4-fd87-4213-b6a1-fa95cc531fb3 e69d5da4-fd87-4213-b6a1-fa95cc531fb3 on queue tasks with result Certainly! Below is an example of a Markdown table:\n\n```markdown\n| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| Row 1, Cell 1 | Row 1, Cell 2 | Row 1, Cell 3 |\n| Row 2, Cell 1 | Row 2, Cell 2 | Row 2, Cell 3 |\n| Row 3, Cell 1 | Row 3, Cell 2 | Row 3, Cell 3 |\n```\n\nWhen rendered, it will look like this:\n\n| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| Row 1, Cell 1 | Row 1, Cell 2 | Row 1, Cell 3 |\n| Row 2, Cell 1 | Row 2, Cell 2 | Row 2, Cell 3 |\n| Row 3, Cell 1 | Row 3, Cell 2 | Row 3, Cell 3 |\n\nFeel free to modify the content and structure as needed!","timestamp":"2024-11-07T06:01:59.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:02.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:07.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:12.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:17.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:22.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:28.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:33.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:38.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:43.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:48.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:53.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:02:58.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:03.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:08.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:13.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:18.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:23.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:31.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:33.940Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:36.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:39.031Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:42.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:43.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:44.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:45.267Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:47.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:48.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:51.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:52.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:03:58.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:03.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:34.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:35.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:37.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:39.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:40.229Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:43.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:48.105Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"05c97259-8d0e-4501-9ba5-351b8acd734e\",\"job_id\":\"c1801be9-2a7e-4a99-a633-921143ff94ef\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"grwar work\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:04:52.721Z\",\"updated_at\":\"2024-11-07T06:04:52.721Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:04:52.732Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:04:52.762Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:04:52.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:52.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:54.018Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:04:58.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:03.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:08.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:13.432Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:05:18.479Z"}
{"level":"info","message":"Completed job 05c97259-8d0e-4501-9ba5-351b8acd734e 05c97259-8d0e-4501-9ba5-351b8acd734e on queue tasks with result I apologize, but I'm not entirely sure what you mean by \"grwar work.\" This could be an error or typo. Could you please provide more context or clarify your question? Are you asking about:\n\n1. A specific type of work?\n2. A particular task or project?\n3. Something else entirely?\n\nIf you can give me more information, I'd be happy to help you better!","timestamp":"2024-11-07T06:05:18.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:18.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:22.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:27.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:32.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:37.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:42.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:47.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:52.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:05:57.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:02.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:07.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:12.580Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"a87d06c5-1320-4bcb-af1a-d1c82ced5000\",\"job_id\":\"39f8224e-c105-4378-a31c-f2fd24a33b8d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"ok\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:06:15.284Z\",\"updated_at\":\"2024-11-07T06:06:15.284Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:06:15.310Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:06:15.342Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:06:15.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:16.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:18.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:23.386Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:06:24.029Z"}
{"level":"info","message":"Completed job a87d06c5-1320-4bcb-af1a-d1c82ced5000 a87d06c5-1320-4bcb-af1a-d1c82ced5000 on queue tasks with result Hello! How can I assist you today? If you have any questions or need information, feel free to let me know.","timestamp":"2024-11-07T06:06:24.033Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:28.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:33.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:38.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:43.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:48.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:53.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:06:58.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:03.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:08.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:12.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:17.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:22.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:23.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:27.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:32.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:37.587Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"67f2e542-dd28-4aa0-8539-1ba4566f3c27\",\"job_id\":\"acbc5a98-aa39-4212-a972-0049b0606acc\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"yes, you remember my name?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:07:40.554Z\",\"updated_at\":\"2024-11-07T06:07:40.554Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:07:40.579Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:07:40.602Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:07:40.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:41.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:43.094Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:07:46.923Z"}
{"level":"info","message":"Completed job 67f2e542-dd28-4aa0-8539-1ba4566f3c27 67f2e542-dd28-4aa0-8539-1ba4566f3c27 on queue tasks with result Yes, I remember your name! How can I assist you today?","timestamp":"2024-11-07T06:07:46.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:47.694Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"e3b3350a-1491-42de-8eca-969f7999d6df\",\"job_id\":\"ef3fda1b-e271-424e-899f-8531baa4c283\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"what is it?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:07:50.098Z\",\"updated_at\":\"2024-11-07T06:07:50.098Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:07:50.105Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:07:50.128Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:07:50.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:51.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:53.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:07:58.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:03.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:08.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:13.409Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:08:13.851Z"}
{"level":"info","message":"Completed job e3b3350a-1491-42de-8eca-969f7999d6df e3b3350a-1491-42de-8eca-969f7999d6df on queue tasks with result Hello! I'm Qwen, an AI language model developed by Alibaba Cloud. My purpose is to assist users in generating human-like text based on the input and context provided. Whether you need help with answering questions, writing articles, generating creative content, or anything else that involves understanding and using language, I'm here to help! How can I assist you today?","timestamp":"2024-11-07T06:08:13.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:17.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:24.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:28.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:33.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:38.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:43.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:48.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:53.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:08:58.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:09:03.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:09:08.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:09:13.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:09:18.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:10:15.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:11:15.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:12:15.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:13:15.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:14:15.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:15.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:22.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:27.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:32.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:38.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:43.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:48.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:53.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:15:58.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:03.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:08.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:13.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:18.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:23.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:27.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:32.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:37.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:42.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:47.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:53.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:57.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:16:58.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:02.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:07.533Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:12.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:17.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:23.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:28.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:33.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:38.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:43.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:48.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:53.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:17:58.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:18:03.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:18:08.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:18:13.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:18:18.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:19:15.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:20:15.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:10.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:12.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:17.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:20.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:22.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:27.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:29.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:32.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:37.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:42.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:46.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:48.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:49.722Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:51.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:52.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:53.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:54.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:21:57.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:01.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:06.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:11.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:16.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:21.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:26.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:31.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:36.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:41.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:46.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:51.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:22:56.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:01.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:06.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:11.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:16.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:21.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:26.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:31.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:36.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:41.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:46.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:51.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:23:56.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:01.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:06.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:11.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:16.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:21.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:26.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:31.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:36.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:41.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:46.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:51.725Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:24:56.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:02.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:07.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:12.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:17.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:22.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:27.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:32.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:37.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:42.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:47.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:52.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:25:56.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:01.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:06.730Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:12.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:14.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:17.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:18.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:19.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:21.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:21.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:22.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:22.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:23.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:26.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:31.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:36.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:48.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:49.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:57.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:58.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:26:59.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:02.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:02.837Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"017b0df7-b731-4711-94b9-605be3c1fa78\",\"job_id\":\"f94752f8-e2ab-446d-81ab-1e329502cc05\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:27:06.245Z\",\"updated_at\":\"2024-11-07T06:27:06.245Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:27:06.282Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:27:06.365Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:27:06.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:06.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:07.248Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:11.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:17.090Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:27:20.572Z"}
{"level":"info","message":"Completed job 017b0df7-b731-4711-94b9-605be3c1fa78 017b0df7-b731-4711-94b9-605be3c1fa78 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-07T06:27:20.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:21.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:26.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:28.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:30.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:35.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:40.269Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:45.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:50.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:27:55.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:00.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:05.215Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:10.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:15.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:18.970Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:20.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:25.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:30.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:35.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:40.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:45.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:50.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:28:55.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:00.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:05.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:10.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:15.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:20.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:25.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:30.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:35.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:39.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:40.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:45.334Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"f4f3db71-d0b1-495f-8daf-b180ee1d4b6a\",\"job_id\":\"41938513-a863-4767-925c-0f5125960793\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:29:47.421Z\",\"updated_at\":\"2024-11-07T06:29:47.421Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:29:47.449Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:29:47.505Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:29:47.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:48.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:51.047Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:29:51.063Z"}
{"level":"info","message":"Completed job f4f3db71-d0b1-495f-8daf-b180ee1d4b6a f4f3db71-d0b1-495f-8daf-b180ee1d4b6a on queue tasks with result Hello! How can I help you today?","timestamp":"2024-11-07T06:29:51.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:29:55.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:00.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:05.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:10.217Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:15.164Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"86ba7338-a77e-4c96-b83c-82faad57eec9\",\"job_id\":\"c5769700-c875-4225-b88f-286525b00e36\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"7a8b68cf-ccbc-4230-81c2-1924ff383382\",\"message\":\"generate a js react todo component list\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-07T06:30:15.971Z\",\"updated_at\":\"2024-11-07T06:30:15.971Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-07T06:30:15.980Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-07T06:30:16.006Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-07T06:30:16.008Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:17.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:20.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:25.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:30.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:35.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:41.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:45.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:50.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:30:55.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:01.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:05.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:11.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:16.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:20.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:26.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:31.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:36.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:41.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:46.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:51.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:31:56.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:00.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:06.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:10.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:16.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:21.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:26.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:31.234Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:36.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:42.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:46.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:51.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:32:56.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:01.307Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-07T06:33:04.739Z"}
{"level":"info","message":"Completed job 86ba7338-a77e-4c96-b83c-82faad57eec9 86ba7338-a77e-4c96-b83c-82faad57eec9 on queue tasks with result Certainly! Below is an example of a simple React component for a to-do list:\n\n```jsx\nimport React from 'react';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      inputText: ''\n    };\n    \n    // Binding event handlers\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDeleteTodo = this.handleDeleteTodo.bind(this);\n  }\n\n  handleInputChange(event) {\n    this.setState({ inputText: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.inputText.trim() !== '') {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, { text: prevState.inputText, completed: false }],\n        inputText: ''\n      }));\n    }\n  }\n\n  handleDeleteTodo(index) {\n    this.setState(prevState => \n      ({ todos: prevState.todos.filter((_, i) => i !== index) })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.inputText}\n            onChange={this.handleInputChange}\n            placeholder=\"Add a new todo...\"\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        \n        <ul>\n          {this.state.todos.map((todo, index) => (\n            <li key={index}>\n              <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n                {todo.text}\n              </span>\n              <button onClick={() => this.handleDeleteTodo(index)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n```\n\nThis component includes the following features:\n1. An input field to add new tasks.\n2. A button to submit the new task (which adds it to the list).\n3. A list of todos that can be marked as completed and deleted.\n\nYou can use this component in your React application like so:\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './TodoList';\n\nconst App = () => (\n  <div>\n    <h1>My To-Do List</h1>\n    <TodoList />\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\nMake sure you have a proper setup for your React application, including `index.html`, `index.js` (or `App.js`), and other necessary dependencies.","timestamp":"2024-11-07T06:33:04.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:05.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:10.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:15.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:20.193Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:25.049Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:26.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:27.206Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:29.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:30.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:35.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:40.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:45.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:50.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:33:55.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:00.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:05.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:10.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:20.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:25.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:30.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:35.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:40.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:45.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:50.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:34:55.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:00.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:05.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:10.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:15.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:20.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:25.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:30.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:35.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:40.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:45.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:50.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:35:55.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:00.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:05.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:10.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:15.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:20.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:25.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:30.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:35.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:40.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:45.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:50.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:36:55.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:00.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:05.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:10.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:15.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:20.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:25.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:30.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:35.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:40.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:45.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:50.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:37:55.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:00.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:05.198Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:10.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:15.239Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:20.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:25.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:30.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:35.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:40.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:45.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:50.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:38:55.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:00.244Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:05.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:10.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:15.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:20.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:25.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:30.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:35.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:40.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:45.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:50.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:39:55.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:00.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:05.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:10.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:15.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:20.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:25.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:30.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:35.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:40.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:45.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:50.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:40:55.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:00.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:05.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:10.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:15.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:20.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:25.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:30.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:35.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:40.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:45.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:50.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:41:55.236Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:00.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:05.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:10.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:15.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:20.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:25.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:30.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:35.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:40.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:45.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:50.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:42:55.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:00.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:05.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:10.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:15.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:20.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:25.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:30.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:35.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:40.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:45.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:50.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:43:55.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:00.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:05.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:10.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:15.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:20.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:25.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:30.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:44:35.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:45:15.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:46:15.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:47:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:48:15.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:49:15.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:50:15.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:51:15.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:52:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:53:15.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:54:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:55:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:56:15.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:57:15.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:58:15.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T06:59:15.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:00:15.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:01:15.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:02:15.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:03:15.783Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:04:15.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:05:15.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:06:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:07:15.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:08:15.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:09:15.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:10:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:11:15.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:12:15.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:13:15.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:14:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:15:15.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:16:15.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:17:15.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:18:15.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:19:15.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:20:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:21:15.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:22:15.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:23:16.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:24:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:25:15.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:26:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:27:15.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:28:15.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:29:15.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:30:15.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:31:15.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:32:15.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:33:15.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:34:15.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:35:15.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:36:15.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:37:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:38:15.445Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:39:15.758Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:40:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:41:15.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:42:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:43:15.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:44:15.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:45:15.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:46:15.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:47:15.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:48:15.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:49:15.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:50:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:51:15.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:52:15.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:53:15.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:54:15.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:55:15.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:56:15.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:57:15.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:58:15.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T07:59:15.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:00:15.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:01:15.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:02:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:03:15.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:04:15.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:05:15.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:06:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:07:15.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:08:15.457Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:09:15.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:10:15.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:11:15.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:12:15.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:13:15.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:14:15.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:15:15.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:16:15.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:17:15.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:18:15.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:19:15.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:20:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:21:15.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:22:15.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:23:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:24:15.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:25:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:26:15.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:27:15.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:28:15.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:29:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:30:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:31:15.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:32:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:33:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:34:15.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:35:15.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:36:15.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:37:15.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:38:15.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:39:15.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:40:15.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:41:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:42:15.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:43:15.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:44:15.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:45:15.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:46:15.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:47:15.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:48:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:49:15.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:50:15.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:51:15.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:52:15.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:53:15.744Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:54:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:55:15.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:56:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:57:15.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:58:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T08:59:15.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:00:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:01:15.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:02:15.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:03:15.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:04:15.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:05:15.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:06:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:07:15.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:08:15.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:09:15.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:10:15.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:11:15.748Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:12:15.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:13:15.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:14:15.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:15:15.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:16:15.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:17:15.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:18:15.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:19:15.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:20:15.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:21:15.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:22:15.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:23:15.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:24:15.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:25:15.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:26:15.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:27:15.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:28:15.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:29:15.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:30:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:31:15.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:32:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:33:15.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:34:15.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:35:15.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:36:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:37:15.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:38:15.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:39:15.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:40:15.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:41:15.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:42:15.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:43:15.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:44:15.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:45:15.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:46:15.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:47:15.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:48:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:49:15.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:50:15.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:51:15.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:52:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:53:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:54:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:55:15.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:56:15.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:57:15.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:58:15.444Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T09:59:15.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:00:15.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:01:15.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:02:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:03:15.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:04:15.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:05:15.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:06:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:07:15.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:08:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:09:15.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:10:15.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:11:15.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:12:15.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:13:15.747Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:14:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:15:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:16:15.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:17:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:18:15.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:19:15.730Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:20:15.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:21:15.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:22:15.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:23:15.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:24:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:25:15.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:26:15.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:27:15.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:28:15.467Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:29:15.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:30:15.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:31:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:32:15.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:33:15.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:34:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:35:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:36:15.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:37:15.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:38:15.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:39:15.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:40:15.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:41:15.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:42:15.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:43:15.783Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:44:15.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:45:15.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:46:15.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:47:15.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:48:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:49:15.761Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:50:15.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:51:15.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:52:15.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:53:15.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:54:15.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:55:15.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:56:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:57:15.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:58:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T10:59:15.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:00:15.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:01:15.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:02:15.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:03:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:04:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:05:15.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:06:15.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:07:15.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:08:15.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:09:15.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:10:15.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:11:15.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:12:15.534Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:13:15.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:14:15.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:15:15.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:16:15.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:17:15.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:18:15.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:19:15.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:20:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:21:15.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:22:15.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:23:15.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:24:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:25:15.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:26:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:27:15.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:28:15.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:29:15.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:30:15.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:31:15.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:32:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:33:15.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:34:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:35:15.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:36:15.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:37:15.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:38:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:39:15.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:40:15.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:41:15.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:42:15.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:43:15.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:44:15.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:45:15.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:46:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:47:15.772Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:48:15.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:49:15.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:50:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:51:15.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:52:15.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:53:15.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:54:15.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:55:15.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:56:15.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:57:15.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:58:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T11:59:15.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:00:15.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:01:15.739Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:02:15.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:03:15.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:04:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:05:15.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:06:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:07:15.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:08:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:09:15.749Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:10:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:11:15.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:12:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:13:15.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:14:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:15:15.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:16:15.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:17:15.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:18:15.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:19:15.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:20:15.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:21:15.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:22:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:23:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:24:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:25:15.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:26:15.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:27:15.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:28:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:29:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:30:15.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:31:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:32:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:33:15.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:34:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:35:15.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:36:15.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:37:15.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:38:15.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:39:15.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:40:15.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:41:15.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:42:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:43:15.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:44:15.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:45:15.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:46:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:47:15.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:48:15.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:49:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:50:15.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:51:15.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:52:15.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:53:15.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:54:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:55:15.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:56:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:57:15.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:58:15.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T12:59:15.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:00:15.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:01:15.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:02:15.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:03:15.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:04:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:05:15.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:06:15.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:07:15.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:08:15.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:09:15.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:10:15.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:11:15.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:12:15.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:13:15.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:14:15.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:15:15.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:16:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:17:15.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:18:15.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:19:15.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:20:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:21:15.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:22:15.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:23:15.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:24:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:25:15.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:26:15.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:27:15.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:28:15.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:29:15.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:30:15.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:31:15.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:32:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:33:15.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:34:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:35:15.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:36:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:37:15.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:38:15.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:39:15.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:40:15.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:41:15.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:42:15.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:43:15.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:44:15.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:45:15.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:46:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:47:15.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:48:15.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:49:15.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:50:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:51:15.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:52:15.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:53:15.766Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:54:15.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:55:15.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:56:15.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:57:15.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:58:15.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T13:59:15.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:00:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:01:15.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:02:15.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:03:15.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:04:15.479Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:05:15.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:06:15.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:07:15.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:08:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:09:15.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:10:15.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:11:15.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:12:15.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:13:15.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:14:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:15:15.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:16:15.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:17:15.777Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:18:15.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:19:15.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:20:15.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:21:15.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:22:15.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:23:15.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:24:15.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:25:15.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:26:15.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:27:15.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:28:15.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:29:15.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:30:15.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:31:15.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:32:15.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:33:15.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:34:15.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:35:15.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:36:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:37:15.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:38:15.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:39:15.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:40:15.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:41:15.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:42:15.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:43:15.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:44:15.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:45:15.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:46:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:47:15.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:48:15.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:49:15.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:50:15.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:51:15.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:52:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:53:15.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:54:15.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:55:15.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:56:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:57:15.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:58:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T14:59:15.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:00:15.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:01:15.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:02:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:03:15.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:04:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:05:15.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:06:15.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:07:15.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:08:15.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:09:15.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:10:15.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:11:15.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:12:15.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:13:15.762Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:14:15.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:15:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:16:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:17:15.744Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:18:15.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:19:15.749Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:20:15.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:21:15.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:22:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:23:15.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:24:15.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:25:15.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:26:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:27:15.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:28:15.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:29:15.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:30:15.493Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:31:15.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:15.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:29.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:35.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:40.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:45.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:50.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:32:55.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:00.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:05.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:10.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:20.482Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:25.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:30.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:33:35.775Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:34:15.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:35:15.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:36:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:37:15.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:38:15.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:39:15.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:40:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:41:15.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:42:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:43:15.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:44:15.746Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:45:15.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:46:15.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:47:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:48:15.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:49:15.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:50:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:51:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:52:15.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:53:15.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:54:15.782Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:55:15.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:56:15.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:57:15.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:58:15.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T15:59:15.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:00:15.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:01:15.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:02:15.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:03:15.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:04:15.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:05:15.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:06:15.765Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:07:15.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:08:15.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:09:15.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:10:15.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:11:15.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:12:15.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:13:15.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:14:15.770Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:15:15.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:16:15.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:17:15.500Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:18:15.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:19:15.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:20:15.726Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:21:15.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:22:15.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:23:15.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:24:15.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:25:15.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:26:15.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:27:15.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:28:15.764Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:29:15.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:30:15.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:31:15.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:32:15.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:33:15.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:34:15.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:35:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:36:15.736Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:37:15.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:38:15.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:39:15.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:40:15.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:41:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:42:15.752Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:43:15.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:44:15.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:45:15.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:46:15.767Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:47:15.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:48:15.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:49:15.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:50:15.750Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:51:15.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:52:15.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:53:15.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:54:15.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:55:15.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:56:15.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:57:15.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:58:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T16:59:15.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:00:15.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:01:15.503Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:02:15.759Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:03:15.478Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:04:15.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:05:15.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:06:15.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:07:15.501Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:08:15.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:09:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:10:15.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:11:15.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:12:15.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:13:15.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:14:15.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:15:15.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:16:15.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:17:15.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:18:15.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:19:15.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:20:15.783Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:21:15.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:22:15.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:23:15.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:24:15.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:25:15.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:26:15.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:27:15.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:28:15.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:29:15.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:30:15.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:31:15.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:32:15.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:33:15.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:34:15.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:35:15.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:36:15.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:37:15.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:38:15.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:39:15.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:40:15.769Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:41:15.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:42:15.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:43:15.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:44:15.729Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:45:15.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:46:15.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:47:15.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:48:15.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:49:15.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:50:15.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:51:15.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:52:15.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:53:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:54:15.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:55:15.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:56:15.957Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:57:14.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:58:14.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T17:59:14.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:00:14.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:01:14.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:02:14.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:03:14.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:04:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:05:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:06:14.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:07:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:08:14.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:09:14.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:10:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:11:14.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:12:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:13:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:14:14.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:15:14.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:16:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:17:14.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:18:14.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:19:14.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:20:14.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:21:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:22:14.719Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:23:14.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:24:14.740Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:25:14.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:26:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:27:14.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:28:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:29:14.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:30:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:31:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:32:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:33:14.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:34:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:35:14.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:36:14.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:37:14.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:38:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:39:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:40:14.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:41:14.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:42:14.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:43:14.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:44:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:45:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:46:14.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:47:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:48:14.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:49:14.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:50:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:51:14.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:52:14.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:53:14.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:54:14.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:55:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:56:14.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:57:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:58:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T18:59:14.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:00:14.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:01:14.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:02:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:03:14.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:04:14.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:05:14.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:06:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:07:14.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:08:14.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:09:14.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:10:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:11:14.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:12:14.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:13:14.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:14:14.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:15:14.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:16:14.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:17:14.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:18:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:19:14.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:20:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:21:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:22:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:23:14.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:24:14.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:25:14.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:26:14.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:27:14.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:28:14.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:29:14.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:30:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:31:14.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:32:14.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:33:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:34:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:35:14.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:36:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:37:14.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:38:14.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:39:14.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:40:14.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:41:14.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:42:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:43:14.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:44:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:45:14.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:46:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:47:14.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:48:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:49:14.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:50:14.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:51:14.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:52:14.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:53:14.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:54:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:55:14.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:56:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:57:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:58:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T19:59:14.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:00:14.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:01:14.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:02:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:03:14.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:04:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:05:14.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:06:14.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:07:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:08:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:09:14.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:10:14.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:11:14.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:12:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:13:14.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:14:14.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:15:14.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:16:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:17:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:18:14.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:19:14.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:20:14.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:21:14.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:22:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:23:14.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:24:14.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:25:14.308Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:26:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:27:14.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:28:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:29:14.746Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:30:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:31:14.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:32:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:33:14.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:34:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:35:14.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:36:14.699Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:37:14.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:38:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:39:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:40:14.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:41:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:42:14.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:43:14.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:44:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:45:14.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:46:14.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:47:14.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:48:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:49:14.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:50:14.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:51:14.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:52:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:53:14.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:54:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:55:14.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:56:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:57:14.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:58:14.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T20:59:14.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:00:14.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:01:14.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:02:14.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:03:14.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:04:14.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:05:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:06:14.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:07:14.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:08:14.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:09:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:10:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:11:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:12:14.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:13:14.309Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:14:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:15:14.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:16:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:17:14.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:18:14.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:19:14.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:20:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:21:14.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:22:14.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:23:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:24:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:25:14.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:26:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:27:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:28:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:29:14.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:30:14.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:31:14.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:32:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:33:14.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:34:14.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:35:14.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:36:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:37:14.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:38:14.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:39:14.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:40:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:41:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:42:14.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:43:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:44:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:45:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:46:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:47:14.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:48:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:49:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:50:14.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:51:14.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:52:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:53:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:54:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:55:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:56:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:57:14.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:58:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T21:59:14.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:00:14.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:01:14.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:02:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:03:14.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:04:14.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:05:14.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:06:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:07:14.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:08:14.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:09:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:10:14.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:11:14.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:12:14.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:13:14.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:14:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:15:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:16:14.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:17:14.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:18:14.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:19:14.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:20:14.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:21:14.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:22:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:23:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:24:14.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:25:14.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:26:14.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:27:14.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:28:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:29:14.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:30:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:31:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:32:14.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:33:14.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:34:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:35:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:36:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:37:14.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:38:14.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:39:14.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:40:14.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:41:14.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:42:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:43:14.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:44:14.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:45:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:46:14.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:47:14.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:48:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:49:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:50:14.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:51:14.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:52:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:53:14.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:54:14.666Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:55:14.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:56:14.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:57:14.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:58:14.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T22:59:14.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:00:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:01:14.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:02:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:03:14.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:04:14.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:05:14.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:06:14.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:07:14.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:08:14.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:09:14.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:10:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:11:14.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:12:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:13:14.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:14:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:15:14.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:16:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:17:14.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:18:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:19:14.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:20:14.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:21:14.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:22:14.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:23:14.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:24:14.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:25:14.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:26:14.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:27:14.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:28:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:29:14.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:30:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:31:14.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:32:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:33:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:34:14.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:35:14.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:36:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:37:14.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:38:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:39:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:40:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:41:14.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:42:14.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:43:14.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:44:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:45:14.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:46:14.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:47:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:48:14.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:49:14.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:50:14.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:51:14.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:52:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:53:14.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:54:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:55:14.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:56:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:57:14.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:58:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-07T23:59:14.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:00:14.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:01:14.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:02:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:03:14.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:04:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:05:14.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:06:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:07:14.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:08:14.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:09:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:10:14.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:11:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:12:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:13:14.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:14:14.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:15:14.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:16:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:17:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:18:14.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:19:14.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:20:14.746Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:21:14.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:22:14.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:23:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:24:14.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:25:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:26:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:27:14.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:28:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:29:14.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:30:14.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:31:14.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:32:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:33:14.462Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:34:14.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:35:14.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:36:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:37:14.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:38:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:39:14.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:40:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:41:14.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:42:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:43:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:44:14.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:45:14.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:46:14.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:47:14.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:48:14.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:49:14.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:50:14.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:51:14.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:52:14.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:53:14.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:54:14.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:55:14.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:56:14.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:57:14.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:58:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T00:59:14.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:00:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:01:14.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:02:14.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:03:14.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:04:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:05:14.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:06:14.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:07:14.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:08:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:09:14.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:10:14.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:11:14.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:12:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:13:14.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:14:14.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:15:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:16:14.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:17:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:18:14.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:19:14.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:20:14.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:21:14.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:22:14.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:23:14.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:24:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:25:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:26:14.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:27:14.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:28:14.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:29:14.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:30:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:31:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:32:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:33:14.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:34:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:35:14.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:36:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:37:14.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:38:14.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:39:14.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:40:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:41:14.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:42:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:43:14.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:44:14.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:45:14.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:46:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:47:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:48:14.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:49:14.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:50:14.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:51:14.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:52:14.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:53:14.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:54:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:55:14.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:56:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:57:14.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:58:14.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T01:59:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:00:14.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:01:14.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:02:14.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:03:14.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:04:14.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:05:14.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:06:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:07:14.284Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:08:14.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:09:14.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:10:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:11:14.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:12:14.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:13:14.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:14:14.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:15:14.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:16:14.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:17:14.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:18:14.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:19:14.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:20:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:21:14.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:22:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:23:14.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:24:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:25:14.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:26:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:27:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:28:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:29:14.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:30:14.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:31:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:32:14.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:33:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:34:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:35:14.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:36:14.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:37:14.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:38:14.699Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:39:14.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:40:14.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:41:14.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:42:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:43:14.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:44:14.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:45:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:46:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:47:14.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:48:14.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:49:14.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:50:14.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:51:14.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:52:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:53:14.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:54:14.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:55:14.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:56:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:57:14.457Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:58:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T02:59:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:00:14.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:01:14.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:02:14.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:03:14.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:04:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:05:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:06:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:07:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:08:14.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:09:14.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:10:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:11:14.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:12:14.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:13:14.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:14:14.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:15:14.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:16:14.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:17:14.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:18:14.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:19:14.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:20:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:21:14.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:22:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:23:14.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:24:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:25:14.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:26:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:27:14.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:28:14.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:29:14.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:30:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:31:14.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:32:14.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:33:14.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:34:14.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:35:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:36:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:37:14.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:38:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:39:14.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:40:14.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:41:14.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:42:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:43:14.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:44:14.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:45:14.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:46:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:47:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:48:14.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:49:14.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:50:14.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:51:14.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:52:14.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:53:14.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:54:14.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:55:14.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:56:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:57:14.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:58:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T03:59:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:00:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:01:14.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:02:14.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:03:14.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:04:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:05:14.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:06:14.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:07:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:08:14.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:09:14.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:10:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:11:14.689Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:12:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:13:14.272Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:14:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:15:14.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:16:14.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:17:14.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:18:14.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:19:14.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:20:14.753Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:21:14.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:22:14.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:23:14.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:24:14.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:25:14.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:26:14.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:27:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:28:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:29:14.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:30:14.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:31:14.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:32:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:33:14.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:34:14.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:35:14.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:36:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:37:14.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:38:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:39:14.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:40:14.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:41:14.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:42:14.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:43:14.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:44:14.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:45:14.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:46:14.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:47:14.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:48:14.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:49:14.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:50:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:51:14.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:52:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:53:14.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:54:14.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:55:14.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:56:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:57:14.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:58:14.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T04:59:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:00:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:01:14.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:02:14.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:03:14.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:04:14.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:05:14.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:06:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:07:14.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:08:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:09:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:10:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:11:14.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:12:14.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:13:14.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:14:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:15:14.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:16:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:17:14.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:18:14.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:19:14.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:20:14.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:21:14.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:22:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:23:14.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:24:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:25:14.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:26:14.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:27:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:28:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:29:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:30:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:31:14.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:32:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:33:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:34:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:35:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:36:14.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:37:14.286Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:38:14.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:39:14.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:40:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:41:14.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:42:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:43:14.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:44:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:45:14.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:46:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:47:14.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:48:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:49:14.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:50:14.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:51:14.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:52:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:53:14.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:54:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:55:14.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:56:14.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:57:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:58:14.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T05:59:14.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:00:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:01:14.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:02:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:03:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:04:14.692Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:05:14.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:06:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:07:14.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:08:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:09:14.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:10:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:11:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:12:14.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:13:14.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:14:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:15:14.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:16:14.677Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:17:14.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:18:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:19:14.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:20:14.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:21:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:22:14.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:23:14.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:24:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:25:14.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:26:14.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:27:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:28:14.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:29:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:30:14.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:31:14.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:32:14.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:33:14.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:34:14.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:35:14.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:36:14.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:37:14.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:38:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:39:14.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:40:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:41:14.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:42:14.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:43:14.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:44:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:45:14.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:46:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:47:14.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:48:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:49:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:50:14.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:51:14.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:52:14.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:53:14.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:54:14.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:55:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:56:14.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:57:14.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:58:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T06:59:14.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:00:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:01:14.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:02:14.722Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:03:14.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:04:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:05:14.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:06:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:07:14.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:08:14.711Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:09:14.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:10:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:11:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:12:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:13:14.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:14:14.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:15:14.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:16:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:17:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:18:14.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:19:14.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:20:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:21:14.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:22:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:23:14.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:24:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:25:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:26:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:27:14.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:28:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:29:14.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:30:14.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:31:14.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:32:14.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:33:14.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:34:14.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:35:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:36:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:37:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:38:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:39:14.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:40:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:41:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:42:14.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:43:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:44:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:45:14.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:46:14.689Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:47:14.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:48:14.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:49:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:50:14.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:51:14.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:52:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:53:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:54:14.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:55:14.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:56:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:57:14.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:58:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T07:59:14.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:00:14.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:01:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:02:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:03:14.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:04:14.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:05:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:06:14.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:07:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:08:14.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:09:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:10:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:11:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:12:14.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:13:14.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:14:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:15:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:16:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:17:14.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:18:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:19:14.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:20:14.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:21:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:22:14.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:23:14.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:24:14.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:25:14.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:26:14.682Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:27:14.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:28:14.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:29:14.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:30:14.786Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:31:14.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:32:14.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:33:14.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:34:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:35:14.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:36:14.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:37:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:38:14.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:39:14.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:40:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:41:14.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:42:14.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:43:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:44:14.700Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:45:14.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:46:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:47:14.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:48:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:49:14.288Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:50:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:51:14.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:52:14.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:53:14.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:54:14.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:55:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:56:15.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:57:14.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:58:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T08:59:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:00:14.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:01:14.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:02:14.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:03:14.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:04:14.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:05:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:06:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:07:14.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:08:14.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:09:14.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:10:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:11:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:12:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:13:14.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:14:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:15:14.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:16:14.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:17:14.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:18:14.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:19:14.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:20:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:21:14.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:22:14.748Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:23:14.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:24:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:25:14.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:26:14.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:27:14.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:28:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:29:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:30:14.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:31:14.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:32:14.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:33:14.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:34:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:35:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:36:14.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:37:14.297Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:38:14.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:39:14.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:40:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:41:14.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:42:14.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:43:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:44:14.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:45:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:46:14.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:47:14.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:48:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:49:14.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:50:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:51:14.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:52:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:53:14.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:54:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:55:14.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:56:14.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:57:14.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:58:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T09:59:14.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:00:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:01:14.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:02:14.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:03:14.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:04:14.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:05:14.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:06:14.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:07:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:08:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:09:14.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:10:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:11:14.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:12:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:13:14.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:14:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:15:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:16:14.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:17:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:18:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:19:14.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:20:14.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:21:14.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:22:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:23:14.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:24:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:25:14.283Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:26:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:27:14.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:28:14.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:29:14.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:30:14.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:31:14.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:32:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:33:14.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:34:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:35:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:36:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:37:14.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:38:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:39:14.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:40:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:41:14.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:42:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:43:14.277Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:44:14.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:45:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:46:14.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:47:14.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:48:14.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:49:14.291Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:50:14.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:51:14.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:52:14.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:53:14.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:54:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:55:14.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:56:14.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:57:14.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:58:14.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T10:59:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:00:14.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:01:14.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:02:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:03:14.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:04:14.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:05:14.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:06:14.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:07:14.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:08:14.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:09:14.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:10:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:11:14.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:12:14.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:13:14.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:14:14.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:15:14.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:16:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:17:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:18:14.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:19:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:20:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:21:14.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:22:14.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:23:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:24:14.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:25:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:26:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:27:14.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:28:14.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:29:14.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:30:14.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:31:14.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:32:14.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:33:14.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:34:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:35:14.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:36:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:37:14.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:38:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:39:14.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:40:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:41:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:42:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:43:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:44:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:45:14.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:46:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:47:14.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:48:14.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:49:14.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:50:14.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:51:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:52:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:53:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:54:14.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:55:14.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:56:14.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:57:14.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:58:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T11:59:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:00:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:01:14.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:02:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:03:14.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:04:14.670Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:05:14.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:06:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:07:14.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:08:14.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:09:14.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:10:14.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:11:14.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:12:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:13:14.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:14:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:15:14.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:16:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:17:14.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:18:14.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:19:14.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:20:14.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:21:14.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:22:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:23:14.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:24:14.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:25:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:26:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:27:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:28:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:29:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:30:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:31:14.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:32:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:33:14.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:34:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:35:14.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:36:14.685Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:37:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:38:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:39:14.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:40:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:41:14.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:42:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:43:14.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:44:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:45:14.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:46:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:47:14.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:48:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:49:14.270Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:50:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:51:14.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:52:14.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:53:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:54:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:55:14.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:56:14.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:57:14.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:58:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T12:59:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:00:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:01:14.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:02:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:03:14.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:04:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:05:14.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:06:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:07:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:08:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:09:14.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:10:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:11:14.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:12:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:13:14.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:14:14.710Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:15:14.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:16:14.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:17:14.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:18:14.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:19:14.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:20:14.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:21:14.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:22:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:23:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:24:14.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:25:14.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:26:14.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:27:14.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:28:14.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:29:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:30:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:31:14.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:32:14.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:33:14.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:34:14.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:35:14.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:36:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:37:14.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:38:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:39:14.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:40:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:41:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:42:14.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:43:14.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:44:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:45:14.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:46:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:47:14.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:48:14.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:49:14.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:50:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:51:14.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:52:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:53:14.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:54:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:55:14.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:56:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:57:14.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:58:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T13:59:14.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:00:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:01:14.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:02:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:03:14.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:04:14.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:05:14.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:06:14.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:07:14.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:08:14.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:09:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:10:14.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:11:14.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:12:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:13:14.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:14:14.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:15:14.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:16:14.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:17:14.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:18:14.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:19:14.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:20:14.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:21:14.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:22:14.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:23:14.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:24:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:25:14.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:26:14.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:27:14.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:28:14.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:29:14.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:30:14.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:31:14.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:32:14.677Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:33:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:34:14.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:35:14.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:36:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:37:14.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:38:14.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:39:14.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:40:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:41:14.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:42:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:43:14.303Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:44:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:45:14.465Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:46:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:47:14.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:48:14.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:49:14.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:50:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:51:14.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:52:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:53:14.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:54:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:55:14.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:56:14.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:57:14.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:58:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T14:59:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:00:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:01:14.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:02:14.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:03:14.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:04:14.702Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:05:14.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:06:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:07:14.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:08:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:09:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:10:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:11:14.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:12:14.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:13:14.305Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:14:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:15:14.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:16:14.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:17:14.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:18:14.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:19:14.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:20:14.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:21:14.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:22:14.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:23:14.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:24:14.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:25:14.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:26:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:27:14.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:28:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:29:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:30:14.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:31:14.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:32:14.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:33:14.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:34:14.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:35:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:36:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:37:14.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:38:14.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:39:14.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:40:14.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:41:14.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:42:14.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:43:14.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:44:14.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:45:14.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:46:14.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:47:14.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:48:14.566Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:49:14.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:50:14.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:51:14.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:52:14.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:53:14.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:54:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:55:14.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:56:14.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:57:14.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:58:14.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T15:59:14.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:00:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:01:14.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:02:14.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:03:14.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:04:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:05:14.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:06:14.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:07:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:08:15.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:09:14.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:10:14.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:11:14.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:12:14.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:13:14.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:14:14.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:15:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:16:14.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:17:14.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:18:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:19:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:20:14.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:21:14.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:22:14.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:23:14.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:24:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:25:14.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:26:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:27:14.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:28:14.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:29:14.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:30:14.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:31:14.312Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:32:14.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:33:14.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:34:14.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:35:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:36:14.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:37:14.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:38:14.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:39:14.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:40:14.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:41:14.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:42:14.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:43:14.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:44:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:45:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:46:14.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:47:14.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:48:14.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:49:14.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:50:14.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:51:14.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:52:14.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:53:14.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:54:14.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:55:14.317Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:56:14.665Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:57:14.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:58:14.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T16:59:14.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:00:14.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:01:14.308Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:02:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:03:14.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:04:14.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:05:14.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:06:14.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:07:14.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:08:14.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:09:14.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:10:14.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:11:14.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:12:14.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:13:14.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:14:14.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:15:14.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:16:14.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:17:14.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:18:14.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:19:14.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:20:14.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:21:14.322Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:22:14.744Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:23:14.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:24:14.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:25:14.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:26:14.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:27:14.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:28:14.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:29:14.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:30:14.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:31:14.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:32:14.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:33:14.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:34:14.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:35:14.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:36:14.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:37:14.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:38:14.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:39:14.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:40:14.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:41:14.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:42:14.682Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:43:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:44:14.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:45:14.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:46:14.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:47:14.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:48:14.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:49:14.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:50:14.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:51:14.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:52:14.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:53:14.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:54:14.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:55:14.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:56:14.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:57:14.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:58:13.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T17:59:13.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:00:13.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:01:13.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:02:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:03:13.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:04:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:05:13.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:06:13.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:07:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:08:13.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:09:13.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:10:13.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:11:13.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:12:13.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:13:13.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:14:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:15:13.048Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:16:13.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:17:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:18:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:19:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:20:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:21:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:22:13.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:23:13.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:24:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:25:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:26:13.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:27:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:28:13.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:29:13.242Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:30:13.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:31:13.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:32:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:33:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:34:13.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:35:13.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:36:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:37:13.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:38:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:39:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:40:13.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:41:13.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:42:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:43:13.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:44:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:45:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:46:13.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:47:13.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:48:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:49:13.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:50:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:51:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:52:13.460Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:53:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:54:13.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:55:13.173Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:56:13.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:57:13.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:58:13.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T18:59:13.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:00:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:01:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:02:13.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:03:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:04:13.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:05:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:06:13.476Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:07:13.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:08:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:09:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:10:13.485Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:11:13.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:12:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:13:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:14:13.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:15:13.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:16:13.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:17:13.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:18:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:19:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:20:13.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:21:13.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:22:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:23:13.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:24:13.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:25:13.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:26:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:27:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:28:13.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:29:13.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:30:13.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:31:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:32:13.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:33:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:34:13.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:35:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:36:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:37:13.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:38:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:39:13.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:40:13.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:41:13.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:42:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:43:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:44:13.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:45:13.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:46:13.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:47:13.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:48:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:49:13.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:50:13.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:51:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:52:13.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:53:13.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:54:13.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:55:13.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:56:13.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:57:13.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:58:13.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T19:59:13.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:00:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:01:13.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:02:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:03:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:04:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:05:13.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:06:13.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:07:13.290Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:08:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:09:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:10:13.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:11:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:12:13.446Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:13:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:14:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:15:13.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:16:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:17:13.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:18:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:19:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:20:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:21:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:22:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:23:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:24:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:25:13.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:26:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:27:13.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:28:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:29:13.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:30:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:31:13.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:32:13.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:33:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:34:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:35:13.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:36:13.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:37:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:38:13.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:39:13.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:40:13.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:41:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:42:13.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:43:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:44:13.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:45:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:46:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:47:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:48:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:49:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:50:13.468Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:51:13.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:52:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:53:13.259Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:54:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:55:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:56:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:57:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:58:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T20:59:13.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:00:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:01:13.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:02:13.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:03:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:04:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:05:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:06:13.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:07:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:08:13.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:09:13.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:10:13.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:11:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:12:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:13:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:14:13.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:15:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:16:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:17:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:18:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:19:13.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:20:13.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:21:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:22:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:23:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:24:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:25:13.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:26:13.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:27:13.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:28:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:29:13.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:30:13.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:31:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:32:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:33:13.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:34:13.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:35:13.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:36:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:37:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:38:13.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:39:13.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:40:13.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:41:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:42:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:43:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:44:13.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:45:13.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:46:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:47:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:48:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:49:13.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:50:13.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:51:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:52:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:53:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:54:13.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:55:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:56:13.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:57:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:58:13.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T21:59:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:00:13.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:01:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:02:13.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:03:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:04:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:05:13.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:06:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:07:13.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:08:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:09:13.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:10:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:11:13.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:12:13.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:13:13.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:14:13.463Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:15:13.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:16:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:17:13.040Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:18:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:19:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:20:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:21:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:22:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:23:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:24:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:25:13.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:26:13.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:27:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:28:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:29:13.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:30:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:31:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:32:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:33:13.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:34:13.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:35:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:36:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:37:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:38:13.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:39:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:40:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:41:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:42:13.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:43:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:44:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:45:13.222Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:46:13.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:47:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:48:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:49:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:50:13.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:51:13.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:52:13.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:53:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:54:13.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:55:13.192Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:56:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:57:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:58:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T22:59:13.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:00:13.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:01:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:02:13.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:03:13.188Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:04:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:05:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:06:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:07:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:08:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:09:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:10:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:11:13.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:12:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:13:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:14:13.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:15:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:16:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:17:13.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:18:13.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:19:13.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:20:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:21:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:22:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:23:13.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:24:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:25:13.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:26:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:27:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:28:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:29:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:30:13.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:31:13.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:32:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:33:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:34:13.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:35:13.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:36:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:37:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:38:13.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:39:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:40:13.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:41:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:42:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:43:13.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:44:13.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:45:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:46:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:47:13.229Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:48:13.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:49:13.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:50:13.466Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:51:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:52:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:53:13.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:54:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:55:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:56:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:57:13.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:58:13.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-08T23:59:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:00:13.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:01:13.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:02:13.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:03:13.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:04:13.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:05:13.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:06:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:07:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:08:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:09:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:10:13.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:11:13.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:12:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:13:13.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:14:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:15:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:16:13.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:17:13.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:18:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:19:13.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:20:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:21:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:22:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:23:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:24:13.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:25:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:26:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:27:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:28:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:29:13.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:30:13.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:31:13.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:32:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:33:13.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:34:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:35:13.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:36:13.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:37:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:38:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:39:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:40:13.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:41:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:42:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:43:13.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:44:13.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:45:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:46:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:47:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:48:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:49:13.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:50:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:51:13.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:52:13.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:53:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:54:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:55:13.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:56:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:57:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:58:13.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T00:59:13.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:00:13.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:01:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:02:13.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:03:13.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:04:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:05:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:06:13.491Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:07:13.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:08:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:09:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:10:13.469Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:11:13.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:12:13.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:13:13.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:14:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:15:13.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:16:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:17:13.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:18:13.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:19:13.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:20:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:21:13.027Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:22:13.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:23:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:24:13.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:25:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:26:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:27:13.049Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:28:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:29:13.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:30:13.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:31:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:32:13.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:33:13.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:34:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:35:13.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:36:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:37:13.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:38:13.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:39:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:40:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:41:13.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:42:13.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:43:13.203Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:44:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:45:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:46:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:47:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:48:13.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:49:13.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:50:13.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:51:13.050Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:52:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:53:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:54:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:55:13.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:56:13.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:57:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:58:13.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T01:59:13.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:00:13.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:01:13.217Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:02:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:03:13.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:04:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:05:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:06:13.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:07:13.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:08:13.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:09:13.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:10:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:11:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:12:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:13:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:14:13.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:15:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:16:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:17:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:18:13.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:19:13.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:20:13.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:21:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:22:13.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:23:13.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:24:13.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:25:13.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:26:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:27:13.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:28:13.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:29:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:30:13.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:31:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:32:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:33:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:34:13.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:35:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:36:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:37:13.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:38:13.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:39:13.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:40:13.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:41:13.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:42:13.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:43:13.215Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:44:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:45:13.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:46:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:47:13.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:48:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:49:13.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:50:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:51:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:52:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:53:13.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:54:13.449Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:55:13.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:56:13.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:57:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:58:13.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T02:59:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:00:13.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:01:13.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:02:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:03:13.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:04:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:05:13.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:06:13.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:07:13.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:08:13.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:09:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:10:13.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:11:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:12:13.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:13:13.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:14:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:15:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:16:13.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:17:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:18:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:19:13.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:20:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:21:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:22:13.404Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:23:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:24:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:25:13.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:26:13.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:27:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:28:13.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:29:13.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:30:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:31:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:32:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:33:13.046Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:34:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:35:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:36:13.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:37:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:38:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:39:13.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:40:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:41:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:42:13.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:43:13.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:44:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:45:13.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:46:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:47:13.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:48:13.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:49:13.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:50:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:51:13.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:52:13.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:53:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:54:13.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:55:13.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:56:13.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:57:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:58:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T03:59:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:00:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:01:13.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:02:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:03:13.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:04:13.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:05:13.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:06:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:07:13.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:08:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:09:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:10:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:11:13.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:12:13.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:13:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:14:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:15:13.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:16:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:17:13.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:18:13.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:19:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:20:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:21:13.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:22:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:23:13.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:24:13.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:25:13.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:26:13.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:27:13.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:28:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:29:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:30:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:31:13.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:32:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:33:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:34:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:35:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:36:13.443Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:37:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:38:13.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:39:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:40:13.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:41:13.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:42:13.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:43:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:44:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:45:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:46:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:47:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:48:13.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:49:13.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:50:13.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:51:13.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:52:13.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:53:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:54:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:55:13.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:56:13.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:57:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:58:13.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T04:59:13.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:00:13.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:01:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:02:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:03:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:04:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:05:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:06:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:07:13.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:08:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:09:13.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:10:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:11:13.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:12:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:13:13.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:14:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:15:13.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:16:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:17:13.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:18:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:19:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:20:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:21:13.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:22:13.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:23:13.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:24:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:25:13.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:26:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:27:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:28:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:29:13.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:30:13.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:31:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:32:13.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:33:13.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:34:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:35:13.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:36:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:37:13.230Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:38:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:39:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:40:13.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:41:13.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:42:13.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:43:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:44:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:45:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:46:13.437Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:47:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:48:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:49:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:50:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:51:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:52:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:53:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:54:13.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:55:13.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:56:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:57:13.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:58:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T05:59:13.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:00:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:01:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:02:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:03:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:04:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:05:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:06:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:07:13.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:08:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:09:13.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:10:13.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:11:13.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:12:13.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:13:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:14:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:15:13.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:16:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:17:13.198Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:18:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:19:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:20:13.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:21:13.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:22:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:23:13.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:24:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:25:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:26:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:27:13.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:28:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:29:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:30:13.470Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:31:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:32:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:33:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:34:13.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:35:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:36:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:37:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:38:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:39:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:40:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:41:13.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:42:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:43:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:44:13.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:45:13.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:46:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:47:13.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:48:13.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:49:13.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:50:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:51:13.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:52:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:53:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:54:13.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:55:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:56:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:57:13.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:58:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T06:59:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:00:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:01:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:02:13.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:03:13.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:04:13.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:05:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:06:13.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:07:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:08:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:09:13.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:10:13.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:11:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:12:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:13:13.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:14:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:15:13.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:16:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:17:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:18:13.504Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:19:13.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:20:13.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:21:13.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:22:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:23:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:24:13.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:25:13.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:26:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:27:13.217Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:28:13.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:29:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:30:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:31:13.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:32:13.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:33:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:34:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:35:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:36:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:37:13.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:38:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:39:13.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:40:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:41:13.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:42:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:43:13.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:44:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:45:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:46:13.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:47:13.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:48:13.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:49:13.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:50:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:51:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:52:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:53:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:54:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:55:13.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:56:13.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:57:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:58:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T07:59:13.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:00:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:01:13.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:02:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:03:13.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:04:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:05:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:06:13.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:07:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:08:13.457Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:09:13.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:10:13.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:11:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:12:13.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:13:13.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:14:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:15:13.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:16:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:17:13.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:18:13.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:19:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:20:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:21:13.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:22:13.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:23:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:24:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:25:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:26:13.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:27:13.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:28:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:29:13.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:30:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:31:13.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:32:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:33:13.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:34:13.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:35:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:36:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:37:13.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:38:13.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:39:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:40:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:41:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:42:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:43:13.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:44:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:45:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:46:13.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:47:13.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:48:13.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:49:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:50:13.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:51:13.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:52:13.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:53:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:54:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:55:13.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:56:13.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:57:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:58:13.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T08:59:13.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:00:13.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:01:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:02:13.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:03:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:04:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:05:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:06:13.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:07:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:08:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:09:13.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:10:13.431Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:11:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:12:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:13:13.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:14:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:15:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:16:13.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:17:13.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:18:13.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:19:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:20:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:21:13.203Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:22:13.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:23:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:24:13.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:25:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:26:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:27:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:28:13.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:29:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:30:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:31:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:32:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:33:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:34:13.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:35:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:36:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:37:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:38:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:39:13.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:40:13.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:41:13.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:42:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:43:13.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:44:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:45:13.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:46:13.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:47:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:48:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:49:13.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:50:13.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:51:13.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:52:13.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:53:13.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:54:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:55:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:56:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:57:13.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:58:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T09:59:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:00:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:01:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:02:13.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:03:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:04:13.341Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:05:13.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:06:13.451Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:07:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:08:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:09:13.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:10:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:11:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:12:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:13:13.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:14:13.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:15:13.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:16:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:17:13.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:18:13.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:19:13.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:20:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:21:13.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:22:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:23:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:24:13.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:25:13.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:26:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:27:13.081Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:28:13.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:29:13.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:30:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:31:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:32:13.406Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:33:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:34:13.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:35:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:36:13.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:37:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:38:13.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:39:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:40:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:41:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:42:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:43:13.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:44:13.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:45:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:46:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:47:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:48:13.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:49:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:50:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:51:13.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:52:13.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:53:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:54:13.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:55:13.052Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:56:13.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:57:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:58:13.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T10:59:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:00:13.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:01:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:02:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:03:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:04:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:05:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:06:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:07:13.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:08:13.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:09:13.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:10:13.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:11:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:12:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:13:13.050Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:14:13.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:15:13.050Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:16:13.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:17:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:18:13.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:19:13.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:20:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:21:13.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:22:13.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:23:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:24:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:25:13.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:26:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:27:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:28:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:29:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:30:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:31:13.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:32:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:33:13.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:34:13.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:35:13.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:36:13.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:37:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:38:13.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:39:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:40:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:41:13.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:42:13.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:43:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:44:13.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:45:13.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:46:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:47:13.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:48:13.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:49:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:50:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:51:13.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:52:13.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:53:13.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:54:13.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:55:13.059Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:56:13.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:57:13.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:58:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T11:59:13.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:00:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:01:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:02:13.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:03:13.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:04:13.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:05:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:06:13.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:07:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:08:13.339Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:09:13.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:10:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:11:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:12:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:13:13.047Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:14:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:15:13.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:16:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:17:13.049Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:18:13.445Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:19:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:20:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:21:13.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:22:13.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:23:13.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:24:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:25:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:26:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:27:13.050Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:28:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:29:13.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:30:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:31:13.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:32:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:33:13.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:34:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:35:13.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:36:13.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:37:13.039Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:38:13.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:39:13.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:40:13.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:41:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:42:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:43:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:44:13.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:45:13.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:46:13.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:47:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:48:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:49:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:50:13.326Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:51:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:52:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:53:13.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:54:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:55:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:56:13.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:57:13.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:58:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T12:59:13.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:00:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:01:13.049Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:02:13.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:03:13.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:04:13.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:05:13.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:06:13.430Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:07:13.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:08:13.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:09:13.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:10:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:11:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:12:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:13:13.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:14:13.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:15:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:16:13.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:17:13.497Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:18:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:19:13.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:20:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:21:13.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:22:13.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:23:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:24:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:25:13.048Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:26:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:27:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:28:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:29:13.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:30:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:31:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:32:13.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:33:13.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:34:13.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:35:13.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:36:13.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:37:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:38:13.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:39:13.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:40:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:41:13.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:42:13.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:43:13.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:44:13.407Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:45:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:46:13.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:47:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:48:13.398Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:49:13.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:50:13.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:51:13.042Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:52:13.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:53:13.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:54:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:55:13.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:56:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:57:13.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:58:13.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T13:59:13.055Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:00:13.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:01:13.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:02:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:03:13.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:04:13.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:05:13.258Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:06:13.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:07:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:08:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:09:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:10:13.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:11:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:12:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:13:13.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:14:13.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:15:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:16:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:17:13.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:18:13.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:19:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:20:13.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:21:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:22:13.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:23:13.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:24:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:25:13.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:26:13.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:27:13.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:28:13.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:29:13.232Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:30:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:31:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:32:13.391Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:33:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:34:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:35:13.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:36:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:37:13.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:38:13.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:39:13.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:40:13.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:41:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:42:13.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:43:13.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:44:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:45:13.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:46:13.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:47:13.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:48:13.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:49:13.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:50:13.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:51:13.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:52:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:53:13.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:54:13.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:55:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:56:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:57:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:58:13.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T14:59:13.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:00:13.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:01:13.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:02:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:03:13.062Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:04:13.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:05:13.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:06:13.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:07:13.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:08:13.337Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:09:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:10:13.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:11:13.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:12:13.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:13:13.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:14:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:15:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:16:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:17:13.229Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:18:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:19:13.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:20:13.457Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:21:13.072Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:22:13.426Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:23:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:24:13.453Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:25:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:26:13.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:27:13.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:28:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:29:13.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:30:13.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:31:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:32:13.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:33:13.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:34:13.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:35:13.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:36:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:37:13.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:38:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:39:13.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:40:13.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:41:13.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:42:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:43:13.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:44:13.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:45:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:46:13.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:47:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:48:13.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:49:13.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:50:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:51:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:52:13.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:53:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:54:13.348Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:55:13.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:56:13.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:57:13.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:58:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T15:59:13.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:00:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:01:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:02:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:03:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:04:13.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:05:13.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:06:13.477Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:07:13.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:08:13.444Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:09:13.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:10:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:11:13.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:12:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:13:13.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:14:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:15:13.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:16:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:17:13.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:18:13.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:19:13.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:20:13.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:21:13.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:22:13.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:23:13.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:24:13.396Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:25:13.052Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:26:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:27:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:28:13.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:29:13.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:30:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:31:13.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:32:13.410Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:33:13.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:34:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:35:13.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:36:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:37:13.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:38:13.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:39:13.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:40:13.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:41:13.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:42:13.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:43:13.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:44:13.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:45:13.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:46:13.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:47:13.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:48:13.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:49:13.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:50:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:51:13.061Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:52:13.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:53:13.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:54:13.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:55:13.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:56:13.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:57:13.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:58:13.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T16:59:13.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:00:13.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:01:13.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:02:13.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:03:13.048Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:04:13.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:05:13.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:06:13.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:07:13.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:08:13.411Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:09:13.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:10:13.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:11:13.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:12:13.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:13:13.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:14:13.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:15:13.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:16:13.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:17:13.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:18:13.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:19:13.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:20:13.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:21:13.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:22:13.388Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:23:13.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:24:13.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:25:13.261Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:26:13.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:27:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:28:13.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:29:13.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:30:13.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:31:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:32:13.344Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:33:13.056Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:34:13.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:35:13.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:36:13.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:37:13.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:38:13.408Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:39:13.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:40:13.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:41:13.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:42:13.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:43:13.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:44:13.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:45:13.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:46:13.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:47:13.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:48:13.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:49:13.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:50:13.392Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:51:13.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:52:13.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:53:13.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:54:13.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:55:13.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:56:13.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:57:12.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:58:12.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T17:59:11.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:00:12.173Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:01:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:02:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:03:11.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:04:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:05:12.027Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:06:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:07:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:08:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:09:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:10:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:11:11.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:12:12.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:13:12.004Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:14:12.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:15:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:16:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:17:11.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:18:12.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:19:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:20:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:21:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:22:12.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:23:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:24:12.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:25:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:26:12.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:27:11.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:28:12.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:29:11.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:30:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:31:11.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:32:12.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:33:12.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:34:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:35:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:36:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:37:11.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:38:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:39:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:40:12.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:41:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:42:12.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:43:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:44:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:45:11.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:46:12.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:47:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:48:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:49:11.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:50:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:51:11.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:52:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:53:11.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:54:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:55:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:56:12.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:57:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:58:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T18:59:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:00:12.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:01:11.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:02:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:03:11.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:04:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:05:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:06:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:07:11.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:08:12.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:09:11.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:10:12.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:11:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:12:12.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:13:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:14:12.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:15:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:16:12.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:17:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:18:12.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:19:11.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:20:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:21:11.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:22:12.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:23:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:24:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:25:11.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:26:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:27:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:28:12.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:29:11.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:30:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:31:11.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:32:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:33:11.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:34:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:35:11.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:36:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:37:11.966Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:38:12.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:39:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:40:12.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:41:11.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:42:12.293Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:43:11.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:44:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:45:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:46:12.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:47:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:48:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:49:11.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:50:12.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:51:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:52:12.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:53:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:54:12.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:55:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:56:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:57:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:58:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T19:59:12.001Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:00:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:01:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:02:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:03:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:04:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:05:12.255Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:06:12.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:07:11.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:08:12.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:09:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:10:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:11:11.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:12:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:13:11.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:14:12.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:15:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:16:12.252Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:17:11.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:18:12.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:19:11.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:20:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:21:11.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:22:12.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:23:11.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:24:12.221Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:25:11.960Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:26:12.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:27:11.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:28:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:29:11.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:30:12.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:31:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:32:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:33:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:34:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:35:11.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:36:12.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:37:11.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:38:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:39:11.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:40:12.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:41:11.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:42:12.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:43:11.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:44:12.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:45:11.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:46:12.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:47:11.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:48:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:49:11.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:50:12.228Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:51:11.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:52:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:53:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:54:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:55:11.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:56:12.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:57:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:58:12.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T20:59:11.927Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:00:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:01:11.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:02:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:03:11.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:04:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:05:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:06:12.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:07:11.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:08:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:09:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:10:12.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:11:11.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:12:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:13:11.976Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:14:12.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:15:11.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:16:12.202Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:17:12.203Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:18:12.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:19:11.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:20:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:21:11.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:22:12.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:23:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:24:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:25:11.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:26:12.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:27:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:28:12.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:29:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:30:12.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:31:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:32:12.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:33:11.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:34:12.211Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:35:11.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:36:12.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:37:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:38:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:39:11.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:40:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:41:12.034Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:42:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:43:11.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:44:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:45:11.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:46:12.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:47:11.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:48:12.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:49:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:50:12.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:51:11.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:52:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:53:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:54:12.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:55:11.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:56:12.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:57:11.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:58:12.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T21:59:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:00:12.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:01:11.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:02:12.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:03:11.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:04:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:05:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:06:12.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:07:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:08:12.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:09:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:10:12.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:11:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:12:12.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:13:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:14:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:15:11.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:16:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:17:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:18:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:19:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:20:12.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:21:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:22:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:23:11.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:24:12.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:25:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:26:12.064Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:27:11.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:28:12.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:29:12.044Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:30:12.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:31:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:32:12.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:33:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:34:12.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:35:11.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:36:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:37:11.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:38:12.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:39:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:40:12.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:41:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:42:12.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:43:11.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:44:12.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:45:11.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:46:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:47:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:48:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:49:11.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:50:12.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:51:11.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:52:12.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:53:12.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:54:12.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:55:11.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:56:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:57:11.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:58:12.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T22:59:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:00:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:01:11.956Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:02:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:03:11.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:04:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:05:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:06:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:07:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:08:12.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:09:11.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:10:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:11:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:12:12.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:13:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:14:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:15:11.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:16:12.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:17:12.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:18:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:19:11.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:20:12.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:21:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:22:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:23:11.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:24:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:25:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:26:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:27:11.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:28:12.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:29:11.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:30:12.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:31:11.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:32:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:33:11.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:34:12.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:35:11.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:36:12.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:37:11.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:38:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:39:11.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:40:12.265Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:41:12.058Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:42:12.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:43:11.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:44:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:45:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:46:12.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:47:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:48:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:49:11.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:50:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:51:11.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:52:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:53:11.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:54:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:55:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:56:12.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:57:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:58:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-09T23:59:11.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:00:12.223Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:01:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:02:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:03:11.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:04:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:05:12.054Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:06:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:07:11.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:08:12.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:09:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:10:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:11:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:12:12.193Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:13:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:14:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:15:11.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:16:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:17:11.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:18:12.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:19:11.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:20:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:21:11.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:22:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:23:11.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:24:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:25:11.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:26:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:27:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:28:12.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:29:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:30:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:31:11.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:32:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:33:11.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:34:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:35:11.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:36:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:37:11.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:38:12.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:39:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:40:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:41:11.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:42:12.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:43:11.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:44:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:45:11.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:46:12.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:47:11.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:48:12.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:49:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:50:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:51:11.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:52:12.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:53:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:54:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:55:11.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:56:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:57:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:58:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T00:59:11.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:00:12.206Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:01:11.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:02:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:03:11.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:04:12.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:05:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:06:12.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:07:11.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:08:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:09:11.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:10:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:11:11.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:12:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:13:11.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:14:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:15:11.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:16:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:17:11.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:18:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:19:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:20:12.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:21:11.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:22:12.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:23:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:24:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:25:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:26:12.274Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:27:11.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:28:12.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:29:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:30:12.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:31:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:32:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:33:11.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:34:12.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:35:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:36:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:37:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:38:12.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:39:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:40:12.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:41:12.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:42:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:43:11.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:44:12.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:45:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:46:12.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:47:11.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:48:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:49:11.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:50:12.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:51:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:52:12.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:53:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:54:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:55:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:56:12.275Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:57:11.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:58:12.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T01:59:11.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:00:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:01:11.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:02:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:03:11.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:04:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:05:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:06:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:07:11.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:08:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:09:11.960Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:10:12.221Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:11:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:12:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:13:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:14:12.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:15:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:16:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:17:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:18:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:19:11.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:20:12.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:21:11.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:22:12.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:23:11.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:24:12.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:25:12.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:26:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:27:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:28:12.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:29:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:30:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:31:11.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:32:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:33:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:34:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:35:11.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:36:12.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:37:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:38:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:39:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:40:12.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:41:11.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:42:12.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:43:11.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:44:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:45:11.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:46:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:47:11.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:48:12.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:49:11.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:50:12.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:51:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:52:12.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:53:11.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:54:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:55:11.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:56:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:57:11.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:58:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T02:59:11.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:00:12.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:01:11.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:02:12.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:03:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:04:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:05:11.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:06:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:07:11.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:08:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:09:11.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:10:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:11:11.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:12:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:13:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:14:12.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:15:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:16:12.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:17:12.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:18:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:19:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:20:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:21:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:22:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:23:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:24:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:25:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:26:12.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:27:11.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:28:12.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:29:11.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:30:12.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:31:11.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:32:12.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:33:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:34:12.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:35:11.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:36:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:37:11.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:38:12.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:39:11.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:40:12.226Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:41:12.004Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:42:12.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:43:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:44:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:45:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:46:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:47:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:48:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:49:11.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:50:12.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:51:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:52:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:53:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:54:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:55:11.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:56:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:57:11.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:58:12.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T03:59:11.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:00:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:01:11.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:02:12.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:03:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:04:12.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:05:12.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:06:12.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:07:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:08:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:09:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:10:12.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:11:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:12:12.237Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:13:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:14:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:15:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:16:12.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:17:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:18:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:19:11.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:20:12.092Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:21:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:22:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:23:11.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:24:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:25:11.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:26:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:27:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:28:12.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:29:11.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:30:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:31:11.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:32:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:33:11.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:34:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:35:11.974Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:36:12.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:37:11.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:38:12.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:39:11.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:40:12.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:41:11.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:42:12.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:43:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:44:12.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:45:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:46:12.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:47:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:48:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:49:11.931Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:50:12.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:51:11.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:52:12.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:53:11.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:54:12.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:55:11.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:56:12.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:57:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:58:12.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T04:59:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:00:12.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:01:11.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:02:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:03:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:04:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:05:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:06:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:07:11.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:08:12.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:09:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:10:12.155Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:11:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:12:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:13:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:14:12.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:15:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:16:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:17:11.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:18:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:19:11.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:20:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:21:11.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:22:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:23:11.789Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:24:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:25:11.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:26:12.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:27:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:28:12.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:29:11.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:30:12.187Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:31:11.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:32:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:33:11.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:34:12.221Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:35:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:36:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:37:11.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:38:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:39:11.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:40:12.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:41:11.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:42:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:43:11.987Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:44:12.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:45:11.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:46:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:47:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:48:12.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:49:11.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:50:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:51:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:52:12.225Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:53:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:54:12.193Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:55:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:56:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:57:11.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:58:12.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T05:59:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:00:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:01:11.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:02:12.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:03:11.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:04:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:05:11.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:06:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:07:11.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:08:12.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:09:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:10:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:11:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:12:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:13:11.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:14:12.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:15:11.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:16:12.077Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:17:11.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:18:12.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:19:11.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:20:12.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:21:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:22:12.257Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:23:11.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:24:12.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:25:11.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:26:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:27:11.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:28:12.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:29:11.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:30:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:31:11.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:32:12.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:33:11.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:34:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:35:12.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:36:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:37:11.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:38:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:39:11.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:40:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:41:11.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:42:12.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:43:11.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:44:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:45:11.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:46:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:47:11.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:48:12.192Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:49:11.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:50:12.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:51:11.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:52:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:53:11.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:54:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:55:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:56:12.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:57:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:58:12.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T06:59:12.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:00:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:01:11.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:02:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:03:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:04:12.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:05:11.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:06:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:07:11.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:08:12.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:09:11.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:10:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:11:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:12:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:13:11.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:14:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:15:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:16:12.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:17:11.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:18:12.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:19:11.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:20:12.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:21:11.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:22:12.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:23:11.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:24:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:25:11.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:26:12.070Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:27:11.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:28:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:29:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:30:12.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:31:11.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:32:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:33:11.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:34:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:35:11.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:36:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:37:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:38:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:39:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:40:12.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:41:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:42:12.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:43:11.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:44:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:45:11.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:46:12.173Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:47:11.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:48:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:49:11.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:50:12.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:51:11.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:52:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:53:11.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:54:12.082Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:55:11.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:56:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:57:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:58:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T07:59:11.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:00:12.089Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:01:11.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:02:12.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:03:11.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:04:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:05:11.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:06:12.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:07:11.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:08:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:09:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:10:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:11:11.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:12:12.231Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:13:11.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:14:12.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:15:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:16:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:17:11.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:18:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:19:11.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:20:12.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:21:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:22:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:23:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:24:12.195Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:25:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:26:12.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:27:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:28:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:29:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:30:12.268Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:31:11.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:32:12.261Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:33:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:34:12.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:35:11.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:36:12.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:37:11.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:38:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:39:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:40:12.108Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:41:11.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:42:12.135Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:43:11.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:44:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:45:11.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:46:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:47:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:48:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:49:11.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:50:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:51:11.983Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:52:12.183Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:53:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:54:12.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:55:11.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:56:12.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:57:11.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:58:12.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T08:59:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:00:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:01:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:02:12.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:03:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:04:12.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:05:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:06:12.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:07:11.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:08:12.098Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:09:11.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:10:12.181Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:11:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:12:12.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:13:11.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:14:12.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:15:13.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:16:12.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:17:11.944Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:18:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:19:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:20:12.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:21:11.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:22:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:23:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:24:12.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:25:11.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:26:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:27:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:28:12.103Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:29:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:30:12.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:31:11.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:32:12.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:33:11.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:34:12.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:35:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:36:12.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:37:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:38:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:39:11.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:40:12.188Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:41:11.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:42:12.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:43:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:44:12.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:45:11.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:46:12.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:47:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:48:12.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:49:11.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:50:12.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:51:11.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:52:12.245Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:53:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:54:12.235Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:55:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:56:12.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:57:11.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:58:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T09:59:11.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:00:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:01:11.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:02:12.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:03:11.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:04:12.198Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:05:11.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:06:12.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:07:11.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:08:12.219Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:09:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:10:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:11:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:12:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:13:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:14:12.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:15:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:16:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:17:11.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:18:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:19:11.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:20:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:21:11.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:22:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:23:11.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:24:12.182Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:25:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:26:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:27:11.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:28:12.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:29:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:30:12.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:31:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:32:12.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:33:11.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:34:12.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:35:11.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:36:12.215Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:37:11.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:38:12.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:39:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:40:12.243Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:41:11.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:42:12.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:43:11.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:44:12.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:45:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:46:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:47:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:48:12.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:49:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:50:12.099Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:51:11.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:52:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:53:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:54:12.210Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:55:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:56:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:57:11.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:58:12.150Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T10:59:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:00:12.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:01:11.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:02:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:03:11.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:04:12.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:05:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:06:12.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:07:11.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:08:12.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:09:11.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:10:12.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:11:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:12:12.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:13:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:14:12.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:15:11.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:16:12.170Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:17:11.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:18:12.164Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:19:11.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:20:12.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:21:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:22:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:23:11.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:24:12.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:25:11.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:26:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:27:11.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:28:12.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:29:11.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:30:12.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:31:11.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:32:12.160Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:33:11.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:34:12.152Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:35:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:36:12.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:37:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:38:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:39:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:40:12.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:41:11.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:42:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:43:11.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:44:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:45:11.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:46:12.218Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:47:11.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:48:12.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:49:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:50:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:51:11.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:52:12.228Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:53:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:54:12.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:55:11.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:56:12.083Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:57:11.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:58:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T11:59:11.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:00:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:01:11.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:02:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:03:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:04:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:05:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:06:12.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:07:11.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:08:12.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:09:11.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:10:12.169Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:11:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:12:12.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:13:11.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:14:12.079Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:15:11.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:16:12.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:17:11.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:18:12.186Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:19:11.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:20:12.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:21:11.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:22:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:23:11.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:24:12.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:25:11.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:26:12.140Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:27:11.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:28:12.205Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:29:11.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:30:12.194Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:31:11.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:32:12.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:33:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:34:12.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:35:11.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:36:12.199Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:37:11.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:38:12.067Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:39:11.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:40:12.204Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:41:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:42:12.227Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:43:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:44:12.127Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:45:11.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:46:12.157Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:47:11.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:48:12.112Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:49:11.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:50:12.189Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:51:11.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:52:12.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:53:11.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:54:12.188Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:55:11.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:56:12.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:57:11.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:58:12.184Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T12:59:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:00:12.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:01:11.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:02:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:03:11.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:04:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:05:11.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:06:12.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:07:11.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:08:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:09:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:10:12.172Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:11:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:12:12.241Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:13:11.788Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:14:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:15:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:16:12.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:17:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:18:12.159Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:19:11.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:20:12.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:21:11.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:22:12.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:23:11.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:24:12.139Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:25:11.776Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:26:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:27:11.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:28:12.220Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:29:11.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:30:12.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:31:11.774Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:32:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:33:11.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:34:12.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:35:11.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:36:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:37:11.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:38:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:39:11.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:40:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:41:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:42:12.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:43:11.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:44:12.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:45:11.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:46:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:47:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:48:12.126Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:49:11.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:50:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:51:11.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:52:12.163Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:53:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:54:12.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:55:11.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:56:12.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:57:11.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:58:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T13:59:11.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:00:12.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:01:11.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:02:12.191Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:03:11.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:04:12.109Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:05:11.953Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:06:12.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:07:11.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:08:12.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:09:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:10:12.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:11:11.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:12:12.175Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:13:11.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:14:12.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:15:11.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:16:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:17:11.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:18:12.095Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:19:11.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:20:12.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:21:12.060Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:22:12.090Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:23:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:24:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:25:11.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:26:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:27:11.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:28:12.100Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:29:11.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:30:12.088Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:31:11.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:32:12.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:33:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:34:12.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:35:11.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:36:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:37:11.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:38:12.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:39:11.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:40:12.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:41:11.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:42:12.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:43:11.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:44:12.125Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:45:11.943Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:46:12.117Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:47:11.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:48:12.087Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:49:11.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:50:12.143Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:51:11.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:52:12.158Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:53:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:54:12.093Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:55:11.844Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:56:12.201Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:57:11.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:58:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T14:59:11.964Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:00:12.138Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:01:12.007Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:02:12.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:03:11.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:04:12.128Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:05:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:06:12.097Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:07:11.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:08:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:09:11.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:10:12.130Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:11:11.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:12:12.074Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:13:11.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:14:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:15:11.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:16:12.166Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:17:11.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:18:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:19:11.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:20:12.217Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:21:11.958Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:22:12.105Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:23:11.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:24:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:25:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:26:12.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:27:11.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:28:12.113Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:29:11.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:30:12.076Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:31:11.794Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:32:12.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:33:12.009Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:34:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:35:11.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:36:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:37:11.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:38:12.119Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:39:11.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:40:12.167Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:41:11.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:42:12.104Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:43:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:44:12.200Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:45:11.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:46:12.171Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:47:11.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:48:12.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:49:11.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:50:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:51:11.985Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:52:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:53:11.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:54:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:55:11.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:56:12.134Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:57:11.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:58:12.154Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T15:59:11.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:00:12.080Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:01:11.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:02:12.190Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:03:11.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:04:12.207Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:05:11.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:06:12.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:07:11.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:08:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:09:11.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:10:12.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:11:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:12:12.071Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:13:11.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:14:12.161Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:15:11.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:16:12.096Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:17:11.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:18:12.180Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:19:11.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:20:12.132Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:21:11.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:22:12.137Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:23:11.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:24:12.116Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:25:11.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:26:12.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:27:12.051Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:28:12.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:29:11.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:30:12.162Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:31:11.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:32:12.145Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:33:11.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:34:12.118Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:35:11.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:36:12.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:37:11.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:38:12.156Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:39:11.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:40:12.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:41:11.952Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:42:12.084Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:43:11.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:44:12.146Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:45:11.923Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:46:12.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:47:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:48:12.179Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:49:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:50:12.153Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:51:11.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:52:12.224Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:53:11.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:54:12.065Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:55:11.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:56:12.168Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:57:11.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:58:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T16:59:11.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:00:12.091Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:01:11.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:02:12.106Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:03:11.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:04:12.151Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:05:11.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:06:12.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:07:11.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:08:12.148Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:09:11.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:10:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:11:11.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:12:12.136Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:13:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:14:12.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:15:12.011Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:16:12.107Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:17:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:18:12.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:19:11.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:20:12.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:21:11.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:22:12.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:23:11.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:24:12.115Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:25:11.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:26:12.144Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:27:11.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:28:12.178Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:29:11.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:30:12.131Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:31:11.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:32:12.063Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:33:11.981Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:34:12.177Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:35:11.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:36:12.102Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:37:11.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:38:12.147Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:39:11.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:40:12.176Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:41:12.149Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:42:12.165Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:43:11.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:44:12.101Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:45:11.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:46:12.114Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:47:11.996Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:48:12.142Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:49:11.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:50:12.122Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:51:11.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:52:12.124Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:53:11.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:54:12.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:55:11.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:56:12.216Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:57:12.094Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:58:12.249Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T17:59:12.007Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:00:10.982Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:01:10.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:02:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:03:10.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:04:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:05:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:06:10.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:07:10.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:08:10.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:09:10.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:10:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:11:10.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:12:10.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:13:10.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:14:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:15:10.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:16:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:17:10.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:18:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:19:10.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:20:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:21:10.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:22:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:23:10.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:24:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:25:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:26:10.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:27:10.772Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:28:10.929Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:29:10.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:30:10.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:31:10.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:32:10.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:33:10.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:34:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:35:10.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:36:10.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:37:10.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:38:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:39:10.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:40:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:41:10.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:42:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:43:10.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:44:10.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:45:10.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:46:10.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:47:10.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:48:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:49:10.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:50:10.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:51:10.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:52:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:53:10.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:54:10.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:55:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:56:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:57:10.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:58:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T18:59:10.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:00:10.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:01:10.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:02:10.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:03:10.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:04:10.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:05:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:06:10.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:07:10.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:08:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:09:10.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:10:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:11:10.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:12:10.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:13:10.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:14:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:15:10.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:16:10.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:17:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:18:10.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:19:10.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:20:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:21:10.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:22:10.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:23:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:24:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:25:10.516Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:26:10.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:27:10.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:28:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:29:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:30:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:31:10.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:32:10.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:33:10.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:34:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:35:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:36:10.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:37:10.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:38:10.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:39:10.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:40:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:41:10.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:42:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:43:10.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:44:10.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:45:10.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:46:10.784Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:47:10.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:48:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:49:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:50:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:51:10.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:52:10.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:53:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:54:10.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:55:10.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:56:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:57:10.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:58:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T19:59:10.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:00:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:01:10.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:02:10.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:03:10.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:04:10.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:05:10.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:06:10.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:07:10.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:08:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:09:10.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:10:10.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:11:10.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:12:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:13:10.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:14:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:15:10.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:16:10.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:17:10.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:18:10.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:19:10.492Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:20:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:21:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:22:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:23:10.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:24:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:25:10.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:26:10.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:27:10.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:28:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:29:10.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:30:10.915Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:31:10.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:32:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:33:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:34:10.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:35:10.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:36:10.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:37:10.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:38:10.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:39:10.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:40:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:41:10.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:42:10.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:43:10.521Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:44:10.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:45:10.736Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:46:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:47:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:48:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:49:10.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:50:10.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:51:10.714Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:52:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:53:10.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:54:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:55:10.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:56:10.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:57:10.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:58:10.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T20:59:10.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:00:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:01:10.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:02:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:03:10.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:04:10.830Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:05:10.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:06:10.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:07:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:08:10.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:09:10.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:10:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:11:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:12:10.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:13:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:14:11.044Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:15:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:16:10.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:17:10.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:18:10.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:19:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:20:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:21:10.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:22:10.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:23:10.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:24:10.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:25:10.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:26:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:27:10.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:28:10.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:29:10.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:30:10.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:31:10.510Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:32:10.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:33:10.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:34:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:35:10.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:36:10.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:37:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:38:10.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:39:10.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:40:10.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:41:10.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:42:10.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:43:10.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:44:10.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:45:10.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:46:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:47:10.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:48:10.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:49:10.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:50:10.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:51:10.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:52:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:53:10.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:54:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:55:10.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:56:10.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:57:10.721Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:58:10.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T21:59:10.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:00:10.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:01:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:02:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:03:10.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:04:10.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:05:10.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:06:10.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:07:10.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:08:10.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:09:10.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:10:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:11:10.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:12:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:13:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:14:10.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:15:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:16:10.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:17:10.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:18:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:19:10.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:20:10.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:21:10.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:22:10.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:23:11.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:24:10.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:25:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:26:10.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:27:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:28:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:29:10.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:30:10.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:31:10.511Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:32:10.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:33:10.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:34:10.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:35:10.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:36:10.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:37:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:38:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:39:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:40:10.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:41:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:42:10.801Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:43:10.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:44:10.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:45:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:46:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:47:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:48:10.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:49:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:50:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:51:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:52:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:53:10.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:54:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:55:10.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:56:10.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:57:10.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:58:10.797Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T22:59:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:00:10.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:01:10.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:02:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:03:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:04:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:05:10.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:06:10.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:07:10.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:08:10.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:09:10.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:10:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:11:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:12:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:13:10.693Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:14:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:15:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:16:10.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:17:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:18:10.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:19:10.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:20:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:21:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:22:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:23:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:24:10.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:25:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:26:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:27:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:28:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:29:10.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:30:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:31:10.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:32:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:33:10.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:34:10.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:35:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:36:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:37:10.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:38:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:39:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:40:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:41:10.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:42:10.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:43:10.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:44:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:45:10.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:46:10.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:47:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:48:10.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:49:10.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:50:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:51:10.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:52:10.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:53:10.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:54:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:55:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:56:10.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:57:10.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:58:10.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-10T23:59:10.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:00:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:01:10.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:02:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:03:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:04:10.938Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:05:10.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:06:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:07:10.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:08:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:09:10.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:10:10.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:11:10.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:12:10.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:13:10.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:14:10.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:15:10.658Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:16:10.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:17:10.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:18:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:19:10.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:20:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:21:10.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:22:10.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:23:11.024Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:24:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:25:10.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:26:10.947Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:27:10.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:28:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:29:10.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:30:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:31:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:32:10.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:33:10.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:34:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:35:10.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:36:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:37:10.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:38:10.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:39:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:40:10.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:41:10.697Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:42:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:43:10.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:44:10.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:45:10.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:46:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:47:10.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:48:10.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:49:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:50:10.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:51:10.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:52:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:53:10.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:54:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:55:10.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:56:10.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:57:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:58:10.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T00:59:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:00:10.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:01:10.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:02:10.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:03:10.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:04:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:05:10.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:06:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:07:10.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:08:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:09:10.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:10:10.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:11:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:12:10.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:13:10.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:14:10.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:15:10.622Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:16:10.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:17:10.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:18:10.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:19:10.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:20:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:21:10.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:22:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:23:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:24:10.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:25:10.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:26:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:27:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:28:10.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:29:10.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:30:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:31:10.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:32:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:33:10.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:34:10.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:35:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:36:10.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:37:10.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:38:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:39:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:40:10.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:41:10.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:42:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:43:10.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:44:10.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:45:10.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:46:10.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:47:10.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:48:10.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:49:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:50:10.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:51:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:52:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:53:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:54:10.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:55:10.507Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:56:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:57:10.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:58:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T01:59:10.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:00:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:01:10.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:02:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:03:10.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:04:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:05:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:06:10.835Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:07:10.629Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:08:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:09:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:10:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:11:10.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:12:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:13:10.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:14:10.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:15:10.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:16:10.974Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:17:10.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:18:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:19:10.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:20:10.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:21:10.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:22:10.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:23:10.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:24:10.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:25:10.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:26:10.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:27:10.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:28:10.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:29:10.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:30:10.942Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:31:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:32:10.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:33:10.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:34:10.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:35:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:36:10.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:37:10.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:38:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:39:10.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:40:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:41:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:42:11.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:43:10.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:44:10.889Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:45:10.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:46:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:47:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:48:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:49:10.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:50:10.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:51:10.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:52:10.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:53:10.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:54:10.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:55:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:56:10.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:57:10.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:58:10.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T02:59:10.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:00:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:01:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:02:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:03:10.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:04:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:05:10.534Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:06:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:07:10.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:08:10.926Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:09:10.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:10:10.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:11:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:12:10.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:13:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:14:10.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:15:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:16:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:17:10.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:18:10.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:19:10.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:20:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:21:10.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:22:10.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:23:10.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:24:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:25:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:26:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:27:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:28:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:29:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:30:10.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:31:10.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:32:10.936Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:33:10.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:34:10.925Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:35:10.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:36:10.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:37:10.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:38:10.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:39:10.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:40:10.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:41:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:42:10.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:43:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:44:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:45:10.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:46:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:47:10.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:48:10.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:49:10.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:50:10.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:51:10.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:52:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:53:10.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:54:10.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:55:10.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:56:10.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:57:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:58:10.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T03:59:10.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:00:10.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:01:10.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:02:10.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:03:10.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:04:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:05:10.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:06:10.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:07:10.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:08:10.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:09:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:10:10.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:11:10.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:12:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:13:10.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:14:10.999Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:15:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:16:10.916Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:17:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:18:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:19:10.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:20:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:21:10.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:22:10.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:23:10.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:24:10.901Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:25:10.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:26:10.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:27:10.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:28:10.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:29:10.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:30:10.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:31:10.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:32:10.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:33:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:34:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:35:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:36:10.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:37:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:38:10.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:39:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:40:10.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:41:10.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:42:10.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:43:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:44:10.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:45:10.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:46:10.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:47:10.791Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:48:10.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:49:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:50:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:51:10.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:52:10.894Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:53:10.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:54:10.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:55:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:56:10.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:57:10.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:58:10.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T04:59:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:00:10.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:01:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:02:10.855Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:03:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:04:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:05:10.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:06:10.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:07:10.502Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:08:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:09:10.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:10:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:11:10.941Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:12:10.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:13:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:14:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:15:10.571Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:16:10.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:17:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:18:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:19:10.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:20:10.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:21:10.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:22:10.935Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:23:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:24:10.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:25:10.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:26:10.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:27:10.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:28:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:29:10.534Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:30:10.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:31:10.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:32:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:33:10.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:34:10.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:35:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:36:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:37:10.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:38:10.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:39:10.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:40:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:41:10.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:42:10.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:43:10.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:44:10.989Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:45:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:46:10.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:47:10.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:48:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:49:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:50:10.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:51:10.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:52:10.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:53:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:54:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:55:10.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:56:10.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:57:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:58:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T05:59:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:00:10.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:01:10.524Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:02:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:03:10.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:04:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:05:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:06:10.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:07:10.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:08:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:09:10.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:10:10.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:11:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:12:10.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:13:10.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:14:10.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:15:10.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:16:10.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:17:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:18:10.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:19:10.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:20:10.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:21:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:22:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:23:10.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:24:10.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:25:10.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:26:10.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:27:10.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:28:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:29:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:30:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:31:10.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:32:10.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:33:10.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:34:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:35:10.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:36:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:37:10.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:38:10.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:39:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:40:10.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:41:10.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:42:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:43:10.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:44:10.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:45:10.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:46:10.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:47:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:48:10.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:49:10.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:50:10.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:51:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:52:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:53:10.541Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:54:10.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:55:10.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:56:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:57:10.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:58:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T06:59:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:00:10.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:01:10.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:02:10.913Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:03:10.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:04:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:05:10.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:06:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:07:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:08:10.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:09:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:10:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:11:10.773Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:12:10.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:13:10.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:14:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:15:10.592Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:16:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:17:10.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:18:10.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:19:10.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:20:10.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:21:10.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:22:10.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:23:10.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:24:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:25:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:26:10.962Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:27:10.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:28:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:29:10.560Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:30:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:31:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:32:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:33:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:34:10.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:35:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:36:10.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:37:10.742Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:38:10.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:39:10.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:40:10.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:41:10.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:42:10.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:43:10.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:44:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:45:10.751Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:46:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:47:10.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:48:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:49:10.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:50:10.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:51:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:52:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:53:10.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:54:10.951Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:55:10.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:56:10.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:57:10.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:58:10.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T07:59:10.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:00:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:01:10.484Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:02:10.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:03:10.545Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:04:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:05:10.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:06:10.875Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:07:10.506Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:08:10.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:09:10.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:10:10.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:11:10.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:12:10.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:13:10.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:14:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:15:10.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:16:10.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:17:10.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:18:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:19:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:20:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:21:10.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:22:10.813Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:23:10.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:24:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:25:10.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:26:10.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:27:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:28:10.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:29:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:30:10.912Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:31:10.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:32:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:33:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:34:10.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:35:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:36:10.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:37:10.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:38:13.120Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:39:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:40:10.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:41:10.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:42:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:43:10.498Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:44:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:45:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:46:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:47:10.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:48:10.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:49:10.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:50:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:51:10.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:52:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:53:10.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:54:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:55:10.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:56:10.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:57:10.574Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:58:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T08:59:10.539Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:00:10.937Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:01:10.520Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:02:10.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:03:10.542Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:04:10.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:05:10.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:06:10.860Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:07:10.481Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:08:10.961Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:09:10.602Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:10:10.873Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:11:10.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:12:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:13:10.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:14:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:15:10.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:16:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:17:10.604Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:18:10.871Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:19:10.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:20:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:21:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:22:10.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:23:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:24:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:25:10.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:26:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:27:10.573Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:28:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:29:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:30:10.914Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:31:10.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:32:10.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:33:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:34:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:35:10.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:36:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:37:10.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:38:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:39:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:40:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:41:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:42:10.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:43:10.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:44:10.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:45:10.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:46:10.780Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:47:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:48:10.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:49:10.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:50:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:51:10.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:52:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:53:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:54:10.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:55:10.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:56:10.924Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:57:10.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:58:10.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T09:59:10.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:00:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:01:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:02:10.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:03:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:04:10.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:05:10.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:06:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:07:10.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:08:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:09:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:10:10.885Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:11:10.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:12:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:13:10.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:14:10.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:15:10.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:16:10.807Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:17:10.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:18:10.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:19:10.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:20:10.816Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:21:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:22:10.902Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:23:10.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:24:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:25:10.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:26:10.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:27:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:28:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:29:10.562Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:30:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:31:10.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:32:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:33:10.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:34:10.821Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:35:10.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:36:10.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:37:10.525Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:38:10.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:39:10.590Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:40:10.932Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:41:10.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:42:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:43:10.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:44:10.790Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:45:10.649Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:46:10.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:47:10.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:48:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:49:10.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:50:10.806Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:51:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:52:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:53:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:54:10.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:55:10.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:56:10.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:57:10.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:58:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T10:59:10.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:00:10.974Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:01:10.499Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:02:10.954Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:03:10.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:04:10.867Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:05:10.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:06:10.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:07:10.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:08:10.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:09:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:10:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:11:10.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:12:10.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:13:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:14:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:15:10.569Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:16:10.884Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:17:10.544Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:18:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:19:10.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:20:10.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:21:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:22:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:23:10.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:24:10.955Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:25:10.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:26:10.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:27:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:28:10.852Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:29:10.530Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:30:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:31:10.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:32:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:33:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:34:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:35:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:36:10.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:37:10.508Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:38:10.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:39:10.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:40:10.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:41:10.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:42:10.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:43:10.494Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:44:10.861Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:45:10.518Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:46:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:47:10.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:48:10.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:49:10.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:50:10.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:51:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:52:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:53:10.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:54:10.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:55:10.532Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:56:10.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:57:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:58:10.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T11:59:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:00:10.851Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:01:10.523Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:02:10.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:03:10.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:04:10.882Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:05:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:06:10.919Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:07:10.519Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:08:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:09:10.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:10:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:11:10.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:12:10.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:13:10.543Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:14:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:15:10.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:16:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:17:10.558Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:18:10.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:19:10.537Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:20:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:21:10.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:22:10.971Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:23:10.904Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:24:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:25:10.595Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:26:10.802Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:27:10.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:28:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:29:10.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:30:10.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:31:10.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:32:10.977Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:33:10.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:34:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:35:10.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:36:10.828Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:37:10.517Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:38:10.907Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:39:10.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:40:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:41:10.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:42:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:43:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:44:10.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:45:10.719Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:46:10.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:47:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:48:10.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:49:10.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:50:10.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:51:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:52:10.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:53:10.577Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:54:10.853Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:55:10.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:56:10.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:57:10.548Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:58:10.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T12:59:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:00:10.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:01:10.515Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:02:10.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:03:10.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:04:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:05:10.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:06:10.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:07:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:08:10.831Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:09:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:10:10.878Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:11:10.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:12:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:13:10.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:14:10.849Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:15:10.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:16:10.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:17:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:18:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:19:10.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:20:10.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:21:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:22:10.897Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:23:10.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:24:10.909Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:25:10.555Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:26:10.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:27:10.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:28:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:29:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:30:10.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:31:10.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:32:10.880Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:33:10.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:34:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:35:10.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:36:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:37:10.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:38:10.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:39:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:40:10.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:41:10.633Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:42:10.886Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:43:10.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:44:10.846Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:45:10.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:46:10.864Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:47:10.632Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:48:10.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:49:10.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:50:10.877Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:51:10.579Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:52:10.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:53:10.737Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:54:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:55:10.550Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:56:10.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:57:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:58:10.900Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T13:59:10.678Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:00:10.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:01:10.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:02:10.824Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:03:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:04:10.865Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:05:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:06:10.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:07:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:08:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:09:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:10:10.838Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:11:10.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:12:10.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:13:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:14:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:15:10.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:16:10.980Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:17:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:18:10.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:19:10.513Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:20:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:21:10.626Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:22:10.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:23:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:24:10.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:25:10.536Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:26:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:27:10.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:28:10.883Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:29:10.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:30:10.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:31:10.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:32:10.808Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:33:10.553Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:34:10.868Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:35:10.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:36:10.836Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:37:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:38:10.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:39:10.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:40:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:41:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:42:10.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:43:10.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:44:10.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:45:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:46:10.918Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:47:10.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:48:10.862Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:49:10.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:50:10.920Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:51:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:52:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:53:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:54:10.793Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:55:10.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:56:10.837Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:57:10.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:58:10.820Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T14:59:10.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:00:10.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:01:10.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:02:10.832Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:03:10.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:04:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:05:10.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:06:10.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:07:10.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:08:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:09:10.588Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:10:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:11:10.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:12:10.906Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:13:10.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:14:10.895Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:15:10.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:16:10.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:17:10.679Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:18:10.872Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:19:10.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:20:10.825Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:21:10.576Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:22:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:23:10.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:24:10.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:25:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:26:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:27:10.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:28:10.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:29:10.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:30:10.845Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:31:10.582Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:32:10.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:33:10.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:34:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:35:10.724Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:36:10.814Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:37:10.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:38:10.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:39:10.542Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:40:10.887Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:41:10.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:42:10.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:43:10.540Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:44:10.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:45:10.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:46:10.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:47:10.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:48:10.856Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:49:10.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:50:10.874Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:51:10.601Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:52:10.881Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:53:10.723Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:54:10.833Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:55:10.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:56:10.876Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:57:10.551Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:58:10.911Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T15:59:10.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:00:10.899Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:01:10.549Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:02:10.839Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:03:10.568Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:04:10.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:05:10.959Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:06:10.917Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:07:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:08:10.818Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:09:10.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:10:10.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:11:10.618Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:12:10.823Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:13:10.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:14:10.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:15:10.585Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:16:10.850Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:17:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:18:10.841Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:19:10.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:20:10.933Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:21:10.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:22:10.870Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:23:10.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:24:10.903Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:25:10.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:26:10.945Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:27:10.559Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:28:10.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:29:10.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:30:10.893Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:31:10.546Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:32:10.928Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:33:10.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:34:10.863Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:35:10.552Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:36:10.803Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:37:10.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:38:10.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:39:10.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:40:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:41:10.640Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:42:10.815Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:43:10.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:44:10.857Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:45:10.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:46:10.787Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:47:10.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:48:10.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:49:10.535Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:50:10.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:51:10.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:52:10.847Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:53:10.531Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:54:10.859Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:55:10.564Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:56:10.922Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:57:10.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:58:10.843Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T16:59:10.554Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:00:10.910Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:01:10.565Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:02:10.842Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:03:10.659Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:04:10.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:05:10.561Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:06:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:07:10.591Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:08:10.805Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:09:10.586Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:10:10.812Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:11:10.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:12:10.854Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:13:10.581Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:14:10.858Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:15:10.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:16:11.495Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:17:10.809Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:18:09.869Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:19:09.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:20:09.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:21:09.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:22:09.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:23:09.397Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:24:09.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:25:09.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:26:09.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:27:09.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:28:09.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:29:09.387Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:30:09.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:31:09.355Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:32:09.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:33:09.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:34:09.627Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:35:09.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:36:09.705Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:37:09.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:38:09.603Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:39:09.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:40:09.706Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:41:09.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:42:09.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:43:09.350Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:44:09.617Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:45:09.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:46:09.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:47:09.433Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:48:09.817Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:49:09.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:50:09.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:51:09.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:52:09.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:53:09.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:54:09.600Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:55:09.414Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:56:09.619Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:57:09.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:58:09.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T17:59:09.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:00:09.598Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:01:09.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:02:09.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:03:09.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:04:09.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:05:09.456Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:06:09.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:07:09.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:08:09.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:09:09.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:10:09.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:11:09.419Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:12:09.607Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:13:09.316Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:14:09.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:15:09.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:16:09.645Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:17:09.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:18:09.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:19:09.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:20:09.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:21:09.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:22:09.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:23:09.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:24:09.605Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:25:09.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:26:09.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:27:09.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:28:09.677Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:29:09.610Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:30:09.575Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:31:09.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:32:09.727Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:33:09.490Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:34:09.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:35:09.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:36:09.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:37:09.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:38:09.639Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:39:09.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:40:09.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:41:09.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:42:09.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:43:09.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:44:09.834Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:45:09.403Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:46:09.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:47:09.486Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:48:09.698Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:49:09.300Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:50:09.661Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:51:09.435Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:52:09.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:53:09.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:54:09.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:55:09.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:56:09.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:57:09.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:58:09.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T18:59:09.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:00:09.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:01:09.333Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:02:09.646Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:03:09.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:04:09.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:05:09.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:06:09.613Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:07:09.319Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:08:09.611Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:09:09.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:10:09.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:11:09.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:12:09.677Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:13:09.318Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:14:09.653Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:15:09.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:16:09.609Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:17:09.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:18:09.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:19:09.304Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:20:09.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:21:09.480Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:22:09.656Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:23:09.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:24:09.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:25:09.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:26:09.637Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:27:09.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:28:09.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:29:09.296Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:30:09.589Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:31:09.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:32:09.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:33:09.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:34:09.621Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:35:09.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:36:09.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:37:09.306Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:38:09.615Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:39:09.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:40:09.594Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:41:09.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:42:09.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:43:09.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:44:09.745Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:45:09.448Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:46:09.684Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:47:09.455Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:48:09.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:49:09.334Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:50:09.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:51:09.472Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:52:09.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:53:09.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:54:09.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:55:09.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:56:09.675Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:57:09.454Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:58:09.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T19:59:09.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:00:09.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:01:09.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:02:09.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:03:09.439Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:04:09.662Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:05:09.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:06:09.608Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:07:09.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:08:09.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:09:09.471Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:10:09.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:11:09.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:12:09.650Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:13:09.302Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:14:09.612Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:15:09.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:16:09.620Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:17:09.353Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:18:09.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:19:09.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:20:09.584Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:21:09.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:22:09.655Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:23:09.528Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:24:09.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:25:09.313Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:26:10.301Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:27:09.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:28:09.703Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:29:09.413Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:30:09.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:31:09.505Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:32:10.069Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:33:09.394Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:34:09.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:35:09.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:36:09.712Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:37:09.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:38:09.704Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:39:09.354Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:40:09.657Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:41:09.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:42:09.683Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:43:09.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:44:09.691Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:45:09.547Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:46:09.687Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:47:09.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:48:09.708Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:49:09.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:50:09.614Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:51:09.314Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:52:09.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:53:09.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:54:09.638Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:55:09.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:56:09.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:57:09.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:58:09.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T20:59:09.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:00:09.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:01:09.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:02:09.668Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:03:09.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:04:09.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:05:09.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:06:09.733Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:07:09.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:08:09.743Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:09:09.461Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:10:09.660Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:11:09.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:12:09.642Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:13:09.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:14:09.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:15:09.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:16:09.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:17:09.285Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:18:09.674Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:19:09.475Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:20:09.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:21:09.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:22:09.624Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:23:09.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:24:09.681Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:25:09.347Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:26:09.757Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:27:09.330Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:28:09.616Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:29:09.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:30:09.930Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:31:09.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:32:09.760Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:33:09.432Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:34:09.695Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:35:09.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:36:09.739Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:37:09.399Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:38:09.827Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:39:09.368Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:40:09.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:41:09.282Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:42:09.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:43:09.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:44:09.623Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:45:09.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:46:09.631Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:47:09.360Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:48:09.641Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:49:09.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:50:09.785Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:51:09.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:52:09.711Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:53:09.386Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:54:09.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:55:09.287Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:56:09.663Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:57:09.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:58:09.643Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T21:59:09.328Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:00:09.804Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:01:09.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:02:10.024Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:03:09.382Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:04:09.667Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:05:09.377Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:06:09.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:07:09.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:08:09.701Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:09:09.421Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:10:09.664Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:11:09.329Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:12:09.826Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:13:09.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:14:09.720Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:15:09.323Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:16:09.707Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:17:09.324Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:18:09.635Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:19:09.320Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:20:09.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:21:09.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:22:09.717Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:23:09.405Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:24:09.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:25:09.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:26:09.754Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:27:09.428Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:28:09.644Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:29:09.732Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:30:09.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:31:09.409Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:32:09.651Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:33:09.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:34:09.636Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:35:09.395Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:36:09.625Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:37:09.315Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:01.890Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:03.986Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:09.031Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:13.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:18.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:21.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:23.963Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"1b0090ed-9ab6-4bef-b11e-e0d36f5bc629\",\"job_id\":\"b3023ba4-ee76-44c1-8744-c6877f62cfcd\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"hello there\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T22:38:24.000Z\",\"updated_at\":\"2024-11-11T22:38:24.000Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T22:38:24.010Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T22:38:24.035Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T22:38:24.037Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:25.053Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:29.593Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:34.477Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T22:38:38.259Z"}
{"level":"info","message":"Completed job 1b0090ed-9ab6-4bef-b11e-e0d36f5bc629 1b0090ed-9ab6-4bef-b11e-e0d36f5bc629 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-11T22:38:38.263Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:39.066Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:44.027Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:49.110Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:54.174Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:38:59.123Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:04.002Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:09.025Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"45c6ee9d-9c0c-49fe-bed0-46a7a643335a\",\"job_id\":\"9982d35a-8f0f-4798-ba23-2cb8968ccf24\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"my name is martin, nice to meet you. What is your name?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T22:39:13.816Z\",\"updated_at\":\"2024-11-11T22:39:13.816Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T22:39:13.855Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T22:39:13.880Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T22:39:13.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:14.129Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:15.246Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:19.898Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:24.837Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T22:39:25.621Z"}
{"level":"info","message":"Completed job 45c6ee9d-9c0c-49fe-bed0-46a7a643335a 45c6ee9d-9c0c-49fe-bed0-46a7a643335a on queue tasks with result My name is Qwen, and I'm here to help you with any questions or information you need! How can I assist you today?","timestamp":"2024-11-11T22:39:25.630Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:29.000Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:34.019Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:39.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:42.068Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:44.240Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:45.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:48.950Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:54.075Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:39:59.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:04.044Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:09.025Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"708ef095-ced5-457e-9861-1cacaeae444e\",\"job_id\":\"4fbf5645-d570-41e4-8df5-de164cc64bdb\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"do you understand react and typescript with next.js?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T22:40:13.413Z\",\"updated_at\":\"2024-11-11T22:40:13.413Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T22:40:13.421Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T22:40:13.447Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T22:40:13.452Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:14.496Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:14.763Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:19.949Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:25.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:29.946Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:34.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:39.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:44.905Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:49.840Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:54.792Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:40:59.734Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:04.888Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:09.800Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:14.810Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:19.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:25.094Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T22:41:29.588Z"}
{"level":"info","message":"Completed job 708ef095-ced5-457e-9861-1cacaeae444e 708ef095-ced5-457e-9861-1cacaeae444e on queue tasks with result Yes, I understand React, TypeScript, and Next.js.\n\nReact is a popular JavaScript library for building user interfaces, particularly for single-page applications where you need dynamic content that can be updated without reloading the entire page. It uses a declarative approach, focusing on what the UI should look like at any given time rather than how to change it step by step.\n\nTypeScript is a superset of JavaScript that adds static types and other features to help catch errors early in development. This makes your code more robust and maintainable. With TypeScript, you can define precise data structures for variables, function parameters, and return values, which helps ensure that the data used throughout your application is consistent.\n\nNext.js is a framework built on top of React that adds features like server-side rendering (SSR), static site generation (SSG), and automatic optimization to improve performance. It also simplifies routing, API handling, and deployment.\n\nTogether, these technologies can be powerful for building modern web applications that are both performant and maintainable. With Next.js, you can leverage the benefits of React's component-based architecture and TypeScript's type safety while taking advantage of server-side rendering for SEO and fast loading times.","timestamp":"2024-11-11T22:41:29.599Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:29.690Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:34.008Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:38.978Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:44.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:48.988Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:54.038Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:41:58.969Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:03.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:09.014Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:14.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:18.973Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:23.972Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:29.057Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:34.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:39.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:44.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:49.429Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:54.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:42:59.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:04.352Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:09.441Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:14.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:19.373Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:24.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:29.735Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:43:34.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:44:09.778Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:09.440Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:18.676Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:24.362Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:29.331Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:34.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:39.375Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:44.307Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:49.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:54.335Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:45:59.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:46:04.526Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:46:09.694Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:46:14.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:46:19.400Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:09.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:35.310Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:39.342Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:44.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:49.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:54.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:47:59.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:04.415Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:09.756Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:11.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:14.538Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:19.474Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:24.357Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:29.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:34.298Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:48:59.948Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:49:09.321Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:49:32.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:50:09.402Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:51:07.580Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:51:08.412Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:51:09.771Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:52:09.672Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:53:09.393Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:54:09.648Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:55:09.488Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:33.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:34.991Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:39.464Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:43.572Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:44.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:49.032Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:54.366Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:58:55.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:01.424Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:02.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:02.921Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:04.715Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:09.026Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"175273c3-2462-4f62-b2d3-0ff4ff066350\",\"job_id\":\"ea41d728-ff51-4fb6-857d-1c87e22a3b71\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"hi\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T22:59:10.169Z\",\"updated_at\":\"2024-11-11T22:59:10.169Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T22:59:10.179Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T22:59:10.207Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T22:59:10.212Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:11.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:14.215Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:19.078Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:24.289Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:30.134Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T22:59:34.593Z"}
{"level":"info","message":"Completed job 175273c3-2462-4f62-b2d3-0ff4ff066350 175273c3-2462-4f62-b2d3-0ff4ff066350 on queue tasks with result Hello! How can I assist you today? Is there something specific you'd like to know or discuss?","timestamp":"2024-11-11T22:59:34.597Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:35.026Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:39.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:44.509Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:46.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:51.798Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T22:59:57.628Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:03.246Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:07.436Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:12.489Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:17.384Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:22.444Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:27.376Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:32.380Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:37.390Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:42.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:47.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:00:52.351Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:01:09.652Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:02:09.459Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:03:09.723Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:04:09.370Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:05:09.682Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:06:09.634Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:07:09.671Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:08:09.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:09:09.819Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:10:09.365Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:11:09.779Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:11:29.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:11:30.731Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:12:09.829Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:13:09.686Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:14:09.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:15:09.556Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:16:09.891Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:17:09.427Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:18:09.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:19:09.379Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:20:09.755Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:21:09.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:22:09.718Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:23:09.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:24:09.719Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:25:09.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:26:09.647Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:27:09.434Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:28:09.799Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:28:52.253Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:28:54.473Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:28:55.169Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"b9269255-beea-47e1-bae8-d474d37c2663\",\"job_id\":\"a48b7dea-f711-4113-8ab4-6010b048a0ba\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"hello\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:28:56.516Z\",\"updated_at\":\"2024-11-11T23:28:56.516Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:28:56.538Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T23:28:56.562Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T23:28:56.567Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:28:57.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:29:10.070Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T23:29:12.936Z"}
{"level":"info","message":"Completed job b9269255-beea-47e1-bae8-d474d37c2663 b9269255-beea-47e1-bae8-d474d37c2663 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-11T23:29:12.939Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:29:40.847Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"dbdfc57e-fcf7-4bda-9c7f-9bbad0809a49\",\"job_id\":\"9c63ff7f-4490-4913-8dfb-aa120103d1af\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"hello\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:29:45.633Z\",\"updated_at\":\"2024-11-11T23:29:45.633Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:29:45.643Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T23:29:45.665Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T23:29:45.673Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:29:47.171Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T23:29:48.795Z"}
{"level":"info","message":"Completed job dbdfc57e-fcf7-4bda-9c7f-9bbad0809a49 dbdfc57e-fcf7-4bda-9c7f-9bbad0809a49 on queue tasks with result Hello! How can I assist you today?","timestamp":"2024-11-11T23:29:48.799Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"0984c5bd-81dd-4060-8a3a-a351ce51adc2\",\"job_id\":\"f8f924ef-8359-49f3-8163-836d7c360a3d\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"yo\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:29:51.337Z\",\"updated_at\":\"2024-11-11T23:29:51.337Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:29:51.346Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T23:29:51.372Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T23:29:51.374Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:29:52.657Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T23:29:56.181Z"}
{"level":"info","message":"Completed job 0984c5bd-81dd-4060-8a3a-a351ce51adc2 0984c5bd-81dd-4060-8a3a-a351ce51adc2 on queue tasks with result Hey there! How can I assist you today?","timestamp":"2024-11-11T23:29:56.185Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:30:09.400Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"dd24e7da-e251-4bd4-9a38-ff5c8155e37b\",\"job_id\":\"b2f37ea0-50e0-4fff-9125-676497e6fef0\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"What's up, dirt?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:30:27.226Z\",\"updated_at\":\"2024-11-11T23:30:27.226Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:30:27.253Z"}
{"level":"verbose","message":"Worker tasks processing job:","timestamp":"2024-11-11T23:30:27.291Z"}
{"level":"verbose","message":"Before Procesing Action SEND_MESSAGE","timestamp":"2024-11-11T23:30:27.294Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:30:28.394Z"}
{"level":"verbose","message":"\n\nd.result = ","timestamp":"2024-11-11T23:30:39.562Z"}
{"level":"info","message":"Completed job dd24e7da-e251-4bd4-9a38-ff5c8155e37b dd24e7da-e251-4bd4-9a38-ff5c8155e37b on queue tasks with result Hello! It looks like there might have been a small typo in your greeting. I'm here to help with any questions or information you need. What can I assist you with today?","timestamp":"2024-11-11T23:30:39.563Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:31:09.741Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:32:09.557Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:33:09.908Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:34:09.420Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:09.781Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:22.030Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:23.121Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:26.848Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:28.583Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:31.879Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:35.011Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:39.669Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:41.795Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:44.709Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:46.311Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:48.327Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:35:48.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:36:09.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:36:24.606Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:36:26.073Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:36:40.363Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:36:41.483Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:09.896Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:13.578Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:14.570Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:18.085Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:19.295Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:23.028Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:37:24.012Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:38:09.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:38:31.993Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:38:33.133Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:38:41.022Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:38:43.001Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:39:09.458Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:39:57.271Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:39:57.869Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"c08040b1-f54d-4a51-ad1d-31486989fed0\",\"job_id\":\"8e2ab6fe-8480-40dc-a78a-3443869153b3\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"yo\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:40:05.657Z\",\"updated_at\":\"2024-11-11T23:40:05.657Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:40:05.680Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:40:06.654Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:40:10.086Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:40:10.892Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:41:10.045Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:09.418Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:39.447Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:41.369Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:46.512Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:49.361Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:54.332Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:58.514Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:42:59.372Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:04.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:09.345Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:14.346Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:19.381Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:24.359Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:29.422Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:34.364Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:39.450Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:44.338Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:49.383Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:54.688Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:43:59.367Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:04.349Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:09.425Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:14.417Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:19.358Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:24.587Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:29.325Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:34.416Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:39.385Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:44.356Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:49.487Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:54.401Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:44:59.527Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:04.596Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:09.371Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:14.522Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:19.529Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:24.822Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:29.438Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:34.340Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:36.726Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:39.378Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"701e614d-8c2c-41ff-9271-0d8dac8cdb2f\",\"job_id\":\"b827a45a-e0d2-47dc-8017-bcd4edaf0bd5\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"yo\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:45:41.233Z\",\"updated_at\":\"2024-11-11T23:45:41.233Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:45:41.244Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:42.866Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:45.111Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:50.197Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:54.768Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:45:59.415Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"b639378e-11b8-465f-b286-65fbe93a5edf\",\"job_id\":\"88678e97-03ed-4d07-b9c7-3e11316a13a9\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"thanks\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:45:59.779Z\",\"updated_at\":\"2024-11-11T23:45:59.779Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:45:59.796Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:01.141Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:04.811Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:09.378Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:14.389Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:19.336Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:24.442Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:29.366Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"da388f8c-5819-4674-8af1-82b158b2849d\",\"job_id\":\"82868ea2-9517-4882-89c8-1d3bba320d7f\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"my name is martin\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:46:31.199Z\",\"updated_at\":\"2024-11-11T23:46:31.199Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:46:31.208Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:32.502Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"0eea34f9-10a9-4d79-8a29-1eeadf6991b1\",\"job_id\":\"c311779f-ecf0-4982-9cbb-49e79de5ac51\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"whats my name?\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:46:53.335Z\",\"updated_at\":\"2024-11-11T23:46:53.335Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:46:53.343Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:46:54.713Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:47:10.280Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:48:09.997Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:49:09.423Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:50:09.721Z"}
{"level":"info","message":"Task successfully inserted into Supabase: {\"id\":\"88974a8b-9618-4b59-943e-fb99a526a5ca\",\"job_id\":\"a7540ad1-b2b4-4fbf-8565-aebcb22d744a\",\"action\":\"SEND_MESSAGE\",\"payload\":{\"conversationId\":\"9215fd82-59a0-4887-b334-8fcf2355b439\",\"message\":\"hello\"},\"status\":\"waiting\",\"type\":\"REALTIME\",\"created_at\":\"2024-11-11T23:50:36.701Z\",\"updated_at\":\"2024-11-11T23:50:36.701Z\",\"user_id\":\"f7bebd3a-bafb-40fd-b60f-0ab18cac4dea\",\"result\":null,\"error\":null}","timestamp":"2024-11-11T23:50:36.728Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:50:38.041Z"}
{"level":"info","message":"Redis Client Connected","timestamp":"2024-11-11T23:51:09.354Z"}
